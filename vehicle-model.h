/** File: vehicle-model.h
	Description: specify the macro constants, structures, and enum types for vehicle model.
	Date: 09/19/2007
	Maker: Jaehoon Jeong, jjeong@cs.umn.edu
*/

#ifndef __VEHICLE_MODEL_H__
#define __VEHICLE_MODEL_H__

#include "common.h"
#include "queue.h"
//#include "tpd.h" //predicted_encounter_graph_t

///** predeclaration of packet queue structure */
//struct _packet_queue_t;

/** vehicle's role */
typedef enum _vehicle_role_t
{
  VEHICLE_ROLE_UNKNOWN = 0,
  VEHICLE_ROLE_AP_VEHICLE = 1,    /* AP vehicle that is guranteed to passes AP(s) */
  VEHICLE_ROLE_NON_AP_VEHICLE = 2 /* Non-AP vehicle that is not guranteed to pass AP(s) */
} vehicle_role_t;

/* vehicle type */
typedef enum _vehicle_type_t
{
  VEHICLE_UNKNOWN = 0, //unknown vehicle
  VEHICLE_CARRIER = 1, //carrier candidate vehicle
  VEHICLE_CURRENT_PACKET_CARRIER = 2, //current packet carrier vehicle 
  VEHICLE_DESTINATION = 3 //destination vehicle
} vehicle_type_t;

/* vehicle path direction to which the vehicle is moving on its vehicle trajectory */
typedef enum _vehicle_path_direction_t
{
  VEHICLE_PATH_DIRECTION_UNKNOWN = 0,
  VEHICLE_PATH_DIRECTION_FORWARD = 1,
  VEHICLE_PATH_DIRECTION_BACKWARD = 2
} vehicle_path_direction_t;

/** vehicle structure */
typedef struct struct_vehicle
{
    int id;   /* vehicle id */
    vehicle_type_t type; /* vehicle type */
    mobility_type_t mobility_type; //mobility type for path_list: type = {MOBILITY_FREE, MOBILITY_OPEN, MOBILITY_CLOSED}
    vehicle_role_t role; /* vehicle role */

    STATE state; /* vehicle state */
    double state_time; /* current time for vehicle state */

    /** EDD information for upload from vehicle to AP; note that this EDD is used to construct a convoy and to select a leader within the convoy */
    double EDD; /* vehicle's Expected Delivery Delay (EDD) that is the estimated delivery delay from this vehicle to the destination */
    double EDD_SD; //vehicle's Expected Delivery Delay Standard Deviation (EDD_SD)
    double EDD_update_time; /* EDD update time */

    /** EDD information for download from AP to vehicle */
    double EDD_for_download; /* EDD for download that is computed for a target point */
    double EDD_SD_for_download; /* EDD_SD for download that is computed for a target point */
    double EDD_update_time_for_download; /* EDD update time for download that is computed for a target point */

	/* EDR information of TPD data forwarding */
	double EDR_for_V2V; /* the Expected Delivery Ratio (EDR) from vehicle (or AP) to destination vehicle for V2V */
	double EDD_for_V2V; /* the Expected Delivery Delay (EDD) from vehicle (or AP) to destination vehicle for V2V */
	double EDD_SD_for_V2V; /* the Standard Devidation (EDD_SD) for vehicle's Expected Delivery Delay (EDD) from vehicle (or AP) to destination vehicle */
    double EDR_update_time_for_V2V; /* EDR update time for V2V */

    /** Target Point Information */
    int target_point_id; //target point id of the packet latest generated by AP
    struct_traffic_table tp_table; //target point traffic table
    unsigned int latest_packet_seq; //sequence number of the packet latest generated by AP
    double latest_packet_receive_time; //receive time of the packet latest generated by AP
    struct _packet_queue_node_t *latest_packet_ptr; //pointer to the latest packet from AP

    unsigned int original_latest_packet_seq; //original sequence number of the packet latest generated by AP in order to check whether either latest_packet_seq or latest_packet_receive_time is updated
    double original_latest_packet_receive_time; //original receive time of the packet latest generated by AP in order to check whether either latest_packet_seq or latest_packet_receive_time is updated

    double target_point_recomputation_time; //recomputation time for a new target point for the packet in this vehicle

    /*****************************/
    int seq;  /* sequence number for generated packets */
    double direction; /* movement direction: unit is [radian] */
    vehicle_path_direction_t path_direction; /* path moving direction on its vehicle trajectory */
    double steering_angle; /* steering angle */
    double speed; /* movement speed in [m/s] */
    double speed_standard_deviation; /* speed standard deviation in [m/s] */
	double unit_length_mean_travel_time; /* mean travel time for unit length [s/m] */
	double unit_length_travel_time_standard_deviation; /* travel time standard deviation for unit length [s/m] */
	double unit_length_travel_time_variance; /* travel time variance for unit length [(s/m)^2] */
    double acceleration; /* speed acceleration */
    double wheelbase; /* wheelbase that is the length between the front-end axle and back-end axle */
    double max_turning_angle; /* maximum turning angle */
    struct_coordinate1_t init_pos; /* initial position in the Cartesian coordinate system */
    struct_coordinate2_t init_pos_in_Gr; /* initial position in the graph coordinate system (i.e., edge id and relative location) in real graph Gr */
    struct_coordinate1_t current_pos; /* current position in the Cartesian coordinate system (i.e., Euclidean space) */
    struct_coordinate1_t pos_update_vector; /* position update vector */
    struct_coordinate2_t current_pos_in_Gr; /* current position in the graph coordinate system (i.e., edge id and relative location) in real graph Gr */
    struct_coordinate3_t current_pos_in_digraph; /* current position in the digraph for the road network */
    double edge_length; /* length of the edge where the vehicle is moving */
    double path_length; /* length of the path where the vehicle is moving */
    MOVE_TYPE move_type; /* movement type for directional edge = {MOVE_FORWARD, MOVE_BACKWARD} */
    double move_start_time; /* time is when vehicle starts to move in each movement step */
    double move_end_time;   /* time is when vehicle ends to move in each movement step */
    double move_interval;   /* movement interval in each movement step */
    double arrival_time;    /* time when it arrives at road network */
    double restart_time;     /* time when this vehicle restared its movement with a new trajectory */
    double detection_time; /* time detected by a sensor */
    double edge_arrival_time;    /* time when it arrives at an edge */
    double edge_departure_time;    /* time when it departs from an edge */
    int detecting_sensor; /* first detecting sensor's id*/
    struct _sensor_queue_t *sensor_queue; /* pointer to sensor queue; the memory allocated to sensor queue should be released later */
    struct _packet_queue_t *packet_queue; /* pointer to packet queue; the memory allocated to packet queue should be released later */
    //struct _packet_queue_t packet_queue; //without using the pointer type for packet queue, there occurs a compilation error complaining that "field packet_queue has incomplete type". This is because we use "struct _packet_queue_t *" rather than "struct _packet_queue_tx".

    boolean flag_vehicle_movement_queue_registration; //flag to indicate whether the vehicle is registered in a vehicle movement queue
    struct _vehicle_movement_queue_node_t *ptr_vehicle_movement_queue_node; //pointer to vehicle movement queue node        

    boolean flag_convoy_registration; //flag to indicate whether the vehicle is registered in a convoy 
    struct _convoy_queue_node_t *ptr_convoy_queue_node; //pointer to convoy queue node
    double convoy_join_time; //convoy join time

    double update_time; /* time to update the vehicle's mobility behavior */

    struct_path_node *path_list; /* list of vertices on the path from source to destination */
    int path_hop_count; /* hop count for the path, i.e., the number of edges */
    struct_path_node *path_ptr; /* pointer to the current position vertex (i.e., the tail vertex of the current edge) on the path */
    int path_current_hop; /* this indicates what hop the vehicle is moving; 0 means the first edge on the path and path_hop_count-1 means the last edge on the path */
	double path_current_edge_offset; /* offset in the current edge along the path that starts from 0 and ends upto the length of the edge */

    int path_traverse_count; //count for how many times vehicle passed its vehicle trajectory

	/** Variables for TPD */
	struct _predicted_encounter_graph_t *predicted_encounter_graph; //predicted encounter graph

    struct struct_vehicle* next; /* next vehicle */
    struct struct_vehicle* prev; /* previous vehicle */
} struct_vehicle_t;

#endif

