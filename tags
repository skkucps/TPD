!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACCESS_POINT_GRAPH_NODE	graph-data-struct.h	/^	ACCESS_POINT_GRAPH_NODE = 6     \/* access point node at road graph *\/$/;"	e	enum:_GRAPH_NODE_TYPE
ADJACENCY_MATRIX_FILE	common.h	401;"	d
ADJACENCY_MATRIX_FILE	common.h	510;"	d
AFX_STDAFX_H__635F58F9_1523_43A3_A70E_61923933F939__INCLUDED_	stdafx.h	7;"	d
AGGREGATION_TYPE_0	param.h	/^{ AGGREGATION_TYPE_0 = 0, \/\/no use of data aggregation$/;"	e	enum:_aggregation_type_t
AGGREGATION_TYPE_1	param.h	/^  AGGREGATION_TYPE_1 = 1  \/\/use of data aggregation	$/;"	e	enum:_aggregation_type_t
APL_MATLAB_START_COMMAND	matlab-operation.h	22;"	d
AP_Delete	access-point-model.c	/^void AP_Delete(struct_access_point_t *AP)$/;"	f
AP_Init	access-point-model.c	/^void AP_Init(struct_access_point_t *AP, parameter_t *param, struct_graph_node* Gr, int Gr_size, char *ap_vertex, int ap_id)$/;"	f
AP_PACKET_ARRIVE	common.h	/^	AP_PACKET_ARRIVE = 29, \/* state where a packet is generated at the AP *\/$/;"	e	enum:_STATE
AP_PACKET_SEND	common.h	/^	AP_PACKET_SEND = 30,   \/* state where the AP tries to send its packets to an appropriate carrier vehicle *\/$/;"	e	enum:_STATE
AP_START	common.h	/^	AP_START = 27,         \/* state where the AP starts its data forwarding operation *\/$/;"	e	enum:_STATE
AP_UPDATE	common.h	/^	AP_UPDATE = 28,         \/* state where the AP updates its vehicular traffic statistics *\/$/;"	e	enum:_STATE
AP_deployment_flag	param.h	/^		boolean AP_deployment_flag; \/\/AP deployment flag = {0: APs are deployed by graph configuration, 1: APs are deployed by Bernoulli process}$/;"	m	struct:parameter
AP_deployment_probability	param.h	/^		double AP_deployment_probability; \/\/AP deployment probability p$/;"	m	struct:parameter
AP_node	queue.h	/^        struct _access_point_queue_node_t *AP_node; \/\/pointer to the access point$/;"	m	struct:_carrier_trace_queue_node_t	typeref:struct:_carrier_trace_queue_node_t::_access_point_queue_node_t
AVERAGE_TRAJECTORY_DISTANCE	common.h	290;"	d
AddIntersection_EDD_Queue_Node	shortest-path.c	/^void  AddIntersection_EDD_Queue_Node(struct_graph_node *G, int G_size, char *tail_node, char *head_node)$/;"	f
AddIntersection_EDD_Queue_Relationship	shortest-path.c	/^void AddIntersection_EDD_Queue_Relationship(struct_graph_node *G, int G_size, char *tail_node, char *head_node)$/;"	f
AddNeighborNode	shortest-path.c	/^void AddNeighborNode(struct_graph_node *G, char *node, char *neighbor_node, double weight, double density, GRAPH_NODE_TYPE type, GRAPH_NODE_ROLE role)$/;"	f
AddNeighborRelationship	shortest-path.c	/^void AddNeighborRelationship(struct_graph_node *G, char *node1, GRAPH_NODE_TYPE type1, GRAPH_NODE_ROLE role1, char *node2, GRAPH_NODE_TYPE type2, GRAPH_NODE_ROLE role2, double weight, double density)$/;"	f
AddTrafficTableEntry	shortest-path.c	/^boolean AddTrafficTableEntry(struct_traffic_table *table, char *node)$/;"	f
Adjust_Maximum_AccessPoint_Number	shortest-path.c	/^void Adjust_Maximum_AccessPoint_Number(parameter_t *param, struct_traffic_table *ap_table)$/;"	f
Ar_edd	param.h	/^	int **Ar_edd; \/\/connectivity adjacency matrix for EDD whose entry value of 1 indicates that the edge has two incident intersections with stationary nodes$/;"	m	struct:_vanet_information_table_t
AssignRoleToGraphNode	shortest-path.c	/^void AssignRoleToGraphNode(struct_graph_node *G, int G_size, struct_traffic_table *table, GRAPH_NODE_ROLE role)$/;"	f
AssignTypeAndRoleToGraphNode	shortest-path.c	/^void AssignTypeAndRoleToGraphNode(struct_graph_node *G, int G_size, struct_traffic_table *src_table, struct_traffic_table *dst_table)$/;"	f
AssociateGraphEdgeWithDirectionalEdgeEntry	shortest-path.c	/^void AssociateGraphEdgeWithDirectionalEdgeEntry(struct_graph_node *G, int G_size, directional_edge_queue_t *E)$/;"	f
AssociateGraphEdgeWithEdgeEntry	shortest-path.c	/^void AssociateGraphEdgeWithEdgeEntry(struct_graph_node *G, int G_size, edge_queue_t *E)$/;"	f
AugmentGraph_With_TargetPoint	shortest-path.c	/^void AugmentGraph_With_TargetPoint(struct_access_point_t *AP, struct_coordinate3_t *target_point, struct_graph_node *Gr, int Gr_size)$/;"	f
B	smpl.c	/^real B(int f)$/;"	f
BUFFER_SIZE	graph-data-struct.h	22;"	d
BUF_SIZE	common.h	568;"	d
BUF_SIZE	param.h	21;"	d
Build_Min_Heap	heap.c	/^void Build_Min_Heap(struct_shortest_path_node *Q, int Q_size)$/;"	f
CC	Makefile	/^CC= g++ -Wno-write-strings -Wno-format-security$/;"	m
CFLAG1	Makefile	/^CFLAG1= -c -O $(PG_FLAG)  $(GSL_INCLUDE)$/;"	m
CFLAG2	Makefile	/^CFLAG2= -c -g $(PG_FLAG) $(GSL_INCLUDE)$/;"	m
CFLAG3	Makefile	/^CFLAG3= -o $@ $(OS_TYPE) $(PG_FLAG)$/;"	m
CFLAG4	Makefile	/^CFLAG4= -o $@ $(PG_FLAG) $(GSL_LIBRARY)$/;"	m
CFLAG5	Makefile	/^CFLAG5= -o $@ -g $(PG_FLAG) $(GSL_LIBRARY)$/;"	m
CLUSTER_ENTRANCE	queue.h	/^	CLUSTER_ENTRANCE = 1,   \/\/entrance cluster that is a set of entrance nodes$/;"	e	enum:_cluster_type_t
CLUSTER_HOLE	queue.h	/^	CLUSTER_HOLE = 3        \/\/hole cluster that is a set of sensing hole nodes$/;"	e	enum:_cluster_type_t
CLUSTER_PROTECTION	queue.h	/^	CLUSTER_PROTECTION = 2, \/\/protection cluster that is a set of protection nodes$/;"	e	enum:_cluster_type_t
CLUSTER_UNKNOWN	queue.h	/^	CLUSTER_UNKNOWN = 0,    \/\/unknow cluster type$/;"	e	enum:_cluster_type_t
COMPARISON_AVERAGE_CONVOY_LENGTH_ESTIMATION_TYPE	param.h	/^  COMPARISON_AVERAGE_CONVOY_LENGTH_ESTIMATION_TYPE = 6,$/;"	e	enum:_comparison_target_type_t
COMPARISON_AVERAGE_LINK_DELAY_ESTIMATION_TYPE	param.h	/^  COMPARISON_AVERAGE_LINK_DELAY_ESTIMATION_TYPE = 7,$/;"	e	enum:_comparison_target_type_t
COMPARISON_EDD_AND_LINK_MODEL	param.h	/^  COMPARISON_EDD_AND_LINK_MODEL = 1,$/;"	e	enum:_comparison_target_type_t
COMPARISON_EDD_MODEL	param.h	/^  COMPARISON_EDD_MODEL = 2,$/;"	e	enum:_comparison_target_type_t
COMPARISON_EDGE_DELAY_MODEL	param.h	/^  COMPARISON_EDGE_DELAY_MODEL = 4,$/;"	e	enum:_comparison_target_type_t
COMPARISON_HOLE_LABELING_ALGORITHM	param.h	/^  COMPARISON_HOLE_LABELING_ALGORITHM = 22,$/;"	e	enum:_comparison_target_type_t
COMPARISON_HOLE_LABELING_MODE	param.h	/^  COMPARISON_HOLE_LABELING_MODE = 23$/;"	e	enum:_comparison_target_type_t
COMPARISON_INTERSECTION_FORWARDING_TYPE	param.h	/^  COMPARISON_INTERSECTION_FORWARDING_TYPE = 5,$/;"	e	enum:_comparison_target_type_t
COMPARISON_SCHEDULE_ALGORITHM	param.h	/^  COMPARISON_SCHEDULE_ALGORITHM = 21,$/;"	e	enum:_comparison_target_type_t
COMPARISON_TARGET_POINT_COMPUTATION_METHOD	param.h	/^  COMPARISON_TARGET_POINT_COMPUTATION_METHOD = 9,$/;"	e	enum:_comparison_target_type_t
COMPARISON_TARGET_POINT_NUMBER	param.h	/^  COMPARISON_TARGET_POINT_NUMBER = 10,$/;"	e	enum:_comparison_target_type_t
COMPARISON_TARGET_POINT_SELECTION_TYPE	param.h	/^  COMPARISON_TARGET_POINT_SELECTION_TYPE = 8,$/;"	e	enum:_comparison_target_type_t
COMPARISON_TBD_EDD_COMPUTATION_TYPE	param.h	/^  COMPARISON_TBD_EDD_COMPUTATION_TYPE = 3,$/;"	e	enum:_comparison_target_type_t
COMPARISON_UNKNOWN	param.h	/^{ COMPARISON_UNKNOWN = 0,$/;"	e	enum:_comparison_target_type_t
CONF_FILE	common.h	316;"	d
CONF_FILE	common.h	453;"	d
CONF_FILE_FOR_AVERAGE_CONVOY_LENGTH	common.h	318;"	d
CONF_FILE_FOR_AVERAGE_CONVOY_LENGTH	common.h	456;"	d
CONF_FILE_FOR_AVERAGE_DETECTION_TIME	common.h	324;"	d
CONF_FILE_FOR_DOWNLOAD	common.h	311;"	d
CONF_FILE_FOR_NETWORK_LIFETIME	common.h	321;"	d
CONF_FILE_FOR_UPLOAD	common.h	312;"	d
CONF_FILE_FOR_V2V	common.h	313;"	d
CONVOY_CREATE	common.h	/^	CONVOY_CREATE = 19,    \/* convoy create state *\/$/;"	e	enum:_STATE
CONVOY_DELETE	common.h	/^	CONVOY_DELETE = 21,    \/* convoy delete state *\/$/;"	e	enum:_STATE
CONVOY_UPDATE	common.h	/^	CONVOY_UPDATE = 20,    \/* convoy update state *\/$/;"	e	enum:_STATE
COORDINATE_DIRECTIONAL_EDGE_TYPE_REGULAR_EDGE	graph-data-struct.h	/^        COORDINATE_DIRECTIONAL_EDGE_TYPE_REGULAR_EDGE = 1, \/\/a regular edge such that tail_node != head_node and weight > 0$/;"	e	enum:_coordinate_directional_edge_type_t
COORDINATE_DIRECTIONAL_EDGE_TYPE_UNKNOWN	graph-data-struct.h	/^        COORDINATE_DIRECTIONAL_EDGE_TYPE_UNKNOWN = 0, \/\/unknown directional edge type$/;"	e	enum:_coordinate_directional_edge_type_t
COORDINATE_DIRECTIONAL_EDGE_TYPE_VERTEX_EDGE	graph-data-struct.h	/^        COORDINATE_DIRECTIONAL_EDGE_TYPE_VERTEX_EDGE = 2\/\/a vertex edge such that tail_node == head_node and weight == 0$/;"	e	enum:_coordinate_directional_edge_type_t
CP	graph-data-struct.h	/^        double CP; \/\/contacting probability for a packet carrier to meet at least one contact vehicle towards road r_ij, when the carrier moves within the intersection area of I_i $/;"	m	struct:_struct_graph_node
CP	queue.h	/^        double CP; \/\/contacting probability for a packet carrier to meet at least one contact vehicle towards road <tail_node,head_node>, when the carrier moves within the intersection area of tail_node$/;"	m	struct:_angle_queue_node_t
CTAGS	Makefile	/^CTAGS=ctags$/;"	m
Communication_range	common.h	587;"	d
ComputeSensingSchedule	schedule.c	/^void ComputeSensingSchedule(parameter_t *param, schedule_table_t *T, struct_sensor_table *S)$/;"	f
ComputeSensorDutyCycle	schedule.c	/^void ComputeSensorDutyCycle(sensor_queue_node_t *pSensor, schedule_table_node_t *pTableNode, double sensor_work_time, sensor_scan_type_t scan_type)$/;"	f
ComputeSleepingSchedule	schedule.c	/^void ComputeSleepingSchedule(parameter_t *param, schedule_table_t *T, struct_sensor_table *S, struct_traffic_table *src_table, struct_traffic_table *dst_table, int G_size, double **D_move, int **M_move, int **D_scan, int **M_scan, double *movement_time, double *scanning_time, double *sleeping_time)$/;"	f
ComputeSurveillanceSchedule	schedule.c	/^void ComputeSurveillanceSchedule(parameter_t *param, schedule_table_t *T, struct_sensor_table *S, struct_traffic_table *src_table, struct_traffic_table *dst_table, struct_graph_node *G, int G_size, double **D_move, int **M_move, int **D_scan, int **M_scan, double *movement_time, double *scanning_time, double *sleeping_time)$/;"	f
Compute_PathDistance_For_VehicleTrajectory	shortest-path.c	/^double Compute_PathDistance_For_VehicleTrajectory(vehicle_trajectory_queue_t *pTrajectory_Queue)$/;"	f
Compute_PathDistance_From_CurrentPosition_To_EndPosition_With_VehicleTrajectory_Along_With_PathTravelTime_And_Deviation	shortest-path.c	/^double Compute_PathDistance_From_CurrentPosition_To_EndPosition_With_VehicleTrajectory_Along_With_PathTravelTime_And_Deviation(parameter_t *param, double current_time, packet_queue_node_t *packet, double *travel_time, double *travel_time_deviation)$/;"	f
Compute_PathDistance_From_CurrentPosition_To_TargetPoint_With_VehiclePathList	shortest-path.c	/^double Compute_PathDistance_From_CurrentPosition_To_TargetPoint_With_VehiclePathList(double current_time, struct_vehicle_t *vehicle, char *target_point)$/;"	f
Compute_PathDistance_From_CurrentPosition_To_TargetPoint_With_VehiclePathList_Along_With_PathTravelTime_And_Deviation	shortest-path.c	/^double Compute_PathDistance_From_CurrentPosition_To_TargetPoint_With_VehiclePathList_Along_With_PathTravelTime_And_Deviation(parameter_t *param, double current_time, struct_vehicle_t *vehicle, char *target_point, double *travel_time, double *travel_time_deviation)$/;"	f
Compute_PathDistance_From_CurrentPosition_To_TargetPoint_With_VehicleTrajectory	shortest-path.c	/^double Compute_PathDistance_From_CurrentPosition_To_TargetPoint_With_VehicleTrajectory(double current_time, vehicle_trajectory_queue_t *pTrajectory_Queue, vehicle_trajectory_queue_node_t *pCurrent_Trajectory_QNode, double offset_in_current_edge, char *target_point)$/;"	f
Compute_PathDistance_From_CurrentPosition_To_TargetPoint_With_VehicleTrajectory_Along_With_PathTravelTime_And_Deviation	shortest-path.c	/^double Compute_PathDistance_From_CurrentPosition_To_TargetPoint_With_VehicleTrajectory_Along_With_PathTravelTime_And_Deviation(parameter_t *param, double current_time, vehicle_trajectory_queue_t *pTrajectory_Queue, vehicle_trajectory_queue_node_t *pCurrent_Trajectory_QNode, double offset_in_current_edge, char *target_point, double *travel_time, double *travel_time_deviation)$/;"	f
Compute_TargetPoint_OptimizationValue	shortest-path.c	/^double Compute_TargetPoint_OptimizationValue(parameter_t *param, int target_point_id, double EDD_p, double EDD_SD_p, double EAD_p, double EAD_SD_p, double packet_ttl, double *max_constraint_value, int *max_constraint_value_target_point_id)$/;"	f
Compute_TravelTime_For_VehicleTrajectory	shortest-path.c	/^double Compute_TravelTime_For_VehicleTrajectory(parameter_t *param, double current_time, vehicle_trajectory_queue_t *pTrajectory_Queue)$/;"	f
ConstructConditionalForwardingProbabilityQueueNodes_Per_DirectionalEdge	queue.c	/^void ConstructConditionalForwardingProbabilityQueueNodes_Per_DirectionalEdge(struct_graph_node *G, int G_size)$/;"	f
ConstructDirectionalEdgeQueue	queue.c	/^void ConstructDirectionalEdgeQueue(parameter_t *param, directional_edge_queue_t *Q, struct_graph_node *G, int G_size)$/;"	f
ConstructEdgeQueue	queue.c	/^void ConstructEdgeQueue(edge_queue_t *Q, struct_graph_node *G, int G_size, parameter_t *param)$/;"	f
ConstructRoadNetworkGraphSet_And_DirectionalEdgeQueueSet_With_SetAssociation	queue.c	/^int ConstructRoadNetworkGraphSet_And_DirectionalEdgeQueueSet_With_SetAssociation($/;"	f
ConstructScheduleTable	schedule.c	/^void ConstructScheduleTable(schedule_table_t *T, parameter_t *param, struct_graph_node *G, int G_size, struct_traffic_table *src_table, struct_traffic_table *dst_table)$/;"	f
Construct_Adjacency_Matrix	shortest-path.c	/^double** Construct_Adjacency_Matrix(struct_graph_node *G, int G_size)$/;"	f
CopyConditionalForwardingProbabilityQueueNodes_For_DirectionalEdge	queue.c	/^void CopyConditionalForwardingProbabilityQueueNodes_For_DirectionalEdge(conditional_forwarding_probability_queue_t *Q_src, conditional_forwarding_probability_queue_t *Q_dst)$/;"	f
CopyGraphNodeAndNeighborList	shortest-path.c	/^void CopyGraphNodeAndNeighborList(struct_graph_node* src, struct_graph_node* dst, struct_graph_node *G, int G_size)$/;"	f
CopyQueue	queue.c	/^void CopyQueue(queue_t *dst_Q, queue_t *src_Q)$/;"	f
CopyTrafficTable	shortest-path.c	/^void CopyTrafficTable(struct_traffic_table *dst, struct_traffic_table *src)$/;"	f
CopyVehicularTrafficStatistics	shortest-path.c	/^void CopyVehicularTrafficStatistics(struct_graph_node *Gr, int Gr_size, struct_graph_node *Ga, int Ga_size)$/;"	f
CopyVehicularTrafficStatistics_For_NeighborList	shortest-path.c	/^void CopyVehicularTrafficStatistics_For_NeighborList(struct_graph_node *src, struct_graph_node *dst)$/;"	f
CopyVehicularTrafficStatistics_From_DirectionalEdges_To_DirectionalSubedges	shortest-path.c	/^void CopyVehicularTrafficStatistics_From_DirectionalEdges_To_DirectionalSubedges(struct_graph_node *Gr, int Gr_size, struct_graph_node *Ga, int Ga_size, char *tail_node, char *head_node, char *virtual_node)$/;"	f
Copy_Packet_Trajectory	queue.c	/^void Copy_Packet_Trajectory(parameter_t *param, double current_time, packet_queue_node_t *SrcPacket, packet_queue_node_t *DstPacket)$/;"	f
Copy_Vehicle_Trajectory	queue.c	/^void Copy_Vehicle_Trajectory(parameter_t *param, double current_time, packet_queue_node_t *SrcPacket, packet_queue_node_t *DstPacket)$/;"	f
CountSensorNumberByOffset	schedule.c	/^int CountSensorNumberByOffset(schedule_table_node_t *pTableNode, enum_status_t status_type, double x)$/;"	f
DATA_FORWARDING_MODE_DOWNLOAD	param.h	/^  DATA_FORWARDING_MODE_DOWNLOAD = 1, \/\/multhop data forwarding from AP to vehicle$/;"	e	enum:_data_forwarding_mode_t
DATA_FORWARDING_MODE_UNKNOWN	param.h	/^{ DATA_FORWARDING_MODE_UNKNOWN = 0,$/;"	e	enum:_data_forwarding_mode_t
DATA_FORWARDING_MODE_UPLOAD	param.h	/^  DATA_FORWARDING_MODE_UPLOAD = 2, \/\/multihop data forwarding from vehicle to AP$/;"	e	enum:_data_forwarding_mode_t
DATA_FORWARDING_MODE_V2V	param.h	/^  DATA_FORWARDING_MODE_V2V = 3 \/\/multihop data forwarding from vehicle to vehicle$/;"	e	enum:_data_forwarding_mode_t
DEFAULT_SENSOR_DENSITY	shortest-path.h	24;"	d
DELAY_PACKET_INTERARRIVAL_TIME	common.h	/^	DELAY_PACKET_INTERARRIVAL_TIME = 5   \/* packet interarrival time *\/$/;"	e	enum:_DELAY_TYPE
DELAY_SENSOR	common.h	/^	DELAY_SENSOR = 1,                    \/* think time at sensor *\/$/;"	e	enum:_DELAY_TYPE
DELAY_TYPE	common.h	/^} DELAY_TYPE;$/;"	t	typeref:enum:_DELAY_TYPE
DELAY_TYPE_UNKNOWN	common.h	/^	DELAY_TYPE_UNKNOWN = 0,$/;"	e	enum:_DELAY_TYPE
DELAY_VEHICLE_INTERARRIVAL_TIME	common.h	/^	DELAY_VEHICLE_INTERARRIVAL_TIME = 2, \/* vehicle's interarrival time *\/$/;"	e	enum:_DELAY_TYPE
DELAY_VEHICLE_SPEED	common.h	/^	DELAY_VEHICLE_SPEED = 3,             \/* vehicle's speed *\/$/;"	e	enum:_DELAY_TYPE
DELAY_VEHICLE_THINK_TIME	common.h	/^	DELAY_VEHICLE_THINK_TIME = 4,        \/* vehicle's think time *\/$/;"	e	enum:_DELAY_TYPE
DEQ	queue.h	/^    directional_edge_queue_t DEQ; \/\/directional edge queue for graph G$/;"	m	struct:_forwarding_table_queue_node_t
DEa	queue.h	/^    directional_edge_queue_t DEa; \/* directional edge queue containing the directional edges in augmented graph Ga *\/$/;"	m	struct:_access_point_queue_node_t
DUPLICATE_DETECTION_INTERVAL	common.h	582;"	d
DeleteConvoyWithCID	queue.c	/^void DeleteConvoyWithCID(convoy_queue_t *Q, int cid)$/;"	f
DeleteDirectionalEdgeWithEID	queue.c	/^void DeleteDirectionalEdgeWithEID(directional_edge_queue_t *Q, int eid)$/;"	f
DeleteEdgeWithEID	queue.c	/^void DeleteEdgeWithEID(edge_queue_t *Q, int eid)$/;"	f
DeleteGraphNode	shortest-path.c	/^void DeleteGraphNode(struct_graph_node *G, int G_size, char *u)$/;"	f
DeleteHoleEndpointWithEID	queue.c	/^void DeleteHoleEndpointWithEID(hole_endpoint_queue_t *H, int eid, char *node)$/;"	f
DeleteIntersection_EDD_Queue_Node	shortest-path.c	/^void  DeleteIntersection_EDD_Queue_Node(struct_graph_node *G, int G_size, char *tail_node, char *head_node)$/;"	f
DeleteIntersection_EDD_Queue_Relationship	shortest-path.c	/^void DeleteIntersection_EDD_Queue_Relationship(struct_graph_node *G, int G_size, char *tail_node, char *head_node)$/;"	f
DeleteNeighborNode	shortest-path.c	/^void DeleteNeighborNode(struct_graph_node *G, char *node, char *neighbor_node)$/;"	f
DeleteNeighborRelationship	shortest-path.c	/^void DeleteNeighborRelationship(struct_graph_node *G, char *node1, char *node2)$/;"	f
DeleteSensorQueueNodesJustAfterVirtualOffset	queue.c	/^void DeleteSensorQueueNodesJustAfterVirtualOffset(sensor_queue_t *Q, double offset)$/;"	f
DeleteSensorQueueNodesJustBeforeVirtualOffset	queue.c	/^void DeleteSensorQueueNodesJustBeforeVirtualOffset(sensor_queue_t *Q, double offset)$/;"	f
DeleteSubedgeWithEID	queue.c	/^void DeleteSubedgeWithEID(subedge_queue_t *Q, int eid)$/;"	f
DeleteTableEntry	schedule.c	/^void DeleteTableEntry(schedule_table_t *T, schedule_table_node_t *pTableNode)$/;"	f
DeleteTrafficTableEntry	shortest-path.c	/^boolean DeleteTrafficTableEntry(struct_traffic_table *table, char *node)$/;"	f
DeleteVehicleMovementWithVID	queue.c	/^void DeleteVehicleMovementWithVID(vehicle_movement_queue_t *Q, int vid)$/;"	f
DeleteVehicleWithVID	queue.c	/^void DeleteVehicleWithVID(vehicle_queue_t *Q, int vid)$/;"	f
Delete_Edge_In_NeighborList	queue.c	/^boolean Delete_Edge_In_NeighborList(adjacency_list_queue_node_t *u,$/;"	f
Delete_Node_In_AdjacencyList	queue.c	/^boolean Delete_Node_In_AdjacencyList(adjacency_list_queue_node_t *v)$/;"	f
DeploySensorNetwork	schedule.c	/^int DeploySensorNetwork(parameter_t *param, schedule_table_t *T, struct_sensor_table *S, edge_queue_t *Q)$/;"	f
Dequeue	queue.c	/^queue_node_t* Dequeue(queue_t *Q)$/;"	f
Dequeue_With_QueueNodePointer	queue.c	/^queue_node_t* Dequeue_With_QueueNodePointer(queue_t *Q, queue_node_t *p)$/;"	f
DestroyGlobalPacketQueueNode	queue.c	/^void DestroyGlobalPacketQueueNode(global_packet_queue_node_t *global_packet)$/;"	f
DestroyPacketQueueNode	queue.c	/^void DestroyPacketQueueNode(packet_queue_node_t *packet)$/;"	f
DestroyQueue	queue.c	/^void DestroyQueue(queue_t *Q)$/;"	f
DestroyQueueNode	queue.c	/^void DestroyQueueNode(queue_type_t type, queue_node_t *q)$/;"	f
DestroyRoadNetworkGraphSet_And_DirectionalEdgeQueueSet	queue.c	/^int DestroyRoadNetworkGraphSet_And_DirectionalEdgeQueueSet($/;"	f
DestroyScheduleTable	schedule.c	/^void DestroyScheduleTable(schedule_table_t *T)$/;"	f
DestroySensorTable	schedule.c	/^void DestroySensorTable(struct_sensor_table *S)$/;"	f
Detable	schedule.c	/^schedule_table_node_t* Detable(schedule_table_t *T)$/;"	f
Dijkstra	shortest-path.c	/^struct_set_node* Dijkstra(struct_graph_node *G, int G_size, char *src)$/;"	f
Dr_edc	param.h	/^    double **Dr_edc; \/\/weight matrix for all-pairs shortest paths in terms of E2E delivery cost or cost variance in real graph Gr$/;"	m	struct:_vanet_information_table_t
Dr_edc	queue.h	/^	double **Dr_edc; \/\/the shortest delay from start-point to end-point$/;"	m	struct:_forwarding_table_queue_node_t
Dr_edd	param.h	/^    double **Dr_edd; \/\/weight matrix for all-pairs shortest paths in terms of E2E delivery delay or delay variance in real graph Gr$/;"	m	struct:_vanet_information_table_t
Dr_edd	queue.h	/^	double **Dr_edd; \/\/the shortest delay from start-point to end-point$/;"	m	struct:_forwarding_table_queue_node_t
Dr_move	param.h	/^    double **Dr_move; \/\/weight matrix for all-pairs shortest paths in terms of vehicle movement in real graph Gr$/;"	m	struct:_vanet_information_table_t
EDC	graph-data-struct.h	/^        double EDC; \/\/Expected Delivery Cost (EDC) through this edge, i.e., the delivery cost's first moment; Note that under download mode, EDC is the EDC from this intersection to the target point$/;"	m	struct:_struct_graph_node
EDC_SD	graph-data-struct.h	/^        double EDC_SD; \/\/Expected delivery cost standard deviation; Note that under download mode, EDC is the EDC from this intersection to the target point$/;"	m	struct:_struct_graph_node
EDC_VAR	graph-data-struct.h	/^        double EDC_VAR; \/\/Expected delivery cost variance; Note that under download mode, EDC is the EDC from this intersection to the target point$/;"	m	struct:_struct_graph_node
EDD	graph-data-struct.h	/^        double EDD; \/\/Expected Delivery Delay (EDD) through this edge, i.e., the delivery delay's first moment; Note that under download mode, EDD is the EDD from this intersection to the target point$/;"	m	struct:_struct_graph_node
EDD	queue.h	/^	double EDD; \/\/Expected Delivery Delay (EDD)$/;"	m	struct:_adjacency_list_queue_node_t
EDD	queue.h	/^        double EDD; \/\/EDD from carrier to the AP$/;"	m	struct:_carrier_trace_queue_node_t
EDD	queue.h	/^        double EDD; \/\/Expected Data Delivery (EDD) Metric$/;"	m	struct:_intersection_edd_queue_node_t
EDD	queue.h	/^        double EDD; \/\/expected delivery delay that a packet is forwarded through this edge to the destination$/;"	m	struct:_delay_queue_node_t
EDD	queue.h	/^        double EDD; \/\/expected delivery delay$/;"	m	struct:_delay_component_queue_node_t
EDD	queue.h	/^        double EDD; \/\/expected delivery delay$/;"	m	struct:_global_packet_queue_node_t
EDD	queue.h	/^        double EDD;$/;"	m	struct:_probability_and_statistics_queue_node_t
EDD	vehicle-model.h	/^    double EDD; \/* vehicle's Expected Delivery Delay (EDD) that is the estimated delivery delay from this vehicle to the destination *\/$/;"	m	struct:struct_vehicle
EDD_SD	graph-data-struct.h	/^        double EDD_SD; \/\/Expected delivery delay standard deviation; Note that under download mode, EDD is the EDD from this intersection to the target point$/;"	m	struct:_struct_graph_node
EDD_SD	queue.h	/^        double EDD_SD; \/\/EDD_SD from carrier to the AP$/;"	m	struct:_carrier_trace_queue_node_t
EDD_SD	queue.h	/^        double EDD_SD; \/\/expected delivery delay standard deviation$/;"	m	struct:_global_packet_queue_node_t
EDD_SD	queue.h	/^        double EDD_SD;$/;"	m	struct:_probability_and_statistics_queue_node_t
EDD_SD	vehicle-model.h	/^    double EDD_SD; \/\/vehicle's Expected Delivery Delay Standard Deviation (EDD_SD)$/;"	m	struct:struct_vehicle
EDD_SD_for_V2V	vehicle-model.h	/^	double EDD_SD_for_V2V; \/* the Standard Devidation (EDD_SD) for vehicle's Expected Delivery Delay (EDD) from vehicle (or AP) to destination vehicle *\/$/;"	m	struct:struct_vehicle
EDD_SD_for_download	queue.h	/^        double EDD_SD_for_download; \/\/EDD_SD from carrier to the target point$/;"	m	struct:_carrier_trace_queue_node_t
EDD_SD_for_download	queue.h	/^    double EDD_SD_for_download; \/* EDD_SD to AP's current target point for a destination vehicle *\/$/;"	m	struct:_access_point_queue_node_t
EDD_SD_for_download	vehicle-model.h	/^    double EDD_SD_for_download; \/* EDD_SD for download that is computed for a target point *\/$/;"	m	struct:struct_vehicle
EDD_VAR	graph-data-struct.h	/^        double EDD_VAR; \/\/Expected delivery delay variance; Note that under download mode, EDD is the EDD from this intersection to the target point$/;"	m	struct:_struct_graph_node
EDD_flag	queue.h	/^	boolean EDD_flag; \/\/flag to show whether the EDD of this graph node is resoved or not$/;"	m	struct:_adjacency_list_queue_node_t
EDD_for_V2V	queue.h	/^		double EDD_for_V2V; \/\/Expected Delivery Delay (EDD) for V2V in TPD$/;"	m	struct:_packet_queue_node_t
EDD_for_V2V	vehicle-model.h	/^	double EDD_for_V2V; \/* the Expected Delivery Delay (EDD) from vehicle (or AP) to destination vehicle for V2V *\/$/;"	m	struct:struct_vehicle
EDD_for_download	queue.h	/^        double EDD_for_download; \/\/EDD from carrier to the target point$/;"	m	struct:_carrier_trace_queue_node_t
EDD_for_download	queue.h	/^    double EDD_for_download; \/* EDD to AP's current target point for a destination vehicle *\/$/;"	m	struct:_access_point_queue_node_t
EDD_for_download	vehicle-model.h	/^    double EDD_for_download; \/* EDD for download that is computed for a target point *\/$/;"	m	struct:struct_vehicle
EDD_update_time	vehicle-model.h	/^    double EDD_update_time; \/* EDD update time *\/$/;"	m	struct:struct_vehicle
EDD_update_time_for_download	vehicle-model.h	/^    double EDD_update_time_for_download; \/* EDD update time for download that is computed for a target point *\/$/;"	m	struct:struct_vehicle
EDGE_DIRECTION_BACKWARD	schedule.h	/^	EDGE_DIRECTION_BACKWARD = 2 \/\/edge direction: physical edge's tail -> head <= tail -> physical edge's head$/;"	e	enum:_enum_edge_direction_t
EDGE_DIRECTION_FORWARD	schedule.h	/^	EDGE_DIRECTION_FORWARD = 1, \/\/edge direction: physical edge's tail -> tail => head -> physical edge's head$/;"	e	enum:_enum_edge_direction_t
EDGE_DIRECTION_UNKNOWN	schedule.h	/^	EDGE_DIRECTION_UNKNOWN = 0,$/;"	e	enum:_enum_edge_direction_t
EDGE_SCALE_FACTOR	shortest-path.h	20;"	d
EDR	queue.h	/^	double EDR; \/\/Expected Delivery Ration (EDR)$/;"	m	struct:_adjacency_list_queue_node_t
EDR_flag	queue.h	/^	boolean EDR_flag; \/\/flag to show whether the EDR of this graph node is resoved or not$/;"	m	struct:_adjacency_list_queue_node_t
EDR_for_V2V	queue.h	/^		double EDR_for_V2V; \/\/Expected Delivery Ratio (EDR) for V2V in TPD$/;"	m	struct:_packet_queue_node_t
EDR_for_V2V	vehicle-model.h	/^	double EDR_for_V2V; \/* the Expected Delivery Ratio (EDR) from vehicle (or AP) to destination vehicle for V2V *\/$/;"	m	struct:struct_vehicle
EDR_update_time_for_V2V	vehicle-model.h	/^    double EDR_update_time_for_V2V; \/* EDR update time for V2V *\/$/;"	m	struct:struct_vehicle
ENDPOINT_HEAD	schedule.h	/^	ENDPOINT_HEAD = 2  \/\/head node$/;"	e	enum:_enum_endpoint_t
ENDPOINT_TAIL	schedule.h	/^	ENDPOINT_TAIL = 1, \/\/tail node$/;"	e	enum:_enum_endpoint_t
ENDPOINT_UNKNOWN	schedule.h	/^	ENDPOINT_UNKNOWN = 0,$/;"	e	enum:_enum_endpoint_t
ENERGY_TOLERANCE	common.h	570;"	d
ENTRANCE_GRAPH_NODE	graph-data-struct.h	/^	ENTRANCE_GRAPH_NODE = 3,        \/* entrance node at road graph *\/$/;"	e	enum:_GRAPH_NODE_TYPE
EPIDEMIC_Discard_Original_Packet_In_AP	epidemic.c	/^int EPIDEMIC_Discard_Original_Packet_In_AP(double current_time, $/;"	f
EPIDEMIC_Forward_Packet_Copy_From_AP_To_Next_Carrier	epidemic.c	/^int EPIDEMIC_Forward_Packet_Copy_From_AP_To_Next_Carrier(parameter_t *param, double current_time, struct_access_point_t *AP, struct_vehicle_t *next_carrier, packet_delivery_statistics_t *packet_delivery_stat, int *discard_count)$/;"	f
EPIDEMIC_Forward_Packet_Copy_To_Next_Carrier	epidemic.c	/^int EPIDEMIC_Forward_Packet_Copy_To_Next_Carrier(parameter_t *param, double current_time, struct_vehicle_t *vehicle, struct_vehicle_t *next_carrier, packet_delivery_statistics_t *packet_delivery_stat, int *discard_count)$/;"	f
EPIDEMIC_Is_There_Next_Carrier_On_One_Way_Road_Segment	epidemic.c	/^boolean EPIDEMIC_Is_There_Next_Carrier_On_One_Way_Road_Segment(parameter_t *param, double current_time, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, struct_vehicle_t **next_carrier)$/;"	f
EPIDEMIC_Is_There_Next_Carrier_On_Road_Segment	epidemic.c	/^boolean EPIDEMIC_Is_There_Next_Carrier_On_Road_Segment(parameter_t *param, double current_time, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, struct_vehicle_t **next_carrier_1, struct_vehicle **next_carrier_2)$/;"	f
EPIDEMIC_Is_There_Next_Carrier_On_Two_Way_Road_Segment	epidemic.c	/^boolean EPIDEMIC_Is_There_Next_Carrier_On_Two_Way_Road_Segment(parameter_t *param, double current_time, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, struct_vehicle_t **next_carrier_1, struct_vehicle_t **next_carrier_2)$/;"	f
EPIDEMIC_Perform_Packet_Dissemination_At_Intersection	epidemic.c	/^int EPIDEMIC_Perform_Packet_Dissemination_At_Intersection(parameter_t *param,$/;"	f
EPIDEMIC_Perform_Packet_Dissemination_At_Intersection_For_AP	epidemic.c	/^int EPIDEMIC_Perform_Packet_Dissemination_At_Intersection_For_AP(parameter_t *param,$/;"	f
EPIDEMIC_Perform_Packet_Dissemination_On_Road_Segment	epidemic.c	/^int EPIDEMIC_Perform_Packet_Dissemination_On_Road_Segment(parameter_t *param, double current_time, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, packet_delivery_statistics_t *packet_delivery_stat)$/;"	f
EQ	queue.h	/^    edge_queue_t EQ; \/\/undirectional edge queue for graph G$/;"	m	struct:_forwarding_table_queue_node_t
EQUAL	param.h	/^  EQUAL = 1,        \/\/equal distribution of network means that sensors are located by the same insterval each other or other equal distribution makes the input delay be equal to the output delay$/;"	e	enum:_distribution_type_t
ERLANG	param.h	/^  ERLANG = 5,      \/\/k-Erlang distribution$/;"	e	enum:_distribution_type_t
ERROR_TOLERANCE_FOR_REAL_ARITHMETIC	common.h	576;"	d
ETAGS	Makefile	/^ETAGS=etags$/;"	m
EVALUATION_COMMUNICATION_AP_MAXIMUM_NUMBER	param.h	/^  EVALUATION_COMMUNICATION_AP_MAXIMUM_NUMBER = 9,$/;"	e	enum:_evaluation_type_t
EVALUATION_COMMUNICATION_PACKET_DELIVERY_PROBABILITY_THRESHOLD	param.h	/^  EVALUATION_COMMUNICATION_PACKET_DELIVERY_PROBABILITY_THRESHOLD = 8,$/;"	e	enum:_evaluation_type_t
EVALUATION_COMMUNICATION_PACKET_INTERARRIVAL_TIME	param.h	/^  EVALUATION_COMMUNICATION_PACKET_INTERARRIVAL_TIME = 6,$/;"	e	enum:_evaluation_type_t
EVALUATION_COMMUNICATION_PACKET_TTL	param.h	/^  EVALUATION_COMMUNICATION_PACKET_TTL = 7,$/;"	e	enum:_evaluation_type_t
EVALUATION_COMMUNICATION_SN_MAXIMUM_NUMBER	param.h	/^  EVALUATION_COMMUNICATION_SN_MAXIMUM_NUMBER = 12,$/;"	e	enum:_evaluation_type_t
EVALUATION_ENERGY_VARIATION	param.h	/^  EVALUATION_ENERGY_VARIATION = 22,$/;"	e	enum:_evaluation_type_t
EVALUATION_PATH_LENGTH_VARIATION	param.h	/^  EVALUATION_PATH_LENGTH_VARIATION = 25$/;"	e	enum:_evaluation_type_t
EVALUATION_SENSOR_DENSITY	param.h	/^  EVALUATION_SENSOR_DENSITY = 23,$/;"	e	enum:_evaluation_type_t
EVALUATION_SENSOR_DENSITY_VARIATION	param.h	/^  EVALUATION_SENSOR_DENSITY_VARIATION = 24,$/;"	e	enum:_evaluation_type_t
EVALUATION_SIMULATION_TIME	param.h	/^  EVALUATION_SIMULATION_TIME = 10,$/;"	e	enum:_evaluation_type_t
EVALUATION_UNKNOWN	param.h	/^{ EVALUATION_UNKNOWN = 0,$/;"	e	enum:_evaluation_type_t
EVALUATION_VEHICLE_AP_PASSING_ENTITY_PERCENTAGE	param.h	/^  EVALUATION_VEHICLE_AP_PASSING_ENTITY_PERCENTAGE = 11,$/;"	e	enum:_evaluation_type_t
EVALUATION_VEHICLE_INTERARRIVAL_TIME	param.h	/^  EVALUATION_VEHICLE_INTERARRIVAL_TIME = 5,$/;"	e	enum:_evaluation_type_t
EVALUATION_VEHICLE_MAXIMUM_NUMBER	param.h	/^  EVALUATION_VEHICLE_MAXIMUM_NUMBER = 1,$/;"	e	enum:_evaluation_type_t
EVALUATION_VEHICLE_PACKET_GENERATING_ENTITY_NUMBER	param.h	/^  EVALUATION_VEHICLE_PACKET_GENERATING_ENTITY_NUMBER = 2,$/;"	e	enum:_evaluation_type_t
EVALUATION_VEHICLE_SPEED	param.h	/^  EVALUATION_VEHICLE_SPEED = 3,$/;"	e	enum:_evaluation_type_t
EVALUATION_VEHICLE_SPEED_STANDARD_DEVIATION	param.h	/^  EVALUATION_VEHICLE_SPEED_STANDARD_DEVIATION = 4,$/;"	e	enum:_evaluation_type_t
EVALUATION_WORK_TIME	param.h	/^  EVALUATION_WORK_TIME = 21,$/;"	e	enum:_evaluation_type_t
EXPONENTIAL	param.h	/^  EXPONENTIAL = 4, \/\/exponential distribution$/;"	e	enum:_distribution_type_t
E_ratio	matlab-operation.h	/^	float E_ratio; \/\/ratio indicating the relative difference between Er and Ev$/;"	m	struct:_struct_matlab_localization_result
Ea	queue.h	/^    edge_queue_t Ea; \/* edge queue containing the information of edges in augmented graph Ga *\/$/;"	m	struct:_access_point_queue_node_t
Empty	apl-graph-matching.h	/^class Empty$/;"	c
EmptyQueue	queue.c	/^void EmptyQueue(queue_t *Q)$/;"	f
Enqueue	queue.c	/^queue_node_t* Enqueue(queue_t *Q, queue_node_t *node)$/;"	f
Enqueue_By_KeyAscendingOrder	queue.c	/^queue_node_t* Enqueue_By_KeyAscendingOrder(queue_t *Q, queue_node_t *node)$/;"	f
Enqueue_CarrierTraceEntry	queue.c	/^void Enqueue_CarrierTraceEntry(parameter_t *param, double current_time, packet_queue_node_t *packet, vanet_node_type_t node_type, void *vanet_node)$/;"	f
Enqueue_CarrierTraceEntry_For_Download	queue.c	/^void Enqueue_CarrierTraceEntry_For_Download(parameter_t *param, double current_time, packet_queue_node_t *packet, vanet_node_type_t node_type, void *vanet_node)$/;"	f
Enqueue_CarrierTraceEntry_For_Upload	queue.c	/^void Enqueue_CarrierTraceEntry_For_Upload(parameter_t *param, double current_time, packet_queue_node_t *packet, vanet_node_type_t node_type, void *vanet_node)$/;"	f
Enqueue_CarrierTraceEntry_For_V2V	queue.c	/^void Enqueue_CarrierTraceEntry_For_V2V(parameter_t *param, double current_time, packet_queue_node_t *packet, vanet_node_type_t node_type, void *vanet_node)$/;"	f
Enqueue_Packet_Into_GlobalPacketQueue	queue.c	/^global_packet_queue_node_t* Enqueue_Packet_Into_GlobalPacketQueue(parameter_t *param, double current_time, global_packet_queue_t *Q, packet_queue_node_t *packet)$/;"	f
Enqueue_Packet_Into_GlobalPacketQueue_With_TargetPoint_Recomputation_Schedule	queue.c	/^global_packet_queue_node_t* Enqueue_Packet_Into_GlobalPacketQueue_With_TargetPoint_Recomputation_Schedule(parameter_t *param, double current_time, global_packet_queue_t *Q, packet_queue_node_t *packet)$/;"	f
Enqueue_With_QueueNodePointer	queue.c	/^queue_node_t* Enqueue_With_QueueNodePointer(queue_t *Q, queue_node_t *p)$/;"	f
Entable	schedule.c	/^schedule_table_node_t* Entable(schedule_table_t *T, schedule_table_node_t *node)$/;"	f
Exchange	heap.c	/^void Exchange(struct_shortest_path_node *x, struct_shortest_path_node *y)$/;"	f
ExchangeElements	quick-sort.c	/^static void ExchangeElements(int *ptr1, int *ptr2)$/;"	f	file:
ExchangeElementsForAngleArray	quick-sort.c	/^static void ExchangeElementsForAngleArray(angle_queue_node_t **ptr1, angle_queue_node_t **ptr2)$/;"	f	file:
ExchangeElementsForDirectionalEdgeArray	quick-sort.c	/^static void ExchangeElementsForDirectionalEdgeArray(directional_edge_queue_node_t **ptr1, directional_edge_queue_node_t **ptr2)$/;"	f	file:
ExchangeElementsForEdgeSetArray	quick-sort.c	/^static void ExchangeElementsForEdgeSetArray(edge_set_queue_node_t **ptr1, edge_set_queue_node_t **ptr2)$/;"	f	file:
ExchangeElementsForIntersection_EDD_Array	quick-sort.c	/^static void ExchangeElementsForIntersection_EDD_Array(intersection_edd_queue_node_t **ptr1, intersection_edd_queue_node_t **ptr2)$/;"	f	file:
ExchangeElementsForSensingHoleEndpointArray	quick-sort.c	/^static void ExchangeElementsForSensingHoleEndpointArray(hole_endpoint_queue_node_t **ptr1, hole_endpoint_queue_node_t **ptr2)$/;"	f	file:
ExchangeElementsForSensorArray	quick-sort.c	/^static void ExchangeElementsForSensorArray(sensor_queue_node_t **ptr1, sensor_queue_node_t **ptr2)$/;"	f	file:
ExchangeElementsForVehicleArray	quick-sort.c	/^static void ExchangeElementsForVehicleArray(vehicle_queue_node_t **ptr1, vehicle_queue_node_t **ptr2)$/;"	f	file:
ExchangeElementsForVehicleMovementArray	quick-sort.c	/^static void ExchangeElementsForVehicleMovementArray(vehicle_movement_queue_node_t **ptr1, vehicle_movement_queue_node_t **ptr2)$/;"	f	file:
Expand_Graph_Memory	shortest-path.c	/^void Expand_Graph_Memory(struct_graph_node **G, int *G_size)$/;"	f
FALSE	graph-data-struct.h	/^	FALSE = 0,$/;"	e	enum:_boolean
FALSE	param.h	/^	FALSE = 0,$/;"	e	enum:_boolean
FEET	common.h	300;"	d
FF	smpl.h	33;"	d
FINAL_SENSING_HOLE_FILE	common.h	413;"	d
FINAL_SENSING_HOLE_FILE	common.h	522;"	d
FINAL_VIRTUAL_GRAPH_FILE	common.h	419;"	d
FINAL_VIRTUAL_GRAPH_FILE	common.h	528;"	d
FORWARDING_LINK_SELECTION_ANGLE	param.h	/^  FORWARDING_LINK_SELECTION_ANGLE = 1, \/\/selection based on the angle between the outgoing edge's vector and the direction vector towards the destination $/;"	e	enum:_data_forwarding_link_selection_t
FORWARDING_LINK_SELECTION_DELAY	param.h	/^  FORWARDING_LINK_SELECTION_DELAY = 3 \/\/selection based on the aggregated link delay between the current point to the destination point$/;"	e	enum:_data_forwarding_link_selection_t
FORWARDING_LINK_SELECTION_DISTANCE	param.h	/^  FORWARDING_LINK_SELECTION_DISTANCE = 2, \/\/selection based on the geographic distance between the current point to the destination point$/;"	e	enum:_data_forwarding_link_selection_t
FORWARDING_LINK_SELECTION_UNKNOWN	param.h	/^{ FORWARDING_LINK_SELECTION_UNKNOWN = 0,$/;"	e	enum:_data_forwarding_link_selection_t
FORWARDING_MODE_RANDOM_WALK	param.h	/^	FORWARDING_MODE_RANDOM_WALK = 1,$/;"	e	enum:_vanet_packet_forwarding_mode_t
FORWARDING_MODE_SOURCE_ROUTING	param.h	/^	FORWARDING_MODE_SOURCE_ROUTING = 2$/;"	e	enum:_vanet_packet_forwarding_mode_t
FORWARDING_MODE_UNKNOWN	param.h	/^	FORWARDING_MODE_UNKNOWN = 0,$/;"	e	enum:_vanet_packet_forwarding_mode_t
FP_DIGITS	analysis.h	24;"	d
FP_SCALE_FACTOR	analysis.h	27;"	d
FTQ	param.h	/^    struct _forwarding_table_queue_t *FTQ; \/\/pointer to the forwarding table queue$/;"	m	struct:_vanet_information_table_t	typeref:struct:_vanet_information_table_t::_forwarding_table_queue_t
FastDeleteDirectionalEdge	queue.c	/^void FastDeleteDirectionalEdge(directional_edge_queue_t *Q, char *tail_node, char *head_node, struct_graph_node *G)$/;"	f
FastDeleteEdge	queue.c	/^void FastDeleteEdge(edge_queue_t *Q, char *tail_node, char *head_node, struct_graph_node *G)$/;"	f
FastGetEdgeID_MoveType	queue.c	/^int FastGetEdgeID_MoveType(struct_graph_node *G, char *u, char *v, MOVE_TYPE *move_type, double *edge_length, directional_edge_queue_node_t **ptr_directional_edge_node_pointer)$/;"	f
FastLookupDirectionalEdgeQueue	queue.c	/^directional_edge_queue_node_t* FastLookupDirectionalEdgeQueue(struct_graph_node *G, char *u, char *v)$/;"	f
FastLookupEdgeQueue	queue.c	/^edge_queue_node_t* FastLookupEdgeQueue(struct_graph_node *G, char *u, char *v, boolean *flip_flag)$/;"	f
FindSensingHoles	schedule.c	/^int FindSensingHoles(schedule_table_t *T, struct_sensor_table *S, edge_queue_t *Er)$/;"	f
FindShortestPath	shortest-path.c	/^double FindShortestPath(struct_traffic_table *src_table, struct_traffic_table *dst_table, int G_size, double **D, char *shortest_path_src, char *shortest_path_dst)$/;"	f
Find_Current_VehicleTrajectoryQueueNode_Along_With_Current_Hop_And_Offset	shortest-path.c	/^vehicle_trajectory_queue_node_t* Find_Current_VehicleTrajectoryQueueNode_Along_With_Current_Hop_And_Offset(parameter_t *param, double current_time, struct_vehicle_t *carrier_vehicle, int *current_hop, double *current_offset)$/;"	f
Find_Current_VehicleTrajectoryQueueNode_Along_With_Current_Hop_And_Offset_For_Packet	shortest-path.c	/^vehicle_trajectory_queue_node_t* Find_Current_VehicleTrajectoryQueueNode_Along_With_Current_Hop_And_Offset_For_Packet(parameter_t *param, double current_time, packet_queue_node_t *pPacket, int *current_hop, double *current_offset)$/;"	f
Find_Current_VehicleTrajectoryQueueNode_Along_With_Current_Hop_And_Offset_For_StationaryNode	shortest-path.c	/^vehicle_trajectory_queue_node_t* Find_Current_VehicleTrajectoryQueueNode_Along_With_Current_Hop_And_Offset_For_StationaryNode(parameter_t *param, double current_time, stationary_node_queue_node_t *stationary_node, int *current_hop, double *current_offset)$/;"	f
Find_Following_Vehicle_Within_Communication_Range_On_Directional_Edge	queue.c	/^struct_vehicle_t* Find_Following_Vehicle_Within_Communication_Range_On_Directional_Edge(parameter_t *param, struct_vehicle_t *vehicle, int *acl_convoy_vehicle_number)$/;"	f
Find_NewTargetPoint_Where_Vehicle_Is_Close_To_DestinationVehicleTrajectory	shortest-path.c	/^int Find_NewTargetPoint_Where_Vehicle_Is_Close_To_DestinationVehicleTrajectory(parameter_t *param, double current_time, struct_vehicle_t *vehicle, forwarding_table_queue_t *FTQ, intersection_area_type_t input_intersection_area_type)$/;"	f
Find_Traffic_Source	shortest-path.c	/^char* Find_Traffic_Source(struct_schedule_table *sched_table, double current_time)$/;"	f
Find_VehicleTrajectoryQueueNode_For_VertexHop_On_VehicleTrajectory	shortest-path.c	/^vehicle_trajectory_queue_node_t* Find_VehicleTrajectoryQueueNode_For_VertexHop_On_VehicleTrajectory(vehicle_trajectory_queue_t *pTrajectory_Queue, char *vertex)$/;"	f
Find_Vehicle_Farthest_Towards_Edge_Head_Node_In_Connected_Network_Component	queue.c	/^struct_vehicle_t* Find_Vehicle_Farthest_Towards_Edge_Head_Node_In_Connected_Network_Component(parameter_t *param, struct_vehicle_t *vehicle)$/;"	f
Find_Vehicle_Following_Convoy_Head	queue.c	/^struct_vehicle_t* Find_Vehicle_Following_Convoy_Head(convoy_queue_node_t *convoy)$/;"	f
Find_VertexHop_On_VehicleTrajectory	shortest-path.c	/^int Find_VertexHop_On_VehicleTrajectory(vehicle_trajectory_queue_t *pTrajectory_Queue, char *vertex)$/;"	f
Floyd_Warshall_Allocate_2D_Matrix_Of_Type_Double	all-pairs-shortest-paths.c	/^double** Floyd_Warshall_Allocate_2D_Matrix_Of_Type_Double(int row_size, int column_size)$/;"	f
Floyd_Warshall_Allocate_2D_Matrix_Of_Type_TargetPointQueueNode_Pointer	all-pairs-shortest-paths.c	/^target_point_queue_node_t*** Floyd_Warshall_Allocate_2D_Matrix_Of_Type_TargetPointQueueNode_Pointer(int row_size, int column_size)$/;"	f
Floyd_Warshall_Allocate_All_Matrices	all-pairs-shortest-paths.c	/^void Floyd_Warshall_Allocate_All_Matrices(int G_size, double ***Dr_move, int ***Mr_move, int *matrix_size_for_movement_in_Gr, double ***Dv_move, int ***Mv_move, int *matrix_size_for_movement_in_Gv, int ***Dv_scan, int ***Mv_scan, int *matrix_size_for_scanning_in_Gv, int ***Dv_breach, int ***Mv_breach, int *matrix_size_for_breach_in_Gv)$/;"	f
Floyd_Warshall_Allocate_Matrices_For_Breach	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Allocate_Matrices_For_Breach(int ***D, int ***M, int matrix_size)$/;"	f
Floyd_Warshall_Allocate_Matrices_For_EDC	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Allocate_Matrices_For_EDC(double ***W, double ***D, int ***M, double ***S, int matrix_size)$/;"	f
Floyd_Warshall_Allocate_Matrices_For_EDD	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Allocate_Matrices_For_EDD(double ***D, int ***M, double ***S, int matrix_size)$/;"	f
Floyd_Warshall_Allocate_Matrices_For_EDD_VAR	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Allocate_Matrices_For_EDD_VAR(double ***D, int ***M, double ***S, int matrix_size)$/;"	f
Floyd_Warshall_Allocate_Matrices_For_Hop	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Allocate_Matrices_For_Hop(int ***D, int ***M, int matrix_size)$/;"	f
Floyd_Warshall_Allocate_Matrices_For_Mcast	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Allocate_Matrices_For_Mcast(double ***T, double ***D, int ***M, double ***S, int matrix_size)$/;"	f
Floyd_Warshall_Allocate_Matrices_For_Movement	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Allocate_Matrices_For_Movement(double ***D, int ***M, int matrix_size)$/;"	f
Floyd_Warshall_Allocate_Matrices_For_Scanning	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Allocate_Matrices_For_Scanning(int ***D, int ***M, int matrix_size)$/;"	f
Floyd_Warshall_Allocate_Matrix_Of_Type_Double	all-pairs-shortest-paths.c	/^double** Floyd_Warshall_Allocate_Matrix_Of_Type_Double(int size)$/;"	f
Floyd_Warshall_Allocate_Matrix_Of_Type_Int	all-pairs-shortest-paths.c	/^int** Floyd_Warshall_Allocate_Matrix_Of_Type_Int(int size)$/;"	f
Floyd_Warshall_Construct_Matrices_For_Breach	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Construct_Matrices_For_Breach(struct_graph_node *G, int G_size, int ***D, int ***M, int *matrix_size)$/;"	f
Floyd_Warshall_Construct_Matrices_For_EDC	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Construct_Matrices_For_EDC(struct_graph_node *G, int G_size, double ***W, double ***D, int ***M, double ***S, int *matrix_size, parameter_t *param)$/;"	f
Floyd_Warshall_Construct_Matrices_For_EDD	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Construct_Matrices_For_EDD(struct_graph_node *G, int G_size, double ***D, int ***M, double ***S, int *matrix_size, parameter_t *param)$/;"	f
Floyd_Warshall_Construct_Matrices_For_EDD_VAR	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Construct_Matrices_For_EDD_VAR(struct_graph_node *G, int G_size, double ***D, int ***M, double ***S, int *matrix_size, parameter_t *param)$/;"	f
Floyd_Warshall_Construct_Matrices_For_Hop	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Construct_Matrices_For_Hop(struct_graph_node *G, int G_size, int ***D, int ***M, int *matrix_size)$/;"	f
Floyd_Warshall_Construct_Matrices_For_Movement	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Construct_Matrices_For_Movement(struct_graph_node *G, int G_size, double ***D, int ***M, int *matrix_size)$/;"	f
Floyd_Warshall_Construct_Matrices_For_Scanning	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Construct_Matrices_For_Scanning(struct_graph_node *G, int G_size, int ***D, int ***M, int *matrix_size)$/;"	f
Floyd_Warshall_Construct_Shortest_PathInfo_For_Breach	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Construct_Shortest_PathInfo_For_Breach(int** D, int** M, int n)$/;"	f
Floyd_Warshall_Construct_Shortest_PathInfo_For_EDC	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Construct_Shortest_PathInfo_For_EDC(double** D, int** M, double** S, int n)$/;"	f
Floyd_Warshall_Construct_Shortest_PathInfo_For_EDD	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Construct_Shortest_PathInfo_For_EDD(double** D, int** M, double** S, int n)$/;"	f
Floyd_Warshall_Construct_Shortest_PathInfo_For_EDD_VAR	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Construct_Shortest_PathInfo_For_EDD_VAR(double** D, int** M, double** S, int n)$/;"	f
Floyd_Warshall_Construct_Shortest_PathInfo_For_Hop	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Construct_Shortest_PathInfo_For_Hop(int** D, int** M, int n)$/;"	f
Floyd_Warshall_Construct_Shortest_PathInfo_For_Movement	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Construct_Shortest_PathInfo_For_Movement(double** D, int** M, int n)$/;"	f
Floyd_Warshall_Construct_Shortest_PathInfo_For_Scanning	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Construct_Shortest_PathInfo_For_Scanning(int** D, int** M, int n)$/;"	f
Floyd_Warshall_Copy_Matrix_Of_Type_Double	all-pairs-shortest-paths.c	/^void Floyd_Warshall_Copy_Matrix_Of_Type_Double(double **M_dst, double **M_src, int matrix_size)$/;"	f
Floyd_Warshall_Copy_Matrix_Of_Type_Int	all-pairs-shortest-paths.c	/^void Floyd_Warshall_Copy_Matrix_Of_Type_Int(int **M_dst, int **M_src, int matrix_size)$/;"	f
Floyd_Warshall_Free_2D_Matrix_Of_Type_Double	all-pairs-shortest-paths.c	/^void Floyd_Warshall_Free_2D_Matrix_Of_Type_Double(double **A, int row_size, int column_size)$/;"	f
Floyd_Warshall_Free_2D_Matrix_Of_Type_TargetPointQueueNode_Pointer	all-pairs-shortest-paths.c	/^void Floyd_Warshall_Free_2D_Matrix_Of_Type_TargetPointQueueNode_Pointer(target_point_queue_node_t ***A, int row_size, int column_size)$/;"	f
Floyd_Warshall_Free_All_Matrices	all-pairs-shortest-paths.c	/^void Floyd_Warshall_Free_All_Matrices(double ***Dr_move, int ***Mr_move, int *matrix_size_for_movement_in_Gr, double ***Dv_move, int ***Mv_move, int *matrix_size_for_movement_in_Gv, int ***Dv_scan, int ***Mv_scan, int *matrix_size_for_scanning_in_Gv, int ***Dv_breach, int ***Mv_breach, int *matrix_size_for_breach_in_Gv)$/;"	f
Floyd_Warshall_Free_Matrices_For_Breach	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Free_Matrices_For_Breach(int ***D, int ***M, int *matrix_size)$/;"	f
Floyd_Warshall_Free_Matrices_For_EDC	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Free_Matrices_For_EDC(double ***W, double ***D, int ***M, double ***S, int *matrix_size)$/;"	f
Floyd_Warshall_Free_Matrices_For_EDD	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Free_Matrices_For_EDD(double ***D, int ***M, double ***S, int *matrix_size)$/;"	f
Floyd_Warshall_Free_Matrices_For_EDD_VAR	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Free_Matrices_For_EDD_VAR(double ***D, int ***M, double ***S, int *matrix_size)$/;"	f
Floyd_Warshall_Free_Matrices_For_Hop	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Free_Matrices_For_Hop(int ***D, int ***M, int *matrix_size)$/;"	f
Floyd_Warshall_Free_Matrices_For_Mcast	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Free_Matrices_For_Mcast(double ***T, double ***D, int ***M, double ***S, int *matrix_size)$/;"	f
Floyd_Warshall_Free_Matrices_For_Movement	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Free_Matrices_For_Movement(double ***D, int ***M, int *matrix_size)$/;"	f
Floyd_Warshall_Free_Matrices_For_Scanning	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Free_Matrices_For_Scanning(int ***D, int ***M, int *matrix_size)$/;"	f
Floyd_Warshall_Free_Matrix_Of_Type_Double	all-pairs-shortest-paths.c	/^void Floyd_Warshall_Free_Matrix_Of_Type_Double(double **A, int size)$/;"	f
Floyd_Warshall_Free_Matrix_Of_Type_Int	all-pairs-shortest-paths.c	/^void Floyd_Warshall_Free_Matrix_Of_Type_Int(int **A, int size)$/;"	f
Floyd_Warshall_Get_Shortest_Path	all-pairs-shortest-paths.c	/^void Floyd_Warshall_Get_Shortest_Path(int** M, int n, int src, int dst)$/;"	f
Floyd_Warshall_Init_Connectivity_Adjacency_Matrix_For_EDD	all-pairs-shortest-paths.c	/^int** Floyd_Warshall_Init_Connectivity_Adjacency_Matrix_For_EDD(parameter_t *param, struct_graph_node *G, int G_size, struct_traffic_table *sn_table, int ***A, int A_size)$/;"	f
Floyd_Warshall_Make_Connectivity_Adjacency_Matrix_For_EDD	all-pairs-shortest-paths.c	/^int** Floyd_Warshall_Make_Connectivity_Adjacency_Matrix_For_EDD(int **W, int W_size, struct_graph_node *G, int G_size)$/;"	f
Floyd_Warshall_Make_Connectivity_Adjacency_Matrix_For_Movement	all-pairs-shortest-paths.c	/^int** Floyd_Warshall_Make_Connectivity_Adjacency_Matrix_For_Movement(int **W, int W_size, struct_graph_node *G, int G_size)$/;"	f
Floyd_Warshall_Make_Shortest_Path_Queue	all-pairs-shortest-paths.c	/^path_queue_t* Floyd_Warshall_Make_Shortest_Path_Queue(int** M, int n, int src, int dst)$/;"	f
Floyd_Warshall_Make_VirtualGraph_With_Graph_And_ComponentVertexQueues	all-pairs-shortest-paths.c	/^void Floyd_Warshall_Make_VirtualGraph_With_Graph_And_ComponentVertexQueues(struct_graph_node *G, int G_size, component_vertex_queue_t *CVQ_src, component_vertex_queue_t *CVQ_tp, double ***A, int A_size)$/;"	f
Floyd_Warshall_Make_Weight_Matrix_For_Breach	all-pairs-shortest-paths.c	/^int** Floyd_Warshall_Make_Weight_Matrix_For_Breach(int **W, int W_size, struct_graph_node *G, int G_size)$/;"	f
Floyd_Warshall_Make_Weight_Matrix_For_EDC	all-pairs-shortest-paths.c	/^void Floyd_Warshall_Make_Weight_Matrix_For_EDC(double **W, double **D, double **S, int W_size, struct_graph_node *G, int G_size, parameter_t *param)$/;"	f
Floyd_Warshall_Make_Weight_Matrix_For_EDC_With_AdjacencyMatrix	all-pairs-shortest-paths.c	/^void Floyd_Warshall_Make_Weight_Matrix_For_EDC_With_AdjacencyMatrix(double **D, double **S, int D_size, double **T, parameter_t *param)$/;"	f
Floyd_Warshall_Make_Weight_Matrix_For_EDC_With_PacketForwardingTreePathQueue	all-pairs-shortest-paths.c	/^void Floyd_Warshall_Make_Weight_Matrix_For_EDC_With_PacketForwardingTreePathQueue(double **D, double **S, int matrix_size, packet_forwarding_tree_path_queue_t *PFTPQ)$/;"	f
Floyd_Warshall_Make_Weight_Matrix_For_EDD	all-pairs-shortest-paths.c	/^void Floyd_Warshall_Make_Weight_Matrix_For_EDD(double **D, double **S, int D_size, struct_graph_node *G, int G_size, parameter_t *param)$/;"	f
Floyd_Warshall_Make_Weight_Matrix_For_EDD_VAR	all-pairs-shortest-paths.c	/^void Floyd_Warshall_Make_Weight_Matrix_For_EDD_VAR(double **D, double **S, int D_size, struct_graph_node *G, int G_size, parameter_t *param)$/;"	f
Floyd_Warshall_Make_Weight_Matrix_For_EDD_With_AdjacencyMatrix	all-pairs-shortest-paths.c	/^void Floyd_Warshall_Make_Weight_Matrix_For_EDD_With_AdjacencyMatrix(double **D, double **S, int D_size, double **T, parameter_t *param)$/;"	f
Floyd_Warshall_Make_Weight_Matrix_For_Hop	all-pairs-shortest-paths.c	/^int** Floyd_Warshall_Make_Weight_Matrix_For_Hop(int **W, int W_size, struct_graph_node *G, int G_size)$/;"	f
Floyd_Warshall_Make_Weight_Matrix_For_Movement	all-pairs-shortest-paths.c	/^double** Floyd_Warshall_Make_Weight_Matrix_For_Movement(double **W, int W_size, struct_graph_node *G, int G_size)$/;"	f
Floyd_Warshall_Make_Weight_Matrix_For_Scanning	all-pairs-shortest-paths.c	/^int** Floyd_Warshall_Make_Weight_Matrix_For_Scanning(int **W, int W_size, struct_graph_node *G, int G_size)$/;"	f
Floyd_Warshall_Reallocate_Matrices_For_Breach	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Reallocate_Matrices_For_Breach(int G_size, int ***D, int ***M, int *matrix_size)$/;"	f
Floyd_Warshall_Reallocate_Matrices_For_EDC	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Reallocate_Matrices_For_EDC(int G_size, double ***W, double ***D, int ***M, double ***S, int *matrix_size)$/;"	f
Floyd_Warshall_Reallocate_Matrices_For_EDD	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Reallocate_Matrices_For_EDD(int G_size, double ***D, int ***M, double ***S, int *matrix_size)$/;"	f
Floyd_Warshall_Reallocate_Matrices_For_EDD_VAR	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Reallocate_Matrices_For_EDD_VAR(int G_size, double ***D, int ***M, double ***S, int *matrix_size)$/;"	f
Floyd_Warshall_Reallocate_Matrices_For_Hop	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Reallocate_Matrices_For_Hop(int G_size, int ***D, int ***M, int *matrix_size)$/;"	f
Floyd_Warshall_Reallocate_Matrices_For_Mcast	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Reallocate_Matrices_For_Mcast(int G_size, double ***T, double ***D, int ***M, double ***S, int *matrix_size)$/;"	f
Floyd_Warshall_Reallocate_Matrices_For_Movement	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Reallocate_Matrices_For_Movement(int G_size, double ***D, int ***M, int *matrix_size)$/;"	f
Floyd_Warshall_Reallocate_Matrices_For_Scanning	all-pairs-shortest-paths.c	/^int Floyd_Warshall_Reallocate_Matrices_For_Scanning(int G_size, int ***D, int ***M, int *matrix_size)$/;"	f
Floyd_Warshall_Reallocate_Matrix_Of_Type_Double	all-pairs-shortest-paths.c	/^double** Floyd_Warshall_Reallocate_Matrix_Of_Type_Double(double **A, int old_size, int new_size)$/;"	f
Floyd_Warshall_Reallocate_Matrix_Of_Type_Int	all-pairs-shortest-paths.c	/^int** Floyd_Warshall_Reallocate_Matrix_Of_Type_Int(int **A, int old_size, int new_size)$/;"	f
Floyd_Warshall_Show_Predecessor_Table	all-pairs-shortest-paths.c	/^void Floyd_Warshall_Show_Predecessor_Table(int** A, int n)$/;"	f
Floyd_Warshall_Show_Weight_Table	all-pairs-shortest-paths.c	/^void Floyd_Warshall_Show_Weight_Table(double** A, int n)$/;"	f
Floyd_Warshall_Store_Predecessor_Table_Into_File	all-pairs-shortest-paths.c	/^void Floyd_Warshall_Store_Predecessor_Table_Into_File(int** A, int n, char* filename)$/;"	f
Floyd_Warshall_Store_Weight_Table_Into_File	all-pairs-shortest-paths.c	/^void Floyd_Warshall_Store_Weight_Table_Into_File(double** A, int n, char* filename)$/;"	f
Floyd_Warshall_Sum_Matrix_Weights	all-pairs-shortest-paths.c	/^double Floyd_Warshall_Sum_Matrix_Weights(double **W, int matrix_size)$/;"	f
Free_Graph	shortest-path.c	/^void Free_Graph(struct_graph_node *G, int G_size)$/;"	f
Free_Path_List	shortest-path.c	/^void Free_Path_List(struct_path_node *path_list)$/;"	f
Free_Path_Table	shortest-path.c	/^void Free_Path_Table(struct_path_table *table)$/;"	f
Free_Schedule_Table	shortest-path.c	/^void Free_Schedule_Table(struct_schedule_table *table)$/;"	f
Free_Traffic_Table	shortest-path.c	/^void Free_Traffic_Table(struct_traffic_table *table)$/;"	f
G	queue.h	/^	adjacency_list_queue_t G; \/\/adjacency list for graph G$/;"	m	struct:_predicted_encounter_graph_t
G	queue.h	/^    struct_graph_node *G; \/\/forwarding table that is an adjacency list for a road network graph$/;"	m	struct:_forwarding_table_queue_node_t
GAMMA_XMAX	gsl-util.h	20;"	d
GIGA	param.h	19;"	d
GRAPH_FILE_FOR_NODES_2	common.h	328;"	d
GRAPH_FILE_FOR_NODES_2	common.h	460;"	d
GRAPH_FILE_FOR_NODES_20	common.h	337;"	d
GRAPH_FILE_FOR_NODES_20_WITH_MULTIPLE_AP_FOR_DOWNLOAD	common.h	338;"	d
GRAPH_FILE_FOR_NODES_20_WITH_MULTIPLE_AP_FOR_UPLOAD	common.h	339;"	d
GRAPH_FILE_FOR_NODES_3	common.h	329;"	d
GRAPH_FILE_FOR_NODES_3	common.h	461;"	d
GRAPH_FILE_FOR_NODES_36	common.h	341;"	d
GRAPH_FILE_FOR_NODES_36	common.h	464;"	d
GRAPH_FILE_FOR_NODES_36_WITH_MULTIPLE_AP	common.h	465;"	d
GRAPH_FILE_FOR_NODES_36_WITH_MULTIPLE_AP_FOR_DOWNLOAD	common.h	342;"	d
GRAPH_FILE_FOR_NODES_36_WITH_MULTIPLE_AP_FOR_UPLOAD	common.h	343;"	d
GRAPH_FILE_FOR_NODES_4	common.h	333;"	d
GRAPH_FILE_FOR_NODES_4	common.h	462;"	d
GRAPH_FILE_FOR_NODES_49	common.h	345;"	d
GRAPH_FILE_FOR_NODES_49	common.h	466;"	d
GRAPH_FILE_FOR_NODES_49_WITH_MULTIPLE_AP	common.h	467;"	d
GRAPH_FILE_FOR_NODES_49_WITH_MULTIPLE_AP_FOR_DOWNLOAD	common.h	347;"	d
GRAPH_FILE_FOR_NODES_49_WITH_MULTIPLE_AP_FOR_UPLOAD	common.h	352;"	d
GRAPH_FILE_FOR_NODES_5	common.h	334;"	d
GRAPH_FILE_FOR_NODES_9	common.h	335;"	d
GRAPH_FILE_FOR_NODES_9	common.h	463;"	d
GRAPH_FILE_NAME	graph-data-struct.h	23;"	d
GRAPH_NODE_ROLE	graph-data-struct.h	/^} GRAPH_NODE_ROLE;$/;"	t	typeref:enum:_GRAPH_NODE_ROLE
GRAPH_NODE_TYPE	graph-data-struct.h	/^} GRAPH_NODE_TYPE;$/;"	t	typeref:enum:_GRAPH_NODE_TYPE
GSL_DEBUG_OBJECT	Makefile	/^GSL_DEBUG_OBJECT = gsl-util.do$/;"	m
GSL_ERROR_DISPLAY_FLAG	common.h	82;"	d
GSL_INCLUDE	Makefile	/^GSL_INCLUDE= -I ~\/usr\/include$/;"	m
GSL_LIBRARY	Makefile	/^GSL_LIBRARY= -L ~\/usr\/lib$/;"	m
GSL_OBJECT	Makefile	/^GSL_OBJECT = gsl-util.o$/;"	m
GSL_SOURCE	Makefile	/^GSL_SOURCE = gsl-util.c$/;"	m
GSL_TPD_Encounter_Probability_For_Gamma_Distribution	gsl-util.c	/^double GSL_TPD_Encounter_Probability_For_Gamma_Distribution(double mu_y, $/;"	f
GSL_TPD_Function_Integral_For_Gamma_Distribution	gsl-util.c	/^double  GSL_TPD_Function_Integral_For_Gamma_Distribution(tpd_opt_params_t *params, $/;"	f
GSL_TPD_Probability_Function_For_Gamma_Distribution	gsl-util.c	/^double GSL_TPD_Probability_Function_For_Gamma_Distribution(double x, $/;"	f
GSL_Vanet_Compute_TravelTime_And_Deviation	gsl-util.c	/^void GSL_Vanet_Compute_TravelTime_And_Deviation(parameter_t *param, double road_length, double *travel_time, double *travel_time_deviation)$/;"	f
GSL_Vanet_Compute_TravelTime_And_Deviation_By_VehicleActualSpeed	gsl-util.c	/^void GSL_Vanet_Compute_TravelTime_And_Deviation_By_VehicleActualSpeed(parameter_t *param, double road_length, double *travel_time, double *travel_time_deviation, double vehicle_speed, double vehicle_speed_standard_deviation)$/;"	f
GSL_Vanet_Delivery_Probability_For_Gamma_Distribution	gsl-util.c	/^double GSL_Vanet_Delivery_Probability_For_Gamma_Distribution(double mu_p, double sigma_p, double mu_v, double sigma_v, double interval_start, double interval_end)$/;"	f
GSL_Vanet_Delivery_Probability_For_Gaussian_Distribution	gsl-util.c	/^double GSL_Vanet_Delivery_Probability_For_Gaussian_Distribution(double mu_p, double sigma_p, double mu_v, double sigma_v, double interval_start, double interval_end)$/;"	f
GSL_Vanet_Function_Integral_For_Gamma_Distribution	gsl-util.c	/^double  GSL_Vanet_Function_Integral_For_Gamma_Distribution(vanet_opt_params_t *params, double interval_start, double interval_end)$/;"	f
GSL_Vanet_Function_Integral_For_Gamma_Distribution_v2	gsl-util.c	/^double  GSL_Vanet_Function_Integral_For_Gamma_Distribution_v2(vanet_opt_params_t *params, double interval_start, double interval_end)$/;"	f
GSL_Vanet_Function_Integral_For_Gaussian_Distribution	gsl-util.c	/^double  GSL_Vanet_Function_Integral_For_Gaussian_Distribution(vanet_opt_params_t *params, double interval_start, double interval_end)$/;"	f
GSL_Vanet_Probability_Function_For_Gamma_Distribution	gsl-util.c	/^double GSL_Vanet_Probability_Function_For_Gamma_Distribution(double y, void *params)$/;"	f
GSL_Vanet_Probability_Function_For_Gaussian_Distribution	gsl-util.c	/^double GSL_Vanet_Probability_Function_For_Gaussian_Distribution(double y, void *params)$/;"	f
GSL_function_integral	gsl-util.c	/^double GSL_function_integral(struct H_params *params, double interval_start, double interval_end)$/;"	f
GSL_function_integral_for_gamma	gsl-util.c	/^double GSL_function_integral_for_gamma(struct H_params *params, double interval_start, double interval_end)$/;"	f
GSL_function_integral_for_mean	gsl-util.c	/^double GSL_function_integral_for_mean(struct H_params *params, double interval_start, double interval_end)$/;"	f
GSL_function_integral_for_second_moment	gsl-util.c	/^double GSL_function_integral_for_second_moment(struct H_params *params, double interval_start, double interval_end)$/;"	f
GSL_test	gsl-util.c	/^void GSL_test()$/;"	f
GSL_test_for_gamma	gsl-util.c	/^void GSL_test_for_gamma()$/;"	f
G_size	queue.h	/^    int G_size; \/\/graph size that is the number of nodes$/;"	m	struct:_forwarding_table_queue_node_t
Ga	queue.h	/^    struct_graph_node* Ga; \/* augmented graph Ga including the target point as virtual node *\/$/;"	m	struct:_access_point_queue_node_t
Ga_size	queue.h	/^    int Ga_size; \/\/number of nodes in Ga$/;"	m	struct:_access_point_queue_node_t
GetAccessPointByID	queue.c	/^access_point_queue_node_t* GetAccessPointByID(access_point_queue_t *Q, int id)$/;"	f
GetAccessPointByVertex	queue.c	/^access_point_queue_node_t* GetAccessPointByVertex(access_point_queue_t *Q, char *vertex)$/;"	f
GetConditionalForwardingProbabilityQueueNode	queue.c	/^conditional_forwarding_probability_queue_node_t* GetConditionalForwardingProbabilityQueueNode(conditional_forwarding_probability_queue_t *Q, char *tail_node, char *head_node)$/;"	f
GetConvoyClosestToVehicle	queue.c	/^convoy_queue_node_t* GetConvoyClosestToVehicle(parameter_t *param, convoy_queue_t *Q, double vehicle_offset)$/;"	f
GetDestinationVehicleByVID	queue.c	/^destination_vehicle_queue_node_t* GetDestinationVehicleByVID(destination_vehicle_queue_t *Q, int vid)$/;"	f
GetEarliestScanArrivalTimeForSources	schedule.c	/^double GetEarliestScanArrivalTimeForSources(struct_traffic_table *src_table, schedule_table_t *T)$/;"	f
GetEdgeID_MoveType	queue.c	/^int GetEdgeID_MoveType(edge_queue_t *Q, char *u, char *v, MOVE_TYPE *move_type, double *edge_length)$/;"	f
GetEdgeNodeByEID	queue.c	/^edge_queue_node_t* GetEdgeNodeByEID(edge_queue_t *Q, int eid)$/;"	f
GetFirstAccessPoint	queue.c	/^access_point_queue_node_t* GetFirstAccessPoint(access_point_queue_t *Q)$/;"	f
GetFirstDestinationVehicle	queue.c	/^destination_vehicle_queue_node_t* GetFirstDestinationVehicle(destination_vehicle_queue_t *Q)$/;"	f
GetFrontQueueNode	queue.c	/^queue_node_t* GetFrontQueueNode(queue_t *Q)$/;"	f
GetGlobalPacketPointerByID	queue.c	/^global_packet_queue_node_t* GetGlobalPacketPointerByID(global_packet_queue_t *Q, int id)$/;"	f
GetHoleEndpointsWithHoleSegment	queue.c	/^int GetHoleEndpointsWithHoleSegment(hole_endpoint_queue_t *H, int eid, hole_endpoint_queue_node_t **left_hole_endpoint, hole_endpoint_queue_node_t **right_hole_endpoint)$/;"	f
GetMovementTimeOnPhysicalShortestPath	schedule.c	/^double GetMovementTimeOnPhysicalShortestPath(parameter_t *param, double **D_move, int protection_node, int entrance_node)$/;"	f
GetMultipleTargetPoints_By_PacketTrajectory_For_AP	shortest-path.c	/^int GetMultipleTargetPoints_By_PacketTrajectory_For_AP(parameter_t *param, double current_time, char *AP_vertex, struct_vehicle_t *destination_vehicle, packet_queue_node_t *packet, forwarding_table_queue_t *FTQ, target_point_queue_t *global_TPQ)$/;"	f
GetMultipleTargetPoints_By_RandomIntersection_For_AP	shortest-path.c	/^int GetMultipleTargetPoints_By_RandomIntersection_For_AP(parameter_t *param, double current_time, char *AP_vertex, struct_vehicle_t *destination_vehicle, packet_queue_node_t *packet, forwarding_table_queue_t *FTQ, target_point_queue_t *TPQ)$/;"	f
GetMultipleTargetPoints_For_AP	shortest-path.c	/^int GetMultipleTargetPoints_For_AP(parameter_t *param, double current_time, char *AP_vertex, struct_vehicle_t *destination_vehicle, packet_queue_node_t *packet, forwarding_table_queue_t *FTQ, target_point_queue_t *TPQ)$/;"	f
GetNeighborGraphNode	shortest-path.c	/^struct_graph_node* GetNeighborGraphNode(struct_graph_node *G, int G_size, char *u, char *v)$/;"	f
GetPhysicalOffset	shortest-path.c	/^double GetPhysicalOffset(char *node, struct_graph_node *G, int G_size)$/;"	f
GetPhysicalOffsetOnSubedgeFromSubedgeList	queue.c	/^double GetPhysicalOffsetOnSubedgeFromSubedgeList(subedge_queue_t *Q, subedge_queue_node_t *pSubedgeNode, double virtual_offset)$/;"	f
GetQueueNode	queue.c	/^queue_node_t* GetQueueNode(queue_t *Q, int index)$/;"	f
GetRearQueueNode	queue.c	/^queue_node_t* GetRearQueueNode(queue_t *Q)$/;"	f
GetScanningTimeOnScanSignalShortestPath	schedule.c	/^double GetScanningTimeOnScanSignalShortestPath(parameter_t *param, double **D_move, int **D_scan, int protection_node, int entrance_node)$/;"	f
GetSensorNumberForShortestPath	shortest-path.c	/^int GetSensorNumberForShortestPath(char *src, char *dst, struct_graph_node *G, int n, int **M)$/;"	f
GetSensorQueueNodeFromLocationQueue	schedule.c	/^sensor_queue_node_t* GetSensorQueueNodeFromLocationQueue(location_queue_t *Q, int index, struct_sensor_table *S)$/;"	f
GetSensorQueueNodeJustAfterVirtualOffset	queue.c	/^sensor_queue_node_t* GetSensorQueueNodeJustAfterVirtualOffset(sensor_queue_t *Q, double offset)$/;"	f
GetSensorQueueNodeJustBeforeVirtualOffset	queue.c	/^sensor_queue_node_t* GetSensorQueueNodeJustBeforeVirtualOffset(sensor_queue_t *Q, double offset)$/;"	f
GetSubedgeNodeByEID	queue.c	/^subedge_queue_node_t* GetSubedgeNodeByEID(subedge_queue_t *Q, int eid)$/;"	f
GetTableNodeByEID	schedule.c	/^schedule_table_node_t* GetTableNodeByEID(schedule_table_t *T, int eid)$/;"	f
GetTableNodeFromSubedgeList	schedule.c	/^schedule_table_node_t* GetTableNodeFromSubedgeList(subedge_queue_t *Q, hole_segment_queue_node_t *pHoleSegmentNode, double *left_hole_offset_in_Gv, double *right_hole_offset_in_Gv)$/;"	f
GetTargetPoint_By_ClosestIntersection_For_Carrier	shortest-path.c	/^int GetTargetPoint_By_ClosestIntersection_For_Carrier(parameter_t *param, double current_time, struct_vehicle_t *carrier_vehicle, forwarding_table_queue_t *FTQ, double *EDD_p_for_optimal_target_point, double *EAD_p_for_optimal_target_point)$/;"	f
GetTargetPoint_By_EndIntersection_For_AP	shortest-path.c	/^int GetTargetPoint_By_EndIntersection_For_AP(parameter_t *param, double current_time, char *AP_vertex, struct_vehicle_t *destination_vehicle, packet_queue_node_t *packet, forwarding_table_queue_t *FTQ, double *EDD_p_for_optimal_target_point, double *EAD_p_for_optimal_target_point)$/;"	f
GetTargetPoint_By_EndIntersection_For_Multiple_APs	shortest-path.c	/^int GetTargetPoint_By_EndIntersection_For_Multiple_APs(parameter_t *param, double current_time, access_point_queue_t *APQ, struct_vehicle_t *destination_vehicle, packet_queue_node_t *packet, forwarding_table_queue_t *FTQ, double *EDD_p_for_optimal_target_point, double *EAD_p_for_optimal_target_point, access_point_queue_node_t **transmitter_AP_qnode)$/;"	f
GetTargetPoint_By_HeadingIntersection_For_AP	shortest-path.c	/^int GetTargetPoint_By_HeadingIntersection_For_AP(parameter_t *param, double current_time, char *AP_vertex, struct_vehicle_t *destination_vehicle, forwarding_table_queue_t *FTQ, double *EDD_p_for_optimal_target_point, double *EAD_p_for_optimal_target_point)$/;"	f
GetTargetPoint_By_HeadingIntersection_For_Carrier	shortest-path.c	/^int GetTargetPoint_By_HeadingIntersection_For_Carrier(parameter_t *param, double current_time, struct_vehicle_t *carrier_vehicle, forwarding_table_queue_t *FTQ, double *EDD_p_for_optimal_target_point, double *EAD_p_for_optimal_target_point)$/;"	f
GetTargetPoint_By_HeadingIntersection_For_Carrier_At_TrajectoryIntersection_Before_DestinationVehicle	shortest-path.c	/^int GetTargetPoint_By_HeadingIntersection_For_Carrier_At_TrajectoryIntersection_Before_DestinationVehicle(parameter_t *param, double current_time, struct_vehicle_t *carrier_vehicle, forwarding_table_queue_t *FTQ, vehicle_trajectory_queue_t *pTrajectory_Queue, vehicle_trajectory_queue_node_t *pCurrent_Trajectory_QNode, int destination_vehicle_hop, double destination_vehicle_offset, int vertex_hop, double *EDD_p_for_optimal_target_point, double *EAD_p_for_optimal_target_point)$/;"	f
GetTargetPoint_By_OptimalIntersection_For_AP	shortest-path.c	/^int GetTargetPoint_By_OptimalIntersection_For_AP(parameter_t *param, double current_time, char *AP_vertex, struct_vehicle_t *destination_vehicle, forwarding_table_queue_t *FTQ, double *EDD_p_for_optimal_target_point, double *EAD_p_for_optimal_target_point)$/;"	f
GetTargetPoint_By_OptimalIntersection_For_Carrier	shortest-path.c	/^int GetTargetPoint_By_OptimalIntersection_For_Carrier(parameter_t *param, double current_time, struct_vehicle_t *carrier_vehicle, forwarding_table_queue_t *FTQ, double *EDD_p_for_optimal_target_point, double *EAD_p_for_optimal_target_point)$/;"	f
GetTargetPoint_By_OptimalIntersection_For_Carrier_At_TrajectoryIntersection_Before_DestinationVehicle	shortest-path.c	/^int GetTargetPoint_By_OptimalIntersection_For_Carrier_At_TrajectoryIntersection_Before_DestinationVehicle(parameter_t *param, double current_time, struct_vehicle_t *carrier_vehicle, forwarding_table_queue_t *FTQ, vehicle_trajectory_queue_t *pTrajectory_Queue, vehicle_trajectory_queue_node_t *pCurrent_Trajectory_QNode, int destination_vehicle_hop, double destination_vehicle_offset, int vertex_hop, double *EDD_p_for_optimal_target_point, double *EAD_p_for_optimal_target_point)$/;"	f
GetTargetPoint_By_PacketEarliestArrivingIntersection_For_AP	shortest-path.c	/^int GetTargetPoint_By_PacketEarliestArrivingIntersection_For_AP(parameter_t *param, double current_time, char *AP_vertex, struct_vehicle_t *destination_vehicle, forwarding_table_queue_t *FTQ, double *EDD_p_for_optimal_target_point, double *EAD_p_for_optimal_target_point)$/;"	f
GetTargetPoint_By_PacketEarliestArrivingIntersection_For_Carrier	shortest-path.c	/^int GetTargetPoint_By_PacketEarliestArrivingIntersection_For_Carrier(parameter_t *param, double current_time, struct_vehicle_t *carrier_vehicle, forwarding_table_queue_t *FTQ, double *EDD_p_for_optimal_target_point, double *EAD_p_for_optimal_target_point)$/;"	f
GetTargetPoint_By_PacketTrajectory_For_AP	shortest-path.c	/^int GetTargetPoint_By_PacketTrajectory_For_AP(parameter_t *param, double current_time, char *AP_vertex, struct_vehicle_t *destination_vehicle, packet_queue_node_t *packet, forwarding_table_queue_t *FTQ, double *EDD_p_for_optimal_target_point, double *EAD_p_for_optimal_target_point)$/;"	f
GetTargetPoint_By_PacketTrajectory_For_Carrier	shortest-path.c	/^int GetTargetPoint_By_PacketTrajectory_For_Carrier(parameter_t *param, double current_time, struct_vehicle_t *carrier_vehicle, forwarding_table_queue_t *FTQ, double *EDD_p_for_optimal_target_point, double *EAD_p_for_optimal_target_point)$/;"	f
GetTargetPoint_By_PacketTrajectory_For_Multiple_APs	shortest-path.c	/^int GetTargetPoint_By_PacketTrajectory_For_Multiple_APs(parameter_t *param, double current_time, access_point_queue_t *APQ, struct_vehicle_t *destination_vehicle, packet_queue_node_t *packet, forwarding_table_queue_t *FTQ, double *EDD_p_for_optimal_target_point, double *EAD_p_for_optimal_target_point, access_point_queue_node_t **transmitter_AP_qnode)$/;"	f
GetTargetPoint_By_RandomIntersection_For_AP	shortest-path.c	/^int GetTargetPoint_By_RandomIntersection_For_AP(parameter_t *param, double current_time, char *AP_vertex, struct_vehicle_t *destination_vehicle, packet_queue_node_t *packet, forwarding_table_queue_t *FTQ, double *EDD_p_for_optimal_target_point, double *EAD_p_for_optimal_target_point)$/;"	f
GetTargetPoint_By_RandomIntersection_For_Carrier	shortest-path.c	/^int GetTargetPoint_By_RandomIntersection_For_Carrier(parameter_t *param, double current_time, struct_vehicle_t *carrier_vehicle, forwarding_table_queue_t *FTQ, double *EDD_p_for_optimal_target_point, double *EAD_p_for_optimal_target_point)$/;"	f
GetTargetPoint_By_RandomIntersection_For_Carrier_At_TrajectoryIntersection_Before_DestinationVehicle	shortest-path.c	/^int GetTargetPoint_By_RandomIntersection_For_Carrier_At_TrajectoryIntersection_Before_DestinationVehicle(parameter_t *param, double current_time, struct_vehicle_t *carrier_vehicle, forwarding_table_queue_t *FTQ, vehicle_trajectory_queue_t *pTrajectory_Queue, vehicle_trajectory_queue_node_t *pCurrent_Trajectory_QNode, int destination_vehicle_hop, double destination_vehicle_offset, int vertex_hop, double *EDD_p_for_optimal_target_point, double *EAD_p_for_optimal_target_point)$/;"	f
GetTargetPoint_By_RandomIntersection_For_Multiple_APs	shortest-path.c	/^int GetTargetPoint_By_RandomIntersection_For_Multiple_APs(parameter_t *param, double current_time, access_point_queue_t *APQ, struct_vehicle_t *destination_vehicle, packet_queue_node_t *packet, forwarding_table_queue_t *FTQ, double *EDD_p_for_optimal_target_point, double *EAD_p_for_optimal_target_point, access_point_queue_node_t **transmitter_AP_qnode)$/;"	f
GetTargetPoint_For_AP	shortest-path.c	/^int GetTargetPoint_For_AP(parameter_t *param, double current_time, char *AP_vertex, struct_vehicle_t *destination_vehicle, packet_queue_node_t *packet, forwarding_table_queue_t *FTQ, double *EDD_p, double *EAD_p)$/;"	f
GetTargetPoint_For_AP_For_V2V_Data_Delivery	shortest-path.c	/^int GetTargetPoint_For_AP_For_V2V_Data_Delivery(parameter_t *param, double current_time, char *AP_vertex, struct_vehicle_t *destination_vehicle, forwarding_table_queue_t *FTQ, int Gr_set_number, struct_graph_node **Gr_set, int *Gr_set_size, double *EDD_p_for_optimal_target_point, double *EAD_p_for_optimal_target_point)$/;"	f
GetTargetPoint_For_Carrier	shortest-path.c	/^int GetTargetPoint_For_Carrier(parameter_t *param, double current_time, struct_vehicle_t *carrier_vehicle, forwarding_table_queue_t *FTQ, double *EDD_p, double *EAD_p)$/;"	f
GetTargetPoint_For_Carrier_At_TrajectoryIntersection_Before_DestinationVehicle	shortest-path.c	/^int GetTargetPoint_For_Carrier_At_TrajectoryIntersection_Before_DestinationVehicle(parameter_t *param, double current_time, struct_vehicle_t *carrier_vehicle, forwarding_table_queue_t *FTQ, vehicle_trajectory_queue_t *pTrajectory_Queue, vehicle_trajectory_queue_node_t *pCurrent_Trajectory_QNode, int destination_vehicle_hop, double destination_vehicle_offset, int vertex_hop, double *EDD_p, double *EAD_p)$/;"	f
GetTargetPoint_For_Multiple_APs	shortest-path.c	/^int GetTargetPoint_For_Multiple_APs(parameter_t *param, double current_time, access_point_queue_t *APQ, struct_vehicle_t *destination_vehicle, packet_queue_node_t *packet, forwarding_table_queue_t *FTQ, double *EDD_p, double *EAD_p, access_point_queue_node_t **transmitter_AP_qnode)$/;"	f
GetTargetPoint_For_Packet	shortest-path.c	/^int GetTargetPoint_For_Packet(parameter_t *param, double current_time, packet_queue_node_t *packet, int current_intersection_id, double *EDD_p_for_optimal_target_point, double *EAD_p_for_optimal_target_point)$/;"	f
GetTargetPoint_For_StationaryNode	shortest-path.c	/^int GetTargetPoint_For_StationaryNode(parameter_t *param, double current_time, stationary_node_queue_node_t *stationary_node, double *EDD_p_for_optimal_target_point, double *EAD_p_for_optimal_target_point)$/;"	f
GetTrafficTableEntry_ID_With_Index	shortest-path.c	/^int GetTrafficTableEntry_ID_With_Index(struct_traffic_table *table, int index)$/;"	f
GetUnusedGraphNode	shortest-path.c	/^struct_graph_node* GetUnusedGraphNode(struct_graph_node **Gv, int *Gv_size)$/;"	f
Get_Heap_Node	shortest-path.c	/^struct_shortest_path_node* Get_Heap_Node(char *vertex, struct_shortest_path_node *Q, int Q_size, int *Q_index)$/;"	f
Get_Minimum_EDD_GraphNode	shortest-path.c	/^struct_graph_node* Get_Minimum_EDD_GraphNode(char *tail_vertex, char *head_vertex, struct_graph_node **G_set, int *G_set_size, int ap_number)$/;"	f
Gr	param.h	/^    struct_graph_node *Gr; \/\/pointer to road network graph Gr$/;"	m	struct:_vanet_information_table_t
Gr	queue.h	/^    struct_graph_node* Gr; \/* road network graph Gr: this is only the pointer to Gr in order to access Gr, that is, this is not a copy of Gr. Thus, we need not allocate and deallocate Gr for this AP *\/$/;"	m	struct:_access_point_queue_node_t
Gr_size	param.h	/^    int Gr_size; \/\/size of graph Gr in terms of the number of vertices$/;"	m	struct:_vanet_information_table_t
Gr_size	queue.h	/^    int Gr_size; \/\/number of nodes in Gr$/;"	m	struct:_access_point_queue_node_t
H	gsl-util.c	/^double H(double y, void *params)$/;"	f
HOLE_GRAPH_NODE	graph-data-struct.h	/^        HOLE_GRAPH_NODE = 5,            \/* sensing hole node at road graph *\/$/;"	e	enum:_GRAPH_NODE_TYPE
HOLE_HANDLING_ALL_ENTRANCE_POINTS	param.h	/^  HOLE_HANDLING_ALL_ENTRANCE_POINTS = 6,                          \/\/all of the holes are labeled as entrance points$/;"	e	enum:_hole_handling_algorithm_t
HOLE_HANDLING_ALL_PROTECTION_POINTS	param.h	/^  HOLE_HANDLING_ALL_PROTECTION_POINTS = 7                         \/\/all of the holes are labeled as protection points$/;"	e	enum:_hole_handling_algorithm_t
HOLE_HANDLING_EXHAUSTIVE_SEARCH_ALGORITHM	param.h	/^  HOLE_HANDLING_EXHAUSTIVE_SEARCH_ALGORITHM = 1,                  \/\/exhaustive search algorithm$/;"	e	enum:_hole_handling_algorithm_t
HOLE_HANDLING_GREEDY_ALGORITHM_BASED_HEURISTICS	param.h	/^  HOLE_HANDLING_GREEDY_ALGORITHM_BASED_HEURISTICS = 2,            \/\/greedy algorithm based on heuristics$/;"	e	enum:_hole_handling_algorithm_t
HOLE_HANDLING_GREEDY_ALGORITHM_BASED_MINIMAL_SPANNING_TREE	param.h	/^  HOLE_HANDLING_GREEDY_ALGORITHM_BASED_MINIMAL_SPANNING_TREE = 3, \/\/greedy algorithm based on minimal spanning tree$/;"	e	enum:_hole_handling_algorithm_t
HOLE_HANDLING_NO_HANDLING	param.h	/^  HOLE_HANDLING_NO_HANDLING = 5,                                  \/\/no handling$/;"	e	enum:_hole_handling_algorithm_t
HOLE_HANDLING_RANDOM_LABELING	param.h	/^  HOLE_HANDLING_RANDOM_LABELING = 4,                              \/\/all of the holes are randomly labeled as either entrance point or protection point$/;"	e	enum:_hole_handling_algorithm_t
HOLE_HANDLING_UNKNOWN	param.h	/^{ HOLE_HANDLING_UNKNOWN = 0,$/;"	e	enum:_hole_handling_algorithm_t
HOLE_MODE_INCREMENTAL_LABELING	param.h	/^  HOLE_MODE_INCREMENTAL_LABELING = 2$/;"	e	enum:_hole_handling_mode_t
HOLE_MODE_RESHUFFLE_LABELING	param.h	/^  HOLE_MODE_RESHUFFLE_LABELING = 1,$/;"	e	enum:_hole_handling_mode_t
HOLE_MODE_UNKNOWN	param.h	/^{ HOLE_MODE_UNKNOWN = 0,$/;"	e	enum:_hole_handling_mode_t
HYPERX	param.h	/^  HYPERX = 6      \/\/2-stage hyperexponential distribution$/;"	e	enum:_distribution_type_t
H_for_gamma	gsl-util.c	/^double H_for_gamma(double y, void *params)$/;"	f
H_for_mean	gsl-util.c	/^double H_for_mean(double y, void *params)$/;"	f
H_for_second_moment	gsl-util.c	/^double H_for_second_moment(double y, void *params)$/;"	f
H_params	gsl-util.h	/^struct H_params $/;"	s
HandleInitialSensingHoles	schedule.c	/^void HandleInitialSensingHoles(edge_queue_t *Er, parameter_t *param, struct_graph_node **Gv, int *Gv_size, schedule_table_t *T, struct_sensor_table *S, double ***Dv_move, int ***Mv_move, int *matrix_size_for_movement_in_Gv, int ***Dv_scan, int ***Mv_scan, int *matrix_size_for_scanning_in_Gv, struct_traffic_table *src_table_for_Gr, struct_traffic_table *dst_table_for_Gr, struct_traffic_table *src_table_for_Gv, struct_traffic_table *dst_table_for_Gv, struct_traffic_table *hole_table_for_Gv, double *movement_time_for_sleeping, double *scanning_time_for_sleeping, double *sleeping_time)$/;"	f
HandleSensingHoles_With_AllEntrancePointsAlgorithm	schedule.c	/^void HandleSensingHoles_With_AllEntrancePointsAlgorithm(parameter_t *param, struct_graph_node *Gv, int Gv_size, schedule_table_t *T, struct_sensor_table *S, double **Dv_move, int **Mv_move, int **Dv_scan, int **Mv_scan, struct_traffic_table *src_table_for_Gv, struct_traffic_table *dst_table_for_Gv, struct_traffic_table *src_or_dst_table_for_Gv, double *movement_time_for_sleeping, double *scanning_time_for_sleeping, double *sleeping_time)$/;"	f
HandleSensingHoles_With_AllProtectionPointsAlgorithm	schedule.c	/^void HandleSensingHoles_With_AllProtectionPointsAlgorithm(parameter_t *param, struct_graph_node *Gv, int Gv_size, schedule_table_t *T, struct_sensor_table *S, double **Dv_move, int **Mv_move, int **Dv_scan, int **Mv_scan, struct_traffic_table *src_table_for_Gv, struct_traffic_table *dst_table_for_Gv, struct_traffic_table *src_or_dst_table_for_Gv, double *movement_time_for_sleeping, double *scanning_time_for_sleeping, double *sleeping_time)$/;"	f
HandleSensingHoles_With_ExhaustiveSearchAlgorithm	schedule.c	/^void HandleSensingHoles_With_ExhaustiveSearchAlgorithm(parameter_t *param, struct_graph_node *Gv, int Gv_size, schedule_table_t *T, struct_sensor_table *S, double **Dv_move, int **Mv_move, int **Dv_scan, int **Mv_scan, struct_traffic_table *src_table_for_Gv, struct_traffic_table *dst_table_for_Gv, struct_traffic_table *src_or_dst_table_for_Gv, double *movement_time_for_sleeping, double *scanning_time_for_sleeping, double *sleeping_time)$/;"	f
HandleSensingHoles_With_MinimalSpanningTreeAlgorithm	schedule.c	/^void HandleSensingHoles_With_MinimalSpanningTreeAlgorithm(parameter_t *param, struct_graph_node *Gv, int Gv_size, schedule_table_t *T, struct_sensor_table *S, double **Dv_move, int **Mv_move, int **Dv_scan, int **Mv_scan, struct_traffic_table *src_table_for_Gv, struct_traffic_table *dst_table_for_Gv, struct_traffic_table *src_or_dst_table_for_Gv, double *movement_time_for_sleeping, double *scanning_time_for_sleeping, double *sleeping_time)$/;"	f
HandleSensingHoles_With_RandomLabelingAlgorithm	schedule.c	/^void HandleSensingHoles_With_RandomLabelingAlgorithm(parameter_t *param, struct_graph_node *Gv, int Gv_size, schedule_table_t *T, struct_sensor_table *S, double **Dv_move, int **Mv_move, int **Dv_scan, int **Mv_scan, struct_traffic_table *src_table_for_Gv, struct_traffic_table *dst_table_for_Gv, struct_traffic_table *src_or_dst_table_for_Gv, double *movement_time_for_sleeping, double *scanning_time_for_sleeping, double *sleeping_time)$/;"	f
Has_Packet_Arrived_Earlier_At_TargetPoint_Than_Destination_Vehicle_With_New_Destination	shortest-path.c	/^boolean Has_Packet_Arrived_Earlier_At_TargetPoint_Than_Destination_Vehicle_With_New_Destination(parameter_t *param, double current_time, packet_queue_node_t *packet, int *new_dst)$/;"	f
Has_Packet_Arrived_Earlier_At_TargetPoint_Than_Destination_Vehicle_With_New_Destination_VERSION_1	shortest-path.c	/^boolean Has_Packet_Arrived_Earlier_At_TargetPoint_Than_Destination_Vehicle_With_New_Destination_VERSION_1(parameter_t *param, double current_time, packet_queue_node_t *packet, int *new_dst)$/;"	f
Has_Packet_Arrived_Earlier_At_TargetPoint_Than_Destination_Vehicle_With_New_Destination_VERSION_2	shortest-path.c	/^boolean Has_Packet_Arrived_Earlier_At_TargetPoint_Than_Destination_Vehicle_With_New_Destination_VERSION_2(parameter_t *param, double current_time, packet_queue_node_t *packet, int *new_dst)$/;"	f
Heap_Decrease_Key	heap.c	/^void Heap_Decrease_Key(struct_shortest_path_node *Q, int Q_size, int i, double key)$/;"	f
Heap_Extract_Min	heap.c	/^struct_shortest_path_node* Heap_Extract_Min(struct_shortest_path_node *Q, int Q_size)$/;"	f
Heap_Minimum	heap.c	/^struct_shortest_path_node* Heap_Minimum(struct_shortest_path_node *Q)$/;"	f
INCH	common.h	297;"	d
INCOMING_EDGE	graph-data-struct.h	/^        INCOMING_EDGE = 1 \/\/incoming edge for a vertex$/;"	e	enum:_directional_edge_type_t
INF	graph-data-struct.h	17;"	d
INF_FACTOR	param.h	24;"	d
INITIAL_PACKET_VECTOR_SIZE	queue.h	692;"	d
INITIAL_SENSING_HOLE_FILE	common.h	410;"	d
INITIAL_SENSING_HOLE_FILE	common.h	519;"	d
INITIAL_VIRTUAL_GRAPH_FILE	common.h	416;"	d
INITIAL_VIRTUAL_GRAPH_FILE	common.h	525;"	d
INTERSECTION_AREA_BOTH_NODES	common.h	/^  INTERSECTION_AREA_BOTH_NODES = 3, \/* intersection area for both the tail and head nodes of the directional edge where the vehicle is moving *\/$/;"	e	enum:_intersection_area_type_t
INTERSECTION_AREA_HEAD_NODE	common.h	/^  INTERSECTION_AREA_HEAD_NODE = 2,  \/* intersection area for the head node of the directional edge where the vehicle is moving *\/$/;"	e	enum:_intersection_area_type_t
INTERSECTION_AREA_NONE	common.h	/^  INTERSECTION_AREA_NONE = 4 \/* not in the intersection area, that is, in the road segment far away from the communication for the two intersections*\/$/;"	e	enum:_intersection_area_type_t
INTERSECTION_AREA_TAIL_NODE	common.h	/^  INTERSECTION_AREA_TAIL_NODE = 1,  \/* intersection area for the tail node of the directional edge where the vehicle is moving *\/$/;"	e	enum:_intersection_area_type_t
INTERSECTION_AREA_UNKNOWN	common.h	/^  INTERSECTION_AREA_UNKNOWN = 0, $/;"	e	enum:_intersection_area_type_t
INTERSECTION_COUNT	main.c	45;"	d	file:
INTERSECTION_GRAPH_NODE	graph-data-struct.h	/^	INTERSECTION_GRAPH_NODE = 1,    \/* intersection node at road graph *\/$/;"	e	enum:_GRAPH_NODE_TYPE
INTERSECTION_NODE	common.h	/^	INTERSECTION_NODE = 1,   \/* intersection node: sensor placed at intersection on road *\/$/;"	e	enum:_SENSOR_TYPE
ITERATION	param.h	/^  ITERATION = 1$/;"	e	enum:_simulation_mode_type_t
In	rand.c	/^static long In[16]= {0L,   \/* seeds for streams 1 thru 15  *\/$/;"	v	file:
InitForwardingTableQueue	queue.c	/^void InitForwardingTableQueue(forwarding_table_queue_t *FTQ, parameter_t *param, struct_graph_node* Gr, int Gr_size)$/;"	f
InitGlobalPacketQueue_With_VanetInformationTable	queue.c	/^void InitGlobalPacketQueue_With_VanetInformationTable(global_packet_queue_t *GPQ, parameter_t *param)$/;"	f
InitQueue	queue.c	/^void InitQueue(queue_t *Q, queue_type_t queue_type)$/;"	f
InitStationaryNodeQueue	queue.c	/^void InitStationaryNodeQueue(stationary_node_queue_t *SNQ, struct_graph_node *Gr, int Gr_size)$/;"	f
InitTable	schedule.c	/^void InitTable(schedule_table_t *T, struct_graph_node *Gv, int Gv_size, struct_graph_node *Gr, edge_queue_t *Er)$/;"	f
InitTrafficTable	shortest-path.c	/^void InitTrafficTable(struct_traffic_table* table)$/;"	f
Init_RoadNetworkGraphNode_StationaryNodeFlag_With_StationaryNodeList	shortest-path.c	/^void Init_RoadNetworkGraphNode_StationaryNodeFlag_With_StationaryNodeList(parameter_t *param, struct_graph_node *Gr, int Gr_size, struct_traffic_table *sn_table_for_Gr)$/;"	f
Initialize_GlobalPacketQueue_PacketVectors	queue.c	/^void Initialize_GlobalPacketQueue_PacketVectors(parameter_t *param, global_packet_queue_t* Q, int vector_size)$/;"	f
Initialize_Graph	shortest-path.c	/^struct_graph_node* Initialize_Graph(parameter_t *param, char *graph_file_name, int *G_size, struct_traffic_table *src_table, struct_traffic_table *dst_table, struct_traffic_table *ap_table, struct_traffic_table *sn_table, double *max_weight)$/;"	f
Initialize_MIN_Priority_Queue	shortest-path.c	/^struct_shortest_path_node* Initialize_MIN_Priority_Queue(struct_graph_node *G, int G_size, char *src)$/;"	f
Initialize_Path_Table	shortest-path.c	/^void Initialize_Path_Table(struct_graph_node *G, int G_size, struct_traffic_table *src_table, struct_path_table *path_table)$/;"	f
Initialize_Schedule_Table	shortest-path.c	/^void Initialize_Schedule_Table(struct_traffic_table *src_table, struct_schedule_table *sched_table) $/;"	f
InsertSubedgeAfterEID	queue.c	/^subedge_queue_node_t* InsertSubedgeAfterEID(subedge_queue_t *Q, int eid, subedge_queue_node_t *node)$/;"	f
InsertSubedgeAfterEID_With_TableEntryUpdate	queue.c	/^subedge_queue_node_t* InsertSubedgeAfterEID_With_TableEntryUpdate(subedge_queue_t *Q, int eid, subedge_queue_node_t *node)$/;"	f
Insert_DirectionalEdge_Into_DirectionalEdgeQueue	queue.c	/^directional_edge_queue_node_t* Insert_DirectionalEdge_Into_DirectionalEdgeQueue(directional_edge_queue_t *Q, struct_graph_node *G, int G_size, char *tail_node, char *head_node, double weight)$/;"	f
Insert_Edge_Into_EdgeQueue	queue.c	/^edge_queue_node_t* Insert_Edge_Into_EdgeQueue(edge_queue_t *Q, struct_graph_node *G, int G_size, char *tail_node, char *head_node, double weight)$/;"	f
Install_FullPacketTrajectory_Into_Packet	queue.c	/^boolean Install_FullPacketTrajectory_Into_Packet(parameter_t *param, double current_time, struct_graph_node *G, int G_size, char *packet_src_vertex, char *packet_dst_vertex, packet_queue_node_t *packet)$/;"	f
Install_PacketTrajectory_Into_Packet	queue.c	/^boolean Install_PacketTrajectory_Into_Packet(parameter_t *param, double current_time, struct_graph_node *G, int G_size, char *packet_src_vertex, char *packet_dst_vertex, packet_queue_node_t *packet)$/;"	f
Install_PacketTrajectory_Into_Packet_With_Edge	queue.c	/^boolean Install_PacketTrajectory_Into_Packet_With_Edge(parameter_t *param, double current_time, struct_graph_node *G, int G_size, char *tail_node, char *head_node, packet_queue_node_t *packet)$/;"	f
Install_PartialPacketTrajectory_Into_Packet	queue.c	/^boolean Install_PartialPacketTrajectory_Into_Packet(parameter_t *param, double current_time, struct_graph_node *G, int G_size, char *packet_src_vertex, char *packet_dst_vertex, packet_queue_node_t *packet)$/;"	f
Install_StaticPacketTrajectory_Into_Packet	queue.c	/^boolean Install_StaticPacketTrajectory_Into_Packet(parameter_t *param, double current_time, struct_graph_node *G, int G_size, int static_packet_trajectory[], int static_packet_trajectory_size, packet_queue_node_t *packet)$/;"	f
Install_VehicleTrajectory_Into_Packet	queue.c	/^void Install_VehicleTrajectory_Into_Packet(parameter_t *param, double current_time, struct_graph_node *G, int G_size, struct_vehicle_t *vehicle, packet_queue_node_t *packet)$/;"	f
IsEndOfTravel	shortest-path.c	/^boolean IsEndOfTravel(struct_path_node *path_list, struct_path_node *path_ptr)$/;"	f
IsExpandable	schedule.c	/^boolean IsExpandable(struct_graph_node *G, schedule_queue_node_t *node)$/;"	f
IsNeighbor	shortest-path.c	/^boolean IsNeighbor(int X, int Y, struct_graph_node *G, int G_size)$/;"	f
IsPacketCopy_In_PacketQueue	queue.c	/^boolean IsPacketCopy_In_PacketQueue(packet_queue_t *Q, packet_queue_node_t *pPacketNode)$/;"	f
IsProtectionPoint	shortest-path.c	/^boolean IsProtectionPoint(char *path_vertex, struct_traffic_table *protection_set)$/;"	f
IsVertexInTrafficTable	shortest-path.c	/^boolean IsVertexInTrafficTable(struct_traffic_table *table, char *node)$/;"	f
Is_Destination_Vehicle	queue.c	/^boolean Is_Destination_Vehicle(destination_vehicle_queue_t *Q, int vid)$/;"	f
Is_There_NextHop_In_PacketReverseTraversal	shortest-path.c	/^boolean Is_There_NextHop_In_PacketReverseTraversal(packet_queue_node_t *packet, int current_intersection_id, int *new_dst)$/;"	f
Is_Vertex_On_VehicleTrajectory_With_New_Destination	shortest-path.c	/^boolean Is_Vertex_On_VehicleTrajectory_With_New_Destination(parameter_t *param, double current_time, packet_queue_node_t *packet, int vertex, int *new_dst, boolean *packet_earlier_arrival_flag)$/;"	f
Is_Vertex_On_VehicleTrajectory_With_New_Destination_VERSION_1	shortest-path.c	/^boolean Is_Vertex_On_VehicleTrajectory_With_New_Destination_VERSION_1(parameter_t *param, double current_time, packet_queue_node_t *packet, int vertex, int *new_dst, boolean *packet_earlier_arrival_flag)$/;"	f
Is_Vertex_On_VehicleTrajectory_With_New_Destination_VERSION_2	shortest-path.c	/^boolean Is_Vertex_On_VehicleTrajectory_With_New_Destination_VERSION_2(parameter_t *param, double current_time, packet_queue_node_t *packet, int vertex, int *new_dst, boolean *packet_earlier_arrival_flag)$/;"	f
KILO	param.h	17;"	d
LA_Allocate_Matrix_Of_Type_Double	linear-algebra.c	/^double** LA_Allocate_Matrix_Of_Type_Double(int row_size, int column_size)$/;"	f
LA_ERROR_TOLERANCE_FOR_REAL_ARITHMETIC	linear-algebra.h	14;"	d
LA_Free_Matrix_Of_Type_Double	linear-algebra.c	/^void LA_Free_Matrix_Of_Type_Double(double **A, int row_size)$/;"	f
LA_Log_LinearSystem_And_Solution	linear-algebra.c	/^void LA_Log_LinearSystem_And_Solution(char *filename, double **A, int row_size,  double *x)$/;"	f
LA_Perform_Backward_Substitution	linear-algebra.c	/^void LA_Perform_Backward_Substitution(double **A, int row_size, int *p, double *x)$/;"	f
LA_Perform_Gaussian_Elimination_For_Nonsingular_Case	linear-algebra.c	/^void LA_Perform_Gaussian_Elimination_For_Nonsingular_Case(double **A, int row_size, int column_size, int *p)$/;"	f
LA_Reset_Matrix_Of_Type_Double	linear-algebra.c	/^void LA_Reset_Matrix_Of_Type_Double(double **A, int row_size, int column_size)$/;"	f
LA_Test_Gaussian_Elimination_1	linear-algebra.c	/^void LA_Test_Gaussian_Elimination_1()$/;"	f
LA_Test_Gaussian_Elimination_2	linear-algebra.c	/^void LA_Test_Gaussian_Elimination_2()$/;"	f
LA_Test_Gaussian_Elimination_3	linear-algebra.c	/^void LA_Test_Gaussian_Elimination_3()$/;"	f
LA_Test_Gaussian_Elimination_4	linear-algebra.c	/^void LA_Test_Gaussian_Elimination_4()$/;"	f
LA_Test_Gaussian_Elimination_5	linear-algebra.c	/^void LA_Test_Gaussian_Elimination_5()$/;"	f
LOCALIZATION_FILE	common.h	380;"	d
LOCALIZATION_FILE	common.h	489;"	d
Left	heap.c	/^int Left(int i)$/;"	f
LookupDirectionalEdgeQueue	queue.c	/^directional_edge_queue_node_t* LookupDirectionalEdgeQueue(directional_edge_queue_t *Q, char *u, char *v)$/;"	f
LookupEdgeQueue	queue.c	/^edge_queue_node_t* LookupEdgeQueue(edge_queue_t *Q, char *u, char *v, boolean *flip_flag)$/;"	f
LookupGraph	shortest-path.c	/^struct_graph_node* LookupGraph(struct_graph_node *G, int G_size, char *u)$/;"	f
LookupGraph_By_NodeID	shortest-path.c	/^struct_graph_node* LookupGraph_By_NodeID(struct_graph_node *G, int G_size, int node_id)$/;"	f
LookupTable	schedule.c	/^schedule_table_node_t* LookupTable(struct_graph_node *Gv, char *u, char *v, boolean *flip_flag)$/;"	f
Lookup_Schedule_Table_Index	shortest-path.c	/^int Lookup_Schedule_Table_Index(struct_schedule_table *sched_table, char *src)$/;"	f
Lq	smpl.c	/^real Lq(int f)$/;"	f
MATLAB_BUF_SIZE	matlab-operation.h	16;"	d
MATLAB_NUMBER_OF_INITIAL_VECTOR_VALUES	matlab-operation.h	17;"	d
MATLAB_NUMBER_OF_MOBILITY_VECTOR_VALUES	matlab-operation.h	19;"	d
MATRIX_SIZE_MULTIPLIER	common.h	628;"	d
MAX	util.h	15;"	d
MAXIMUM_NUMBER_OF_HOLE_ENDPOINTS_FOR_EXHAUSTIVE_SEARCH	common.h	625;"	d
MAXIMUM_SUBINTERVAL_NUNBER	gsl-util.h	15;"	d
MAXNODES	analysis.h	31;"	d
MAX_In_Double	util.c	/^double MAX_In_Double(double a, double b)$/;"	f
MAX_In_Integer	util.c	/^int MAX_In_Integer(int a, int b)$/;"	f
MEGA	param.h	18;"	d
METRIC_AVERAGE_DETECTION_TIME	param.h	/^  METRIC_AVERAGE_DETECTION_TIME = 2$/;"	e	enum:_performance_metric_type_t
METRIC_NETWORK_LIFETIME	param.h	/^{ METRIC_NETWORK_LIFETIME = 1,$/;"	e	enum:_performance_metric_type_t
MILE	common.h	303;"	d
MILLI	param.h	20;"	d
MIN	util.h	16;"	d
MIN_In_Double	util.c	/^double MIN_In_Double(double a, double b)$/;"	f
MIN_In_Integer	util.c	/^int MIN_In_Integer(int a, int b)$/;"	f
MOBILITY_CLOSED	common.h	/^  MOBILITY_CLOSED = 2, \/\/closed mobility$/;"	e	enum:_mobility_type_t
MOBILITY_FILE_FOR_NODES_2	common.h	355;"	d
MOBILITY_FILE_FOR_NODES_2	common.h	470;"	d
MOBILITY_FILE_FOR_NODES_20	common.h	363;"	d
MOBILITY_FILE_FOR_NODES_20_WITH_MULTIPLE_AP	common.h	364;"	d
MOBILITY_FILE_FOR_NODES_3	common.h	356;"	d
MOBILITY_FILE_FOR_NODES_3	common.h	471;"	d
MOBILITY_FILE_FOR_NODES_36	common.h	366;"	d
MOBILITY_FILE_FOR_NODES_36	common.h	475;"	d
MOBILITY_FILE_FOR_NODES_36_WITH_MULTIPLE_AP	common.h	367;"	d
MOBILITY_FILE_FOR_NODES_36_WITH_MULTIPLE_AP	common.h	476;"	d
MOBILITY_FILE_FOR_NODES_4	common.h	357;"	d
MOBILITY_FILE_FOR_NODES_4	common.h	472;"	d
MOBILITY_FILE_FOR_NODES_49	common.h	368;"	d
MOBILITY_FILE_FOR_NODES_49	common.h	477;"	d
MOBILITY_FILE_FOR_NODES_49_WITH_MULTIPLE_AP	common.h	369;"	d
MOBILITY_FILE_FOR_NODES_49_WITH_MULTIPLE_AP	common.h	478;"	d
MOBILITY_FILE_FOR_NODES_5	common.h	359;"	d
MOBILITY_FILE_FOR_NODES_5	common.h	473;"	d
MOBILITY_FILE_FOR_NODES_9	common.h	360;"	d
MOBILITY_FILE_FOR_NODES_9	common.h	474;"	d
MOBILITY_HYBRID	common.h	/^  MOBILITY_HYBRID = 4 \/\/non-destination vehicle's mobility, that is, Hybrid mobility model of City Section Mobility model and Mahattan Mobility mode;$/;"	e	enum:_mobility_type_t
MOBILITY_OPEN	common.h	/^  MOBILITY_OPEN = 1, \/\/open mobility$/;"	e	enum:_mobility_type_t
MOBILITY_STATIONARY	common.h	/^  MOBILITY_STATIONARY = 3, \/\/no mobility as stationary node$/;"	e	enum:_mobility_type_t
MOBILITY_UNKNOWN	common.h	/^  MOBILITY_UNKNOWN = 0, \/\/unknown mobility$/;"	e	enum:_mobility_type_t
MOVE_BACKWARD	common.h	/^	MOVE_BACKWARD = 2 \/* move the backward for the direction of edge that is road segment taken by the vehicle *\/$/;"	e	enum:_MOVE_TYPE
MOVE_FORWARD	common.h	/^	MOVE_FORWARD = 1, \/* move the forward for the direction of edge that is road segment taken by the vehicle *\/$/;"	e	enum:_MOVE_TYPE
MOVE_TYPE	common.h	/^} MOVE_TYPE;$/;"	t	typeref:enum:_MOVE_TYPE
MOVE_UNKNOWN	common.h	/^	MOVE_UNKNOWN = 0,$/;"	e	enum:_MOVE_TYPE
MSG_BUF_SIZE	common.h	569;"	d
MST_FindClusterSet	mst.c	/^vertex_set_queue_t* MST_FindClusterSet(char *vertex, vertex_set_queue_t *entrance_set, vertex_set_queue_t *protection_set, vertex_set_queue_t *hole_set)$/;"	f
MST_FindVertexSetNode	mst.c	/^vertex_set_queue_node_t* MST_FindVertexSetNode(char *vertex, vertex_set_queue_t *entrance_set, vertex_set_queue_t *protection_set, vertex_set_queue_t *hole_set)$/;"	f
MST_MakeClusterSet	mst.c	/^vertex_set_queue_t* MST_MakeClusterSet(vertex_set_queue_node_t* vertex_node, cluster_type_t cluster_type)$/;"	f
MST_MergeClusterSet	mst.c	/^vertex_set_queue_t* MST_MergeClusterSet(vertex_set_queue_t* set1, vertex_set_queue_t* set2, vertex_set_queue_node_t *pVertexNodeForTailNode, vertex_set_queue_node_t *pVertexNodeForHeadNode, vertex_set_queue_t *entrance_set, vertex_set_queue_t *protection_set, vertex_set_queue_t *hole_set)$/;"	f
MST_PerformClustering	mst.c	/^void MST_PerformClustering(parameter_t *param, struct_traffic_table *src_table_for_Gv, struct_traffic_table *dst_table_for_Gv, struct_traffic_table *src_or_dst_table_for_Gv, double **Dv_move, int **Dv_scan, edge_set_queue_t *MST_set)$/;"	f
MST_UpdateTrafficTable	mst.c	/^void MST_UpdateTrafficTable(struct_traffic_table *traffic_table, vertex_set_queue_t *cluster_set)$/;"	f
M_ratio	matlab-operation.h	/^	float M_ratio; \/\/ratio indicating the relative difference between Mr and Mv$/;"	m	struct:_struct_matlab_localization_result
MakeConditionalForwardingProbabilityQueue_For_DirectionalEdge	queue.c	/^void MakeConditionalForwardingProbabilityQueue_For_DirectionalEdge(struct_graph_node *tail_gnode, struct_graph_node *head_gnode)$/;"	f
MakeQueueNode	queue.c	/^queue_node_t* MakeQueueNode(queue_type_t queue_type, queue_node_t *node)$/;"	f
MakeSurveillanceScheduleWithInitialSensingHoles	schedule.c	/^int MakeSurveillanceScheduleWithInitialSensingHoles(parameter_t *param, struct_graph_node **Gv, int *Gv_size, schedule_table_t *T, struct_sensor_table *S, double ***Dv_move, int ***Mv_move, int *matrix_size_for_movement_in_Gv, int ***Dv_scan, int ***Mv_scan, int *matrix_size_for_scanning_in_Gv, struct_traffic_table *src_table_for_Gr, struct_traffic_table *dst_table_for_Gr, struct_traffic_table *src_table_for_Gv, struct_traffic_table *dst_table_for_Gv, struct_traffic_table *hole_table_for_Gv, double *movement_time_for_sleeping, double *scanning_time_for_sleeping, double *sleeping_time, edge_queue_t *Er)$/;"	f
MakeTrafficTable	shortest-path.c	/^void MakeTrafficTable(struct_traffic_table* table, char *node1, char *node2)$/;"	f
Make_Backward_Path_List_With_Mobility_List	shortest-path.c	/^struct_path_node* Make_Backward_Path_List_With_Mobility_List(mobility_queue_t *Q, struct_graph_node *G, int G_size, int *path_hop_count)$/;"	f
Make_Forward_Path_List_With_Mobility_List	shortest-path.c	/^struct_path_node* Make_Forward_Path_List_With_Mobility_List(mobility_queue_t *Q, struct_graph_node *G, int G_size, int *path_hop_count)$/;"	f
Make_Forwarding_Graph	shortest-path.c	/^struct_graph_node* Make_Forwarding_Graph(struct_graph_node* G, int G_size, int* G_new_size)$/;"	f
Make_Graph_Node	shortest-path.c	/^struct_graph_node* Make_Graph_Node(char *vertex, char *weight, char *density, GRAPH_NODE_TYPE type, GRAPH_NODE_ROLE role, double scale_factor)$/;"	f
Make_Graph_Node2	shortest-path.c	/^struct_graph_node* Make_Graph_Node2(char *vertex, double weight, double density, GRAPH_NODE_TYPE type, GRAPH_NODE_ROLE role)$/;"	f
Make_Intersection_EDD_Queue_And_NeighborList_For_VirtualNode	shortest-path.c	/^void Make_Intersection_EDD_Queue_And_NeighborList_For_VirtualNode(int virtual_node_id, struct_graph_node* dst, struct_graph_node* Gr, int Gr_size, struct_graph_node* Ga, int Ga_size, edge_queue_t *Ea, directional_edge_queue_t *DEa, char *tail_node, char *head_node, double left_edge_length, double right_edge_length)$/;"	f
Make_Path_List	shortest-path.c	/^struct_path_node* Make_Path_List(struct_path_table *path_table, char *src, char *dst, int *path_hop_count)$/;"	f
Make_Path_List_Before_The_Closest_Protection_Point	shortest-path.c	/^struct_path_node* Make_Path_List_Before_The_Closest_Protection_Point(struct_path_table *path_table, char *src, char *dst, struct_traffic_table *protection_set, int *path_hop_count)$/;"	f
Make_Path_List_For_Given_Trajectory	shortest-path.c	/^struct_path_node* Make_Path_List_For_Given_Trajectory(int *trajectory, int trajectory_size, struct_graph_node *G, int *path_hop_count)$/;"	f
MergeTrafficTable	shortest-path.c	/^void MergeTrafficTable(struct_traffic_table *dst, struct_traffic_table *src)$/;"	f
MergeTwoConvoys	queue.c	/^void MergeTwoConvoys(convoy_queue_t *Q1, convoy_queue_t *Q2)$/;"	f
Min_Heap_Insert	heap.c	/^void Min_Heap_Insert(struct_shortest_path_node *Q, int Q_size, struct_shortest_path_node *new_node)$/;"	f
Min_Heapify	heap.c	/^void Min_Heapify(struct_shortest_path_node *Q, int Q_size, int i)$/;"	f
Mr_edc	param.h	/^    int **Mr_edc; \/\/predecessor matrix for all-pairs shortest paths in terms of E2E delivery cost or cost variance in real graph Gr$/;"	m	struct:_vanet_information_table_t
Mr_edc	queue.h	/^	int **Mr_edc; \/\/predecessor matrix for Dr_edd$/;"	m	struct:_forwarding_table_queue_node_t
Mr_edd	param.h	/^    int **Mr_edd; \/\/predecessor matrix for all-pairs shortest paths in terms of E2E delivery delay or delay variance in real graph Gr$/;"	m	struct:_vanet_information_table_t
Mr_edd	queue.h	/^	int **Mr_edd; \/\/predecessor matrix for Dr_edd$/;"	m	struct:_forwarding_table_queue_node_t
Mr_move	param.h	/^    int **Mr_move; \/\/predecessor matrix for all-pairs shortest paths in terms of vehicle movement in real graph Gr$/;"	m	struct:_vanet_information_table_t
NAME_SIZE	graph-data-struct.h	21;"	d
NIL	graph-data-struct.h	20;"	d
NONINTERSECTION_GRAPH_NODE	graph-data-struct.h	/^	NONINTERSECTION_GRAPH_NODE = 2, \/* virtual graph node for data delivery towards vehicle or nonintersection node at road graph that is the end-point of a sensing hole segment on the road segment *\/$/;"	e	enum:_GRAPH_NODE_TYPE
NONINTERSECTION_NODE	common.h	/^	NONINTERSECTION_NODE = 2 \/* nonintersection node: sensor placed at non-intersection on road *\/$/;"	e	enum:_SENSOR_TYPE
NORMAL	param.h	/^  NORMAL = 3,      \/\/normal distribution$/;"	e	enum:_distribution_type_t
NUMBER_OF_DATA_FORWARDING_MODE	param.h	430;"	d
NUMBER_OF_DISTRIBUTION_TYPE	param.h	293;"	d
NUMBER_OF_HOLE_HANDLING_TYPE	param.h	390;"	d
NUMBER_OF_HOLE_MODE_TYPE	param.h	409;"	d
NUMBER_OF_SCAN_TYPE	param.h	325;"	d
NUMBER_OF_VANET_FORWARDING_SCHEME	param.h	270;"	d
NUMBER_STRING_LEN	common.h	579;"	d
OFFSET_TOLERANCE	common.h	573;"	d
OPERAND_NUM	param.h	22;"	d
OS_TYPE	Makefile	/^OS_TYPE=-D_LINUX_$/;"	m
OUTGOING_EDGE	graph-data-struct.h	/^        OUTGOING_EDGE = 0, \/\/outgoing edge for a vertex$/;"	e	enum:_directional_edge_type_t
OUTPUT_FILE_1	common.h	371;"	d
OUTPUT_FILE_1	common.h	480;"	d
OUTPUT_FILE_2	common.h	374;"	d
OUTPUT_FILE_2	common.h	483;"	d
P	graph-data-struct.h	/^        double P; \/\/probability that a packet is forwarded through road r_ij at intersection I_i; note that P includes the probability that the packet carrier continues to carry packet without actual forwarding$/;"	m	struct:_struct_graph_node
P	queue.h	/^        double P; \/\/forwarding probability$/;"	m	struct:_delay_component_queue_node_t
PACKET_ARRIVE	common.h	/^	PACKET_ARRIVE = 15,       \/* packet generation state *\/$/;"	e	enum:_STATE
PACKET_RECEIVED	common.h	/^	PACKET_RECEIVED = 17,     \/* packet receiving state *\/$/;"	e	enum:_STATE
PACKET_RECOMPUTE_TARGET_POINT	common.h	/^	PACKET_RECOMPUTE_TARGET_POINT = 18, \/* packet state to recompute its target point *\/$/;"	e	enum:_STATE
PACKET_TRANSMITTED	common.h	/^	PACKET_TRANSMITTED = 16,  \/* packet transmission state *\/$/;"	e	enum:_STATE
PACKET_VECTOR_INCREASE_SIZE	queue.h	693;"	d
PATHLIST_FILE	common.h	392;"	d
PATHLIST_FILE	common.h	501;"	d
PATHTABLE_FILE_FOR_MOVE	common.h	395;"	d
PATHTABLE_FILE_FOR_MOVE	common.h	504;"	d
PATHTABLE_FILE_FOR_SCAN	common.h	398;"	d
PATHTABLE_FILE_FOR_SCAN	common.h	507;"	d
PG_FLAG	Makefile	/^PG_FLAG=$/;"	m
PI	common.h	272;"	d
PREFILTER_TYPE_0	param.h	/^{ PREFILTER_TYPE_0 = 0, \/\/No PREFILTER: mean of Mv's + no use of prefilter based on relative error for Mv's + no use of prefilter based minimum spanning tree$/;"	e	enum:_prefilter_type_t
PREFILTER_TYPE_1	param.h	/^  PREFILTER_TYPE_1 = 1, \/\/PREFILTER: mean of Mv's + no use of prefilter based on relative error for Mv's + prefilter based minimum spanning tree$/;"	e	enum:_prefilter_type_t
PREFILTER_TYPE_2	param.h	/^  PREFILTER_TYPE_2 = 2, \/\/PREFILTER: mean of Mv's + prefilter based on relative error for Mv's + no use of prefilter based minimum spanning tree$/;"	e	enum:_prefilter_type_t
PREFILTER_TYPE_3	param.h	/^  PREFILTER_TYPE_3 = 3  \/\/PREFILTER: mean of Mv's + prefilter based on relative error for Mv's + prefilter based minimum spanning tree$/;"	e	enum:_prefilter_type_t
PROTECTION_GRAPH_NODE	graph-data-struct.h	/^	PROTECTION_GRAPH_NODE = 4,      \/* protection node at road graph *\/$/;"	e	enum:_GRAPH_NODE_TYPE
PTQ	queue.h	/^	packet_trajectory_queue_t PTQ; \/\/packet trajectory queue for packet forwarding$/;"	m	struct:_packet_forwarding_tree_path_queue_node_t
P_comm_rx	common.h	613;"	d
P_comm_tx	common.h	610;"	d
P_comp	common.h	607;"	d
P_encounter	queue.h	/^	double P_encounter; \/\/encounter probability$/;"	m	struct:_neighbor_list_queue_node_t
P_encounter	queue.h	/^	double P_encounter; \/\/encounter probability$/;"	m	struct:_parent_list_queue_node_t
P_prime	graph-data-struct.h	/^        double P_prime; \/\/probability of a packet being forwarded to road r_ij at intersection I_i$/;"	m	struct:_struct_graph_node
P_prime_pure	graph-data-struct.h	/^        double P_prime_pure; \/\/forwarding probability of a packet being forwarded to road r_ij at intersection I_i in TBD$/;"	m	struct:_struct_graph_node
P_pure	graph-data-struct.h	/^        double P_pure; \/\/pure forwarding probability that a packet is forwarded into a vehicle moving on the branch by the original packet carrier; note that P_pure is used to compute EDD based on vehicle trajectory.$/;"	m	struct:_struct_graph_node
P_warm	common.h	616;"	d
P_work	common.h	619;"	d
Parent	heap.c	/^int Parent(int i)$/;"	f
Partition	quick-sort.c	/^static int Partition(int *A, int p, int r)$/;"	f	file:
PartitionForAngleArray	quick-sort.c	/^static int PartitionForAngleArray(angle_queue_node_t **A, int p, int r)$/;"	f	file:
PartitionForDirectionalEdgeArray	quick-sort.c	/^static int PartitionForDirectionalEdgeArray(directional_edge_queue_node_t **A, int p, int r)$/;"	f	file:
PartitionForEdgeSetArray	quick-sort.c	/^static int PartitionForEdgeSetArray(edge_set_queue_node_t **A, int p, int r)$/;"	f	file:
PartitionForIntersection_EDD_Array	quick-sort.c	/^static int PartitionForIntersection_EDD_Array(intersection_edd_queue_node_t **A, int p, int r)$/;"	f	file:
PartitionForSensingHoleEndpointArray	quick-sort.c	/^static int PartitionForSensingHoleEndpointArray(hole_endpoint_queue_node_t **A, int p, int r)$/;"	f	file:
PartitionForSensorArray	quick-sort.c	/^static int PartitionForSensorArray(sensor_queue_node_t **A, int p, int r)$/;"	f	file:
PartitionForVehicleArray	quick-sort.c	/^static int PartitionForVehicleArray(vehicle_queue_node_t **A, int p, int r)$/;"	f	file:
PartitionForVehicleMovementArray	quick-sort.c	/^static int PartitionForVehicleMovementArray(vehicle_movement_queue_node_t **A, int p, int r)$/;"	f	file:
Path_List_Add	shortest-path.c	/^struct_path_node* Path_List_Add(struct_path_node *path_list, struct_path_node *u)$/;"	f
Path_List_Init	shortest-path.c	/^struct_path_node* Path_List_Init()$/;"	f
Path_List_Reverse_Insert	shortest-path.c	/^struct_path_node* Path_List_Reverse_Insert(struct_path_node *path_list, struct_set_node *u)$/;"	f
PerformClusteringWithAllEntrancePoints	schedule.c	/^void PerformClusteringWithAllEntrancePoints(struct_traffic_table *src_table, struct_traffic_table *dst_table, struct_traffic_table *src_or_dst_table)$/;"	f
PerformClusteringWithAllProtectionPoints	schedule.c	/^void PerformClusteringWithAllProtectionPoints(struct_traffic_table *src_table, struct_traffic_table *dst_table, struct_traffic_table *src_or_dst_table)$/;"	f
PerformClusteringWithExhaustiveSearch	schedule.c	/^void PerformClusteringWithExhaustiveSearch(parameter_t *param, schedule_table_t *T, struct_sensor_table *S, struct_traffic_table *src_table, struct_traffic_table *dst_table, struct_traffic_table *src_or_dst_table, struct_graph_node *G, int G_size, double **D_move, int **M_move, int **D_scan, int **M_scan)$/;"	f
PerformClusteringWithRandomLabeling	schedule.c	/^void PerformClusteringWithRandomLabeling(struct_traffic_table *src_table, struct_traffic_table *dst_table, struct_traffic_table *src_or_dst_table)$/;"	f
PerformSensingSchedule	schedule.c	/^void PerformSensingSchedule(parameter_t *param, struct_sensor_table *S, STATE state, double current_time, int dying_sensor_id)$/;"	f
PickTargetPoint	shortest-path.c	/^boolean PickTargetPoint(int *trajectory, int trajectory_size, double target_point_interdistance, int target_point_index, struct_graph_node *G, struct_coordinate3_t *target_point)$/;"	f
Q	graph-data-struct.h	/^        double Q; \/\/probability of a vehicle moving from the current intersection I_i towards the next adjacent intersection I_j$/;"	m	struct:_struct_graph_node
Q	queue.h	/^	minimum_priority_queue_t Q; \/\/minimum priority queue Q$/;"	m	struct:_predicted_encounter_graph_t
QTYPE_ACCESS_POINT	queue.h	/^	QTYPE_ACCESS_POINT = 23, \/\/access point queue for Internet access points$/;"	e	enum:_queue_type_t
QTYPE_ADJACENCY_LIST	queue.h	/^	QTYPE_ADJACENCY_LIST = 36, \/\/adjacency list queue$/;"	e	enum:_queue_type_t
QTYPE_ADJACENCY_LIST_POINTER	queue.h	/^	QTYPE_ADJACENCY_LIST_POINTER = 37, \/\/adjacency list pointer queue that contains the pointers to adjacency queue nodes in the adjacency list queue$/;"	e	enum:_queue_type_t
QTYPE_ANGLE	queue.h	/^	QTYPE_ANGLE = 11,        \/\/angle queue containing the angle between the vehicle movement vector and the destination vector for computing the forwarding probability P_ij in VADD$/;"	e	enum:_queue_type_t
QTYPE_CARRIER_TRACE	queue.h	/^	QTYPE_CARRIER_TRACE = 25, \/\/queue for packet carrier trace from packet source to packet destination$/;"	e	enum:_queue_type_t
QTYPE_CONDITIONAL_FORWARDING_PROBABILITY	queue.h	/^	QTYPE_CONDITIONAL_FORWARDING_PROBABILITY = 31, \/\/queue for the conditional forwarding probability that a packet is forwarded to each incident edge given a vehicle moving edge$/;"	e	enum:_queue_type_t
QTYPE_CONVOY	queue.h	/^	QTYPE_CONVOY = 20, \/\/convoy queue for convoys moving on a direcional edge$/;"	e	enum:_queue_type_t
QTYPE_DELAY	queue.h	/^	QTYPE_DELAY = 13,        \/\/delay queue for Expected Delivery Delay (EDD) in VANET$/;"	e	enum:_queue_type_t
QTYPE_DELAY_COMPONENT	queue.h	/^	QTYPE_DELAY_COMPONENT = 14, \/\/delay component queue for delay components for each EDD in VANET$/;"	e	enum:_queue_type_t
QTYPE_DESTINATION_VEHICLE	queue.h	/^	QTYPE_DESTINATION_VEHICLE = 22, \/\/destination vehicle queue for destination vehicles to receive packets from AP$/;"	e	enum:_queue_type_t
QTYPE_DIRECTIONAL_EDGE	queue.h	/^	QTYPE_DIRECTIONAL_EDGE = 12,   \/\/edge queue for directional edges corresponding to road segments in VANET$/;"	e	enum:_queue_type_t
QTYPE_EDGE	queue.h	/^	QTYPE_EDGE = 4,          \/\/edge queue containing unique edges of the adjacency list for the road network graph$/;"	e	enum:_queue_type_t
QTYPE_EDGE_SET	queue.h	/^	QTYPE_EDGE_SET = 10,     \/\/edge set queue containing edges in virtual topoloy Tv$/;"	e	enum:_queue_type_t
QTYPE_FORWARDING_TABLE	queue.h	/^	QTYPE_FORWARDING_TABLE = 26, \/\/queue for STBD forwarding tables that are an adjacency list of road network graph for a specific target point or access point$/;"	e	enum:_queue_type_t
QTYPE_GLOBAL_PACKET	queue.h	/^	QTYPE_GLOBAL_PACKET = 27, \/\/global packet queue for pointers to the valid packets whose TTLs do not expire in VANET$/;"	e	enum:_queue_type_t
QTYPE_HOLE_ENDPOINT	queue.h	/^	QTYPE_HOLE_ENDPOINT = 8, \/\/sensing hole segment queue containing sensing holes for each edge in real graph Gr$/;"	e	enum:_queue_type_t
QTYPE_HOLE_SEGMENT	queue.h	/^	QTYPE_HOLE_SEGMENT = 7,  \/\/sensing hole segment queue containing sensing holes for each edge in real graph Gr$/;"	e	enum:_queue_type_t
QTYPE_INTERSECTION_EDD	queue.h	/^	QTYPE_INTERSECTION_EDD = 19, \/\/intersection EDD queue containing the pointers to the graph nodes corresponding to edges incident to the intersection in the ascending order of EDD values$/;"	e	enum:_queue_type_t
QTYPE_LOCATION	queue.h	/^	QTYPE_LOCATION = 6,      \/\/sensor location queue containing sensor location order along with the index of sensor table S that is used to access the actual sensor information$/;"	e	enum:_queue_type_t
QTYPE_MINIMUM_PRIORITY	queue.h	/^	QTYPE_MINIMUM_PRIORITY = 33, \/\/minimum priority queue$/;"	e	enum:_queue_type_t
QTYPE_MOBILITY	queue.h	/^	QTYPE_MOBILITY = 21, \/\/mobility queue for the trajectory of destination vehicle(s)$/;"	e	enum:_queue_type_t
QTYPE_NEIGHBOR_LIST	queue.h	/^	QTYPE_NEIGHBOR_LIST = 34, \/\/neighbor list queue of the head vertices for a tail vertex in adjacency list$/;"	e	enum:_queue_type_t
QTYPE_NONE	queue.h	/^	QTYPE_NONE = 0,$/;"	e	enum:_queue_type_t
QTYPE_PACKET	queue.h	/^	QTYPE_PACKET = 15,          \/\/packet used in VANET$/;"	e	enum:_queue_type_t
QTYPE_PACKET_POINTER	queue.h	/^	QTYPE_PACKET_POINTER = 38  \/\/packet pointer queue that contains the pointers to packet copies distributed to multiple VANET objects, such as APs, stationary nodes and vehicles$/;"	e	enum:_queue_type_t
QTYPE_PACKET_SCHEDULE	queue.h	/^	QTYPE_PACKET_SCHEDULE = 16, \/\/schedule queue for packet generation$/;"	e	enum:_queue_type_t
QTYPE_PACKET_TRAJECTORY	queue.h	/^	QTYPE_PACKET_TRAJECTORY = 29, \/\/packet trajectory queue to determine the packet forwarding path$/;"	e	enum:_queue_type_t
QTYPE_PARENT_LIST	queue.h	/^	QTYPE_PARENT_LIST = 35, \/\/parent list queue of the parent vertices in adjacency list$/;"	e	enum:_queue_type_t
QTYPE_PATH	queue.h	/^	QTYPE_PATH = 3,          \/\/path queue for nodes on the shortest path from source to destination$/;"	e	enum:_queue_type_t
QTYPE_PROBABILITY_AND_STATISTICS	queue.h	/^	QTYPE_PROBABILITY_AND_STATISTICS = 30, \/\/queue for the probability and statistics per each edge in the road network$/;"	e	enum:_queue_type_t
QTYPE_SCHEDULE	queue.h	/^	QTYPE_SCHEDULE = 1,      \/\/schedule queue for sensing scheduling$/;"	e	enum:_queue_type_t
QTYPE_SENSOR	queue.h	/^	QTYPE_SENSOR = 2,        \/\/sensor queue for sensors deployed on an edge corresponding to a road segment$/;"	e	enum:_queue_type_t
QTYPE_STATIONARY_NODE	queue.h	/^	QTYPE_STATIONARY_NODE = 28, \/\/queue of stationary nodes that are attached to intersections as packet buffers$/;"	e	enum:_queue_type_t
QTYPE_SUBEDGE	queue.h	/^	QTYPE_SUBEDGE = 5,       \/\/subedge queue containing unique edges of the adjacency list for the subdivision graph of the road network graph$/;"	e	enum:_queue_type_t
QTYPE_TARGET_POINT	queue.h	/^	QTYPE_TARGET_POINT = 32, \/\/target point queue containing target points towards which packets will be sent$/;"	e	enum:_queue_type_t
QTYPE_VEHICLE	queue.h	/^	QTYPE_VEHICLE = 17, \/\/vehicle queue for pointers to vehicle nodes moving on a directional edge$/;"	e	enum:_queue_type_t
QTYPE_VEHICLE_MOVEMENT	queue.h	/^	QTYPE_VEHICLE_MOVEMENT = 18,\/\/vehicle movement queue for packet forwarding on road segment$/;"	e	enum:_queue_type_t
QTYPE_VEHICLE_TRAJECTORY	queue.h	/^	QTYPE_VEHICLE_TRAJECTORY = 24, \/\/vehicle trajectory queue to estimate the destination vehicle position according to time$/;"	e	enum:_queue_type_t
QTYPE_VERTEX_SET	queue.h	/^	QTYPE_VERTEX_SET = 9,    \/\/vertex set queue containing vertices in virtual topology Tv$/;"	e	enum:_queue_type_t
QUEUE_NODE_OBJECT_UNKNOWN	queue.h	/^	QUEUE_NODE_OBJECT_UNKNOWN = 0, \/\/unknown object type$/;"	e	enum:_queue_node_object_type_t
QUEUE_NODE_OBJECT_VEHICLE	queue.h	/^	QUEUE_NODE_OBJECT_VEHICLE = 1 \/\/vehicle model object$/;"	e	enum:_queue_node_object_type_t
QuickSort	quick-sort.c	/^void QuickSort(int *A, int p, int r)$/;"	f
QuickSortForAngleArray	quick-sort.c	/^void QuickSortForAngleArray(angle_queue_node_t **A, int p, int r)$/;"	f
QuickSortForDirectionalEdgeArray	quick-sort.c	/^void QuickSortForDirectionalEdgeArray(directional_edge_queue_node_t **A, int p, int r)$/;"	f
QuickSortForEdgeSetArray	quick-sort.c	/^void QuickSortForEdgeSetArray(edge_set_queue_node_t **A, int p, int r)$/;"	f
QuickSortForIntersection_EDD_Array	quick-sort.c	/^void QuickSortForIntersection_EDD_Array(intersection_edd_queue_node_t **A, int p, int r)$/;"	f
QuickSortForSensingHoleEndpointArray	quick-sort.c	/^void QuickSortForSensingHoleEndpointArray(hole_endpoint_queue_node_t **A, int p, int r)$/;"	f
QuickSortForSensorArray	quick-sort.c	/^void QuickSortForSensorArray(sensor_queue_node_t **A, int p, int r)$/;"	f
QuickSortForVehicleArray	quick-sort.c	/^void QuickSortForVehicleArray(vehicle_queue_node_t **A, int p, int r)$/;"	f
QuickSortForVehicleMovementArray	quick-sort.c	/^void QuickSortForVehicleMovementArray(vehicle_movement_queue_node_t **A, int p, int r)$/;"	f
RANGE_FACTOR	analysis.h	20;"	d
REVERSE_TRAVERSAL_HOP_DISTANCE_THRESHOLD	common.h	565;"	d
ROLE_ACCESS_POINT	graph-data-struct.h	/^        ROLE_ACCESS_POINT = 6           \/* access point at virtual graph *\/$/;"	e	enum:_GRAPH_NODE_ROLE
ROLE_ENTRANCE_POINT	graph-data-struct.h	/^        ROLE_ENTRANCE_POINT = 3,        \/* entrance point at virtual graph *\/$/;"	e	enum:_GRAPH_NODE_ROLE
ROLE_HOLE_ENDPOINT	graph-data-struct.h	/^        ROLE_HOLE_ENDPOINT = 5,         \/* hole endpoint at virtual graph *\/$/;"	e	enum:_GRAPH_NODE_ROLE
ROLE_INTERSECTION_POINT	graph-data-struct.h	/^        ROLE_INTERSECTION_POINT = 1,    \/* intersection node at virtual graph *\/$/;"	e	enum:_GRAPH_NODE_ROLE
ROLE_NONINTERSECTION_POINT	graph-data-struct.h	/^        ROLE_NONINTERSECTION_POINT = 2, \/* non-intersection node at virtual graph*\/$/;"	e	enum:_GRAPH_NODE_ROLE
ROLE_PROTECTION_POINT	graph-data-struct.h	/^        ROLE_PROTECTION_POINT = 4,      \/* protection point at virtual graph *\/$/;"	e	enum:_GRAPH_NODE_ROLE
ROLE_UNKNOWN	graph-data-struct.h	/^        ROLE_UNKNOWN = 0,$/;"	e	enum:_GRAPH_NODE_ROLE
Random_Path_Get_Weight	random-path.c	/^double Random_Path_Get_Weight(int u, int v, struct_graph_node *G, int G_size)$/;"	f
Random_Path_List_Backward_Insert	random-path.c	/^struct_path_node* Random_Path_List_Backward_Insert(struct_path_node* h, struct_path_node *y, int u, double w)$/;"	f
Random_Path_List_Forward_Insert	random-path.c	/^struct_path_node* Random_Path_List_Forward_Insert(struct_path_node* h, struct_path_node *x, int u, double w)$/;"	f
Random_Path_List_Init	random-path.c	/^struct_path_node* Random_Path_List_Init()$/;"	f
Random_Path_List_Middle_Insert	random-path.c	/^struct_path_node* Random_Path_List_Middle_Insert(struct_path_node* h, struct_path_node *x, struct_path_node *y, struct_graph_node *G, int G_size, int** M, int *path_hop_count)$/;"	f
Random_Path_Make_Path_List	random-path.c	/^struct_path_node* Random_Path_Make_Path_List(int src, int dst, struct_graph_node *G, int G_size, double** D, int** M, parameter_t* param, int *path_hop_count)$/;"	f
Random_Path_Make_Path_List_Before_The_Closest_Protection_Point	random-path.c	/^struct_path_node* Random_Path_Make_Path_List_Before_The_Closest_Protection_Point(int src, int dst, struct_graph_node *G, int G_size, double** D, int** M, parameter_t* param, struct_traffic_table *protection_set, int *path_hop_count)$/;"	f
Reallocate_GlobalPacketQueue_PacketVectors	queue.c	/^void Reallocate_GlobalPacketQueue_PacketVectors(global_packet_queue_t* Q, int vector_increase_size)$/;"	f
RearrangeAngleQueue	queue.c	/^void RearrangeAngleQueue(angle_queue_t* Q, angle_queue_node_t **A)$/;"	f
RearrangeDirectionalEdgeQueue	queue.c	/^void RearrangeDirectionalEdgeQueue(directional_edge_queue_t* Q, directional_edge_queue_node_t **A)$/;"	f
RearrangeEdgeSetQueue	queue.c	/^void RearrangeEdgeSetQueue(edge_set_queue_t* Q, edge_set_queue_node_t **A)$/;"	f
RearrangeIntersection_EDD_Queue	queue.c	/^void RearrangeIntersection_EDD_Queue(intersection_edd_queue_t* Q, intersection_edd_queue_node_t **A)$/;"	f
RearrangeSensingHoleEndpointQueue	shortest-path.c	/^void RearrangeSensingHoleEndpointQueue(hole_endpoint_queue_t* Q, hole_endpoint_queue_node_t **A)$/;"	f
RearrangeSensorQueue	queue.c	/^void RearrangeSensorQueue(sensor_queue_t* Q, sensor_queue_node_t **A)$/;"	f
RearrangeVehicleMovementQueue	queue.c	/^void RearrangeVehicleMovementQueue(vehicle_movement_queue_t* Q, vehicle_movement_queue_node_t **A)$/;"	f
RearrangeVehicleQueue	queue.c	/^void RearrangeVehicleQueue(vehicle_queue_t* Q, vehicle_queue_node_t **A)$/;"	f
RegisterProbabilityAndStatistics_Per_DirectionalEdge	queue.c	/^void RegisterProbabilityAndStatistics_Per_DirectionalEdge(parameter_t *param, double current_time, struct_graph_node *Gr, int Gr_size, directional_edge_queue_t *DEr)$/;"	f
RegisterTableNodeIntoVirtualGraph	schedule.c	/^void RegisterTableNodeIntoVirtualGraph(struct_graph_node *G, int G_size, schedule_table_node_t *ptr_table_node)$/;"	f
Relax	shortest-path.c	/^void Relax(struct_shortest_path_node *u, struct_shortest_path_node *v, double w, struct_shortest_path_node *Q, int Q_size, int Q_index, struct_set_node *parent_node)$/;"	f
ReplaceSensorQueue	queue.c	/^void ReplaceSensorQueue(sensor_queue_t *dst_Q, sensor_queue_t *src_Q)$/;"	f
ReplaceSubedgeWithSubdivision	queue.c	/^void ReplaceSubedgeWithSubdivision(subedge_queue_node_t **subedge_in_schedule_table_entry, subedge_queue_node_t *subedge, subedge_queue_t *subedge_queue)$/;"	f
ReplaceTargetPointQueue	queue.c	/^void ReplaceTargetPointQueue(target_point_queue_t *dst_Q, target_point_queue_t *src_Q)$/;"	f
ResetQueue	queue.c	/^void ResetQueue(queue_t *Q)$/;"	f
ResetScheduleTable	schedule.c	/^void ResetScheduleTable(schedule_table_t *T)$/;"	f
ReversePacketTrajectoryQueue	queue.c	/^void ReversePacketTrajectoryQueue(packet_trajectory_queue_t *Q, struct_graph_node* G, int G_size)$/;"	f
ReverseQueue	queue.c	/^void ReverseQueue(queue_t *Q)$/;"	f
Right	heap.c	/^int Right(int i)$/;"	f
SCAN_CONSTANT_SPEED_WITH_NONOPTIMAL_SLEEPING	param.h	/^  SCAN_CONSTANT_SPEED_WITH_NONOPTIMAL_SLEEPING = 10, $/;"	e	enum:_sensor_scan_type_t
SCAN_CONSTANT_SPEED_WITH_OPTIMAL_SLEEPING	param.h	/^  SCAN_CONSTANT_SPEED_WITH_OPTIMAL_SLEEPING = 12, $/;"	e	enum:_sensor_scan_type_t
SCAN_CONSTANT_SPEED_WITH_OPTIMAL_SLEEPING_AND_SENSING_HOLE_HANDLING	param.h	/^  SCAN_CONSTANT_SPEED_WITH_OPTIMAL_SLEEPING_AND_SENSING_HOLE_HANDLING = 13$/;"	e	enum:_sensor_scan_type_t
SCAN_NO_USE	param.h	/^  SCAN_NO_USE = 3, \/\/there is no use of scan to get additional sleeping time; $/;"	e	enum:_sensor_scan_type_t
SCAN_NO_USE_WITH_OPTIMAL_SLEEPING_AND_SENSING_HOLE_HANDLING	param.h	/^  SCAN_NO_USE_WITH_OPTIMAL_SLEEPING_AND_SENSING_HOLE_HANDLING = 7,$/;"	e	enum:_sensor_scan_type_t
SCAN_SPEED	common.h	622;"	d
SCAN_TURN_ON_ALL	param.h	/^  SCAN_TURN_ON_ALL = 4, \/\/there is no sleeping time using movement time or scanning time$/;"	e	enum:_sensor_scan_type_t
SCAN_UNKNOWN	param.h	/^{ SCAN_UNKNOWN = 0,$/;"	e	enum:_sensor_scan_type_t
SCAN_VARIABLE_SPEED_WITHOUT_MOVEMENT_SLEEPING	param.h	/^  SCAN_VARIABLE_SPEED_WITHOUT_MOVEMENT_SLEEPING = 2, \/\/perform virtual scanning without $/;"	e	enum:_sensor_scan_type_t
SCAN_VARIABLE_SPEED_WITHOUT_MOVEMENT_SLEEPING_AND_WITH_SENSING_HOLE_HANDLING	param.h	/^  SCAN_VARIABLE_SPEED_WITHOUT_MOVEMENT_SLEEPING_AND_WITH_SENSING_HOLE_HANDLING = 6,$/;"	e	enum:_sensor_scan_type_t
SCAN_VARIABLE_SPEED_WITH_NONOPTIMAL_SLEEPING	param.h	/^  SCAN_VARIABLE_SPEED_WITH_NONOPTIMAL_SLEEPING = 11,$/;"	e	enum:_sensor_scan_type_t
SCAN_VARIABLE_SPEED_WITH_OPTIMAL_SLEEPING	param.h	/^  SCAN_VARIABLE_SPEED_WITH_OPTIMAL_SLEEPING = 1,$/;"	e	enum:_sensor_scan_type_t
SCAN_VARIABLE_SPEED_WITH_OPTIMAL_SLEEPING_AND_SENSING_HOLE_HANDLING	param.h	/^  SCAN_VARIABLE_SPEED_WITH_OPTIMAL_SLEEPING_AND_SENSING_HOLE_HANDLING = 5,$/;"	e	enum:_sensor_scan_type_t
SCAN_VARIABLE_SPEED_WITH_OPTIMAL_SLEEPING_AND_VARIABLE_WORKING_TIME	param.h	/^  SCAN_VARIABLE_SPEED_WITH_OPTIMAL_SLEEPING_AND_VARIABLE_WORKING_TIME = 9,$/;"	e	enum:_sensor_scan_type_t
SCAN_VARIABLE_SPEED_WITH_VARIABLE_SLEEPING_TIME_AND_WITH_SENSING_HOLE_HANDLING	param.h	/^  SCAN_VARIABLE_SPEED_WITH_VARIABLE_SLEEPING_TIME_AND_WITH_SENSING_HOLE_HANDLING = 8,$/;"	e	enum:_sensor_scan_type_t
SCHEDULE_FILE	common.h	377;"	d
SCHEDULE_FILE	common.h	486;"	d
SEED_DEFAULT	param.h	/^{ SEED_DEFAULT = 0,$/;"	e	enum:_simulation_seed_type_t
SEED_TIME	param.h	/^  SEED_TIME = 1	$/;"	e	enum:_simulation_seed_type_t
SEGMENT_TYPE_HOLE_SEGMENT	schedule.h	/^        SEGMENT_TYPE_HOLE_SEGMENT = 1$/;"	e	enum:_enum_segment_type_t
SEGMENT_TYPE_SENSOR_SEGMENT	schedule.h	/^        SEGMENT_TYPE_SENSOR_SEGMENT = 0,$/;"	e	enum:_enum_segment_type_t
SENSOR_BORN	common.h	/^	SENSOR_BORN = 1,       \/* sensor born state *\/$/;"	e	enum:_STATE
SENSOR_DIE	common.h	/^	SENSOR_DIE = 6,        \/* sensor die state *\/$/;"	e	enum:_STATE
SENSOR_ESTIMATE	common.h	/^	SENSOR_ESTIMATE = 3,   \/* sensor estimate state *\/$/;"	e	enum:_STATE
SENSOR_LOCATION_FILE	common.h	422;"	d
SENSOR_LOCATION_FILE	common.h	531;"	d
SENSOR_RESCHEDULE	common.h	/^	SENSOR_RESCHEDULE = 2, \/* sensor reschedule state *\/$/;"	e	enum:_STATE
SENSOR_SCHEDULE_MODE_EAGER_UPDATE	param.h	/^  SENSOR_SCHEDULE_MODE_EAGER_UPDATE = 1,$/;"	e	enum:_sensor_schedule_mode_type_t
SENSOR_SCHEDULE_MODE_LAZY_UPDATE	param.h	/^  SENSOR_SCHEDULE_MODE_LAZY_UPDATE = 2$/;"	e	enum:_sensor_schedule_mode_type_t
SENSOR_SCHEDULE_MODE_UNKNOWN	param.h	/^{ SENSOR_SCHEDULE_MODE_UNKNOWN = 0,  $/;"	e	enum:_sensor_schedule_mode_type_t
SENSOR_SENSE	common.h	/^	SENSOR_SENSE = 4,      \/* sensor sense state *\/$/;"	e	enum:_STATE
SENSOR_SLEEP	common.h	/^	SENSOR_SLEEP = 5,      \/* sensor sleep state *\/$/;"	e	enum:_STATE
SENSOR_TYPE	common.h	/^} SENSOR_TYPE;$/;"	t	typeref:enum:_SENSOR_TYPE
SENSOR_TYPE_UNKNOWN	common.h	/^	SENSOR_TYPE_UNKNOWN = 0,$/;"	e	enum:_SENSOR_TYPE
SIM_SENSOR_DETECTION_MISSING_PROBABILITY	param.h	/^  SIM_SENSOR_DETECTION_MISSING_PROBABILITY = 5, \/* multiple simulation according to sensor detection missing probability *\/$/;"	e	enum:_simulation_run_type_t
SIM_SENSOR_DUPLICATE_DETECTION_PROBABILITY	param.h	/^  SIM_SENSOR_DUPLICATE_DETECTION_PROBABILITY = 6 \/* multiple simulation according to sensor duplicate detection probability *\/$/;"	e	enum:_simulation_run_type_t
SIM_SENSOR_TIME_SYNC_ERROR_STD	param.h	/^  SIM_SENSOR_TIME_SYNC_ERROR_STD = 1, \/* multiple simulation according to sensor time sync error standard deviation (STD) *\/$/;"	e	enum:_simulation_run_type_t
SIM_SENSOR_TIME_SYNC_ERROR_STD_VERSUS_VEHICLE_SPEED_STD	param.h	/^  SIM_SENSOR_TIME_SYNC_ERROR_STD_VERSUS_VEHICLE_SPEED_STD = 4,  \/* multiple simulation according to sensor time sync error STD versus vehicle speed STD *\/$/;"	e	enum:_simulation_run_type_t
SIM_SINGLE_SIMULATION	param.h	/^{ SIM_SINGLE_SIMULATION = 0,          \/* single simulation *\/$/;"	e	enum:_simulation_run_type_t
SIM_VEHICLE_INTERARRIVAL_TIME	param.h	/^  SIM_VEHICLE_INTERARRIVAL_TIME = 3,  \/* multiple simulation according to vehicle interarrival time *\/$/;"	e	enum:_simulation_run_type_t
SIM_VEHICLE_SPEED_STD	param.h	/^  SIM_VEHICLE_SPEED_STD = 2,          \/* multiple simulation according to vehicle speed STD *\/$/;"	e	enum:_simulation_run_type_t
SN_deployment_flag	param.h	/^		boolean SN_deployment_flag; \/\/SN deployment flag = {0: SNs are deployed into all of the intersections, 1: SNs are deployed by Bernoulli process}$/;"	m	struct:parameter
SN_deployment_probability	param.h	/^		double SN_deployment_probability; \/\/SN deployment probability p$/;"	m	struct:parameter
SOURCE_NAME	graph-data-struct.h	24;"	d
STATE	common.h	/^} STATE;$/;"	t	typeref:enum:_STATE
STATE_UNKNOWN	common.h	/^	STATE_UNKNOWN = 0,     \/* unknown state *\/$/;"	e	enum:_STATE
STATUS_BACKWARD	schedule.h	/^	STATUS_BACKWARD = 2, \/\/scan direction: head => tail$/;"	e	enum:_enum_status_t
STATUS_FORWARD	schedule.h	/^	STATUS_FORWARD = 1,  \/\/scan direction: tail => head$/;"	e	enum:_enum_status_t
STATUS_OVERLAP	schedule.h	/^	STATUS_OVERLAP = 3   \/\/two scans meet in the middle of the edge$/;"	e	enum:_enum_status_t
STATUS_UNKNOWN	schedule.h	/^	STATUS_UNKNOWN = 0,$/;"	e	enum:_enum_status_t
STEP_DISTANCE	common.h	281;"	d
STEP_EDGE	param.h	/^  STEP_EDGE = 2, \/\/vehicle moves by the movement time for the edge corresponding to each road segment	$/;"	e	enum:_vehicle_step_mode_type_t
STEP_PATH	param.h	/^  STEP_PATH = 3  \/\/vehicle moves by the movement time for the path from the source to the destination	$/;"	e	enum:_vehicle_step_mode_type_t
STEP_TIME	param.h	/^  STEP_TIME = 1, \/\/vehicle moves by step time$/;"	e	enum:_vehicle_step_mode_type_t
STRING_FOR_DATA_FORWARDING_MODE_DOWNLOAD	param.h	434;"	d
STRING_FOR_DATA_FORWARDING_MODE_UNKNOWN	param.h	433;"	d
STRING_FOR_DATA_FORWARDING_MODE_UPLOAD	param.h	435;"	d
STRING_FOR_DATA_FORWARDING_MODE_V2V	param.h	436;"	d
STRING_FOR_EQUAL	param.h	297;"	d
STRING_FOR_ERLANG	param.h	301;"	d
STRING_FOR_EXPONENTIAL	param.h	300;"	d
STRING_FOR_HOLE_HANDLING_ALL_ENTRANCE_POINTS	param.h	399;"	d
STRING_FOR_HOLE_HANDLING_ALL_PROTECTION_POINTS	param.h	400;"	d
STRING_FOR_HOLE_HANDLING_EXHAUSTIVE_SEARCH_ALGORITHM	param.h	394;"	d
STRING_FOR_HOLE_HANDLING_GREEDY_ALGORITHM_BASED_HEURISTICS	param.h	395;"	d
STRING_FOR_HOLE_HANDLING_GREEDY_ALGORITHM_BASED_MINIMAL_SPANNING_TREE	param.h	396;"	d
STRING_FOR_HOLE_HANDLING_NO_HANDLING	param.h	398;"	d
STRING_FOR_HOLE_HANDLING_RANDOM_LABELING	param.h	397;"	d
STRING_FOR_HOLE_HANDLING_UNKNOWN	param.h	393;"	d
STRING_FOR_HOLE_MODE_INCREMENTAL_LABELING	param.h	414;"	d
STRING_FOR_HOLE_MODE_RESHUFFLE_LABELING	param.h	413;"	d
STRING_FOR_HOLE_MODE_UNKNOWN	param.h	412;"	d
STRING_FOR_HYPERX	param.h	302;"	d
STRING_FOR_NORMAL	param.h	299;"	d
STRING_FOR_SCAN_CONSTANT_SPEED_WITH_NONOPTIMAL_SLEEPING	param.h	338;"	d
STRING_FOR_SCAN_CONSTANT_SPEED_WITH_OPTIMAL_SLEEPING	param.h	340;"	d
STRING_FOR_SCAN_CONSTANT_SPEED_WITH_OPTIMAL_SLEEPING_AND_SENSING_HOLE_HANDLING	param.h	341;"	d
STRING_FOR_SCAN_NO_USE	param.h	331;"	d
STRING_FOR_SCAN_NO_USE_WITH_OPTIMAL_SLEEPING_AND_SENSING_HOLE_HANDLING	param.h	335;"	d
STRING_FOR_SCAN_TURN_ON_ALL	param.h	332;"	d
STRING_FOR_SCAN_UNKNOWN	param.h	328;"	d
STRING_FOR_SCAN_VARIABLE_SPEED_WITHOUT_MOVEMENT_SLEEPING	param.h	330;"	d
STRING_FOR_SCAN_VARIABLE_SPEED_WITHOUT_MOVEMENT_SLEEPING_AND_WITH_SENSING_HOLE_HANDLING	param.h	334;"	d
STRING_FOR_SCAN_VARIABLE_SPEED_WITH_NONOPTIMAL_SLEEPING	param.h	339;"	d
STRING_FOR_SCAN_VARIABLE_SPEED_WITH_OPTIMAL_SLEEPING	param.h	329;"	d
STRING_FOR_SCAN_VARIABLE_SPEED_WITH_OPTIMAL_SLEEPING_AND_SENSING_HOLE_HANDLING	param.h	333;"	d
STRING_FOR_SCAN_VARIABLE_SPEED_WITH_OPTIMAL_SLEEPING_AND_VARIABLE_WORKING_TIME	param.h	337;"	d
STRING_FOR_SCAN_VARIABLE_SPEED_WITH_VARIABLE_SLEEPING_TIME_AND_WITH_SENSING_HOLE_HANDLING	param.h	336;"	d
STRING_FOR_UNIFORM	param.h	298;"	d
STRING_FOR_UNKNOWN_DISTRIBUTION	param.h	296;"	d
STRING_FOR_VANET_FORWARDING_EPIDEMIC	param.h	277;"	d
STRING_FOR_VANET_FORWARDING_TBD	param.h	275;"	d
STRING_FOR_VANET_FORWARDING_TMA	param.h	279;"	d
STRING_FOR_VANET_FORWARDING_TPD	param.h	276;"	d
STRING_FOR_VANET_FORWARDING_TSF	param.h	278;"	d
STRING_FOR_VANET_FORWARDING_UNKNOWN	param.h	273;"	d
STRING_FOR_VANET_FORWARDING_VADD	param.h	274;"	d
SURVEILLANCE_FILE_SUFFIX	common.h	383;"	d
SURVEILLANCE_FILE_SUFFIX	common.h	492;"	d
SetGraphNodeStatus	shortest-path.c	/^void SetGraphNodeStatus(struct_graph_node *G, int G_size, USAGE_STATUS status)$/;"	f
SetPhysicalOffset	shortest-path.c	/^double SetPhysicalOffset(char *node, double new_offset, struct_graph_node *G, int G_size)$/;"	f
SetPhysicalOffsetWithTableEntry	shortest-path.c	/^void SetPhysicalOffsetWithTableEntry(char *node, double virtual_offset, struct_graph_node *G, int G_size, schedule_table_node_t *pTableNode)$/;"	f
SetTargetPoint_In_TafficTable	shortest-path.c	/^void SetTargetPoint_In_TafficTable(struct_traffic_table *table, char *target_point)$/;"	f
Set_Forwarding_Information_For_Multiple_APs	shortest-path.c	/^void Set_Forwarding_Information_For_Multiple_APs(parameter_t *param, struct_graph_node *Gr, int Gr_size, struct_graph_node **G_set, int *G_set_size, int ap_number)$/;"	f
Set_Free	shortest-path.c	/^void Set_Free(struct_set_node *set)$/;"	f
Set_Init	shortest-path.c	/^struct_set_node* Set_Init()$/;"	f
Set_Insert	shortest-path.c	/^struct_set_node* Set_Insert(struct_set_node *S, struct_shortest_path_node *u)$/;"	f
Set_IntermediateNode_GeographicCoordinate	shortest-path.c	/^void Set_IntermediateNode_GeographicCoordinate(struct_graph_node *virtual_node_gnode, struct_graph_node *tail_node_gnode, struct_graph_node *head_node_gnode, double left_edge_length, double right_edge_length)$/;"	f
Set_NewConvoyHead	queue.c	/^void Set_NewConvoyHead(convoy_queue_node_t *convoy)$/;"	f
Set_NewConvoyLeader	queue.c	/^void Set_NewConvoyLeader(parameter_t *param, convoy_queue_node_t *convoy)$/;"	f
Set_NewConvoyTail	queue.c	/^void Set_NewConvoyTail(convoy_queue_node_t *convoy)$/;"	f
Set_RoadNetworkGraphNode_StationaryNodeFlag	shortest-path.c	/^void Set_RoadNetworkGraphNode_StationaryNodeFlag(struct_graph_node *Gr, int Gr_size)$/;"	f
Show_CarrierTraceQueue	queue.c	/^void Show_CarrierTraceQueue(packet_queue_node_t *packet)$/;"	f
Show_CarrierTraceQueue_For_Download	queue.c	/^void Show_CarrierTraceQueue_For_Download(packet_queue_node_t *packet)$/;"	f
Show_CarrierTraceQueue_For_Upload	queue.c	/^void Show_CarrierTraceQueue_For_Upload(packet_queue_node_t *packet)$/;"	f
SizeofQueue	queue.c	/^int SizeofQueue(queue_t *Q)$/;"	f
SizeofTable	schedule.c	/^int SizeofTable(schedule_table_t *T)$/;"	f
SortAngleQueue	queue.c	/^void SortAngleQueue(angle_queue_t* Q)$/;"	f
SortDirectionalEdgeQueue	queue.c	/^void SortDirectionalEdgeQueue(directional_edge_queue_t* Q)$/;"	f
SortEdgeSetQueue	queue.c	/^void SortEdgeSetQueue(edge_set_queue_t* Q)$/;"	f
SortIntersection_EDD_Queue	queue.c	/^void SortIntersection_EDD_Queue(parameter_t *param, intersection_edd_queue_t* Q)$/;"	f
SortIntersection_EDD_Queues_In_Graph	queue.c	/^void SortIntersection_EDD_Queues_In_Graph(parameter_t *param, struct_graph_node *G, int G_size)$/;"	f
SortSensingHoleEndpointQueue	shortest-path.c	/^void SortSensingHoleEndpointQueue(hole_endpoint_queue_t *Q)$/;"	f
SortSensorQueue	queue.c	/^void SortSensorQueue(sensor_queue_t* Q)$/;"	f
SortTrafficTable	shortest-path.c	/^void SortTrafficTable(struct_traffic_table *T)$/;"	f
SortVehicleMovementQueue	queue.c	/^void SortVehicleMovementQueue(vehicle_movement_queue_t* Q)$/;"	f
SortVehicleMovementQueues_In_Graph	queue.c	/^void SortVehicleMovementQueues_In_Graph(struct_graph_node *G, int G_size)$/;"	f
SortVehicleQueue	queue.c	/^void SortVehicleQueue(vehicle_queue_t* Q)$/;"	f
SplitConvoy	queue.c	/^void SplitConvoy(convoy_queue_t *Q)$/;"	f
Sr_edc	param.h	/^    double **Sr_edc; \/\/supplementary matrix for all-pairs shortest paths in terms of E2E delivery cost or cost variance in real graph Gr$/;"	m	struct:_vanet_information_table_t
Sr_edc	queue.h	/^	double **Sr_edc; \/\/supplementary matrix for Dr_edd$/;"	m	struct:_forwarding_table_queue_node_t
Sr_edd	param.h	/^    double **Sr_edd; \/\/supplementary matrix for all-pairs shortest paths in terms of E2E delivery delay or delay variance in real graph Gr$/;"	m	struct:_vanet_information_table_t
Sr_edd	queue.h	/^	double **Sr_edd; \/\/supplementary matrix for Dr_edd$/;"	m	struct:_forwarding_table_queue_node_t
Store_Graph_Into_File_As_AdjacencyList	shortest-path.c	/^void Store_Graph_Into_File_As_AdjacencyList(struct_graph_node *G, int G_size, char* filename, int indicator)$/;"	f
Store_Graph_Into_File_As_AdjacencyList_With_VANET_Statistics	shortest-path.c	/^void Store_Graph_Into_File_As_AdjacencyList_With_VANET_Statistics(parameter_t *param, struct_graph_node *G, int G_size, char* filename, int indicator)$/;"	f
Store_Graph_Into_File_As_AdjacencyMatrix	shortest-path.c	/^void Store_Graph_Into_File_As_AdjacencyMatrix(struct_graph_node *G, int G_size, char* filename)$/;"	f
Store_Sensing_Hole_Endpoints_And_Labeling_Into_File	shortest-path.c	/^void Store_Sensing_Hole_Endpoints_And_Labeling_Into_File(edge_queue_t *Er, struct_traffic_table *src_table_for_Gr, struct_traffic_table *dst_table_for_Gr, struct_traffic_table *src_table_for_Gv, struct_traffic_table *dst_table_for_Gv, char* filename, int indicator)$/;"	f
Store_Sensing_Hole_Endpoints_Into_File	shortest-path.c	/^void Store_Sensing_Hole_Endpoints_Into_File(FILE *fp, edge_queue_t *Er)$/;"	f
Store_Traffic_Table_Into_File	shortest-path.c	/^void Store_Traffic_Table_Into_File(FILE *fp, struct_traffic_table *traffic_table)$/;"	f
SubtractTrafficTable	shortest-path.c	/^void SubtractTrafficTable(struct_traffic_table *table, struct_traffic_table *set)$/;"	f
TARGET_VEHICLE_ID	common.h	636;"	d
TASK_SCRIPT	vanet_gentask.pl	/^format TASK_SCRIPT =$/;"	f
TIME	param.h	/^{ TIME = 0,$/;"	e	enum:_simulation_mode_type_t
TPD_ACTUAL_VEHICLE_SPEED_USE_FLAG	common.h	22;"	d
TPD_Allocate_Predicted_Encounter_Graph	tpd.c	/^int TPD_Allocate_Predicted_Encounter_Graph(parameter_t *param, struct_vehicle_t *vehicle)$/;"	f
TPD_Allocate_Predicted_Encounter_Graph_For_Packet	tpd.c	/^int TPD_Allocate_Predicted_Encounter_Graph_For_Packet(packet_queue_node_t* packet)$/;"	f
TPD_Check_Child_Vehicle_In_Encounter_Graph	tpd.c	/^boolean TPD_Check_Child_Vehicle_In_Encounter_Graph(double current_time, struct_vehicle_t *vehicle, struct_vehicle_t *candidate)$/;"	f
TPD_Compute_EDD_For_Encounter_Graph	tpd.c	/^double TPD_Compute_EDD_For_Encounter_Graph(adjacency_list_queue_t *G)$/;"	f
TPD_Compute_EDR_For_Encounter_Graph	tpd.c	/^double TPD_Compute_EDR_For_Encounter_Graph(adjacency_list_queue_t *G)$/;"	f
TPD_Compute_EDR_For_Encounter_Graph_By_DP	tpd.c	/^double TPD_Compute_EDR_For_Encounter_Graph_By_DP(adjacency_list_queue_t *G)$/;"	f
TPD_Compute_EDR_and_EDD	tpd.c	/^double TPD_Compute_EDR_and_EDD(double current_time,$/;"	f
TPD_Compute_EDR_and_EDD_For_Greedy_Routing	tpd.c	/^double TPD_Compute_EDR_and_EDD_For_Greedy_Routing(double current_time,$/;"	f
TPD_Compute_EDR_and_EDD_For_Source_Routing	tpd.c	/^double TPD_Compute_EDR_and_EDD_For_Source_Routing(double current_time,$/;"	f
TPD_Compute_Encounter_Probability	tpd.c	/^boolean TPD_Compute_Encounter_Probability(parameter_t *param,$/;"	f
TPD_Compute_FWD_Probability	tpd.c	/^boolean TPD_Compute_FWD_Probability($/;"	f
TPD_Compute_Forwarding_Probability	tpd.c	/^double TPD_Compute_Forwarding_Probability(neighbor_list_queue_t *Q, $/;"	f
TPD_Compute_Forwarding_Probability_For_Optimal_Forwarding_Subsequence	tpd.c	/^double TPD_Compute_Forwarding_Probability_For_Optimal_Forwarding_Subsequence(neighbor_list_queue_node_t *pFirstPosition, $/;"	f
TPD_Construct_Predicted_Encounter_Graph	tpd.c	/^double TPD_Construct_Predicted_Encounter_Graph(double current_time,$/;"	f
TPD_Construct_Predicted_Encounter_Graph_For_Packet	tpd.c	/^double TPD_Construct_Predicted_Encounter_Graph_For_Packet(double current_time,$/;"	f
TPD_DISPLAY_PREDICTED_ENCOUNTER_GRAPH_FLAG	common.h	46;"	d
TPD_DISPLAY_PREDICTED_ENCOUNTER_GRAPH_FOR_AP_FLAG	common.h	52;"	d
TPD_DISPLAY_PREDICTED_ENCOUNTER_GRAPH_FOR_INTERSECTION_FLAG	common.h	55;"	d
TPD_DISPLAY_PREDICTED_ENCOUNTER_GRAPH_FOR_INTERSECTION_ROAD_SEGMENT_FLAG	common.h	58;"	d
TPD_DISPLAY_PREDICTED_ENCOUNTER_GRAPH_FOR_ONEWAY_ROAD_SEGMENT_FLAG	common.h	61;"	d
TPD_DISPLAY_PREDICTED_ENCOUNTER_GRAPH_FOR_PACKET_FLAG	common.h	49;"	d
TPD_DISPLAY_PREDICTED_ENCOUNTER_GRAPH_FOR_TWOWAY_ROAD_SEGMENT_FLAG	common.h	64;"	d
TPD_Do_Vehicles_Encounter	tpd.c	/^boolean TPD_Do_Vehicles_Encounter(double current_time,$/;"	f
TPD_EDR_EDD_COMPUTATION_TRACE_FLAG	common.h	67;"	d
TPD_ENCOUNTER_TRACE_FLAG	common.h	70;"	d
TPD_Find_GraphNode_In_EncounterGraph	tpd.c	/^adjacency_list_queue_node_t* TPD_Find_GraphNode_In_EncounterGraph(adjacency_list_queue_t *G,$/;"	f
TPD_Free_Predicted_Encounter_Graph	tpd.c	/^int TPD_Free_Predicted_Encounter_Graph(struct_vehicle_t *vehicle)$/;"	f
TPD_Free_Predicted_Encounter_Graph_For_Packet	tpd.c	/^int TPD_Free_Predicted_Encounter_Graph_For_Packet(packet_queue_node_t* packet)$/;"	f
TPD_GREEDY_ROUTING_INTERSECTION_FORWARDING_TRACE_FLAG	common.h	31;"	d
TPD_GREEDY_ROUTING_ROAD_SEGMENT_FORWARDING_TRACE_FLAG	common.h	34;"	d
TPD_Get_Predicted_Encounter_Time	tpd.c	/^double TPD_Get_Predicted_Encounter_Time(int vehicle_id)$/;"	f
TPD_Is_There_Next_Carrier_At_Intersection	tpd.c	/^boolean TPD_Is_There_Next_Carrier_At_Intersection(parameter_t *param, $/;"	f
TPD_Is_There_Next_Carrier_At_Intersection_For_AP	tpd.c	/^boolean TPD_Is_There_Next_Carrier_At_Intersection_For_AP(parameter_t *param, $/;"	f
TPD_Is_There_Next_Carrier_At_Intersection_For_Greedy_Routing	tpd.c	/^boolean TPD_Is_There_Next_Carrier_At_Intersection_For_Greedy_Routing(parameter_t *param, $/;"	f
TPD_Is_There_Next_Carrier_At_Intersection_For_Source_Routing	tpd.c	/^boolean TPD_Is_There_Next_Carrier_At_Intersection_For_Source_Routing(parameter_t *param, $/;"	f
TPD_Is_There_Next_Carrier_On_One_Way_Road_Segment_For_Greedy_Routing	tpd.c	/^boolean TPD_Is_There_Next_Carrier_On_One_Way_Road_Segment_For_Greedy_Routing(parameter_t *param, $/;"	f
TPD_Is_There_Next_Carrier_On_One_Way_Road_Segment_For_Source_Routing	tpd.c	/^boolean TPD_Is_There_Next_Carrier_On_One_Way_Road_Segment_For_Source_Routing(parameter_t *param, $/;"	f
TPD_Is_There_Next_Carrier_On_Road_Segment	tpd.c	/^boolean TPD_Is_There_Next_Carrier_On_Road_Segment(parameter_t *param, $/;"	f
TPD_Is_There_Next_Carrier_On_Road_Segment_Incident_To_Intersection_For_AP	tpd.c	/^boolean TPD_Is_There_Next_Carrier_On_Road_Segment_Incident_To_Intersection_For_AP($/;"	f
TPD_Is_There_Next_Carrier_On_Road_Segment_Incident_To_Intersection_For_Greedy_Routing	tpd.c	/^boolean TPD_Is_There_Next_Carrier_On_Road_Segment_Incident_To_Intersection_For_Greedy_Routing($/;"	f
TPD_Is_There_Next_Carrier_On_Road_Segment_Incident_To_Intersection_For_Source_Routing	tpd.c	/^boolean TPD_Is_There_Next_Carrier_On_Road_Segment_Incident_To_Intersection_For_Source_Routing($/;"	f
TPD_Is_There_Next_Carrier_On_Two_Way_Road_Segment_For_Greedy_Routing	tpd.c	/^boolean TPD_Is_There_Next_Carrier_On_Two_Way_Road_Segment_For_Greedy_Routing(parameter_t *param, $/;"	f
TPD_Is_There_Next_Carrier_On_Two_Way_Road_Segment_For_Source_Routing	tpd.c	/^boolean TPD_Is_There_Next_Carrier_On_Two_Way_Road_Segment_For_Source_Routing(parameter_t *param, $/;"	f
TPD_PACKET_CARRIER_VEHICLE_TRACE_FLAG	common.h	28;"	d
TPD_Perform_BFS_For_Encounter_Graph	tpd.c	/^int TPD_Perform_BFS_For_Encounter_Graph(adjacency_list_queue_t *G, boolean display_flag)$/;"	f
TPD_Print_Vehicle_Trajectory	tpd.c	/^int TPD_Print_Vehicle_Trajectory(struct_vehicle_t *vehicle)$/;"	f
TPD_Prune_Encounter_Graph	tpd.c	/^int TPD_Prune_Encounter_Graph(adjacency_list_queue_t *G)$/;"	f
TPD_Reset_Queues_In_Predicted_Encounter_Graph	tpd.c	/^int TPD_Reset_Queues_In_Predicted_Encounter_Graph(struct_vehicle_t *vehicle)$/;"	f
TPD_Reset_Queues_In_Predicted_Encounter_Graph_For_Packet	tpd.c	/^int TPD_Reset_Queues_In_Predicted_Encounter_Graph_For_Packet(packet_queue_node_t* packet)$/;"	f
TPD_SOURCE_ROUTING_DESTINATION_VEHICLE_FORWARDING_TRACE_FLAG	common.h	40;"	d
TPD_SOURCE_ROUTING_INTERSECTION_FORWARDING_TRACE_FLAG	common.h	37;"	d
TPD_SOURCE_ROUTING_ROAD_SEGMENT_FORWARDING_TRACE_FLAG	common.h	43;"	d
TPD_Set_Margin_Time	tpd.c	/^void TPD_Set_Margin_Time(int margin)$/;"	f
TPD_TRAJECTORY_FILE_NAME	common.h	79;"	d
TPD_VEHICLE_MOBILITY_TRACE_FLAG	common.h	19;"	d
TPD_VEHICLE_SPEED_UPDATE_PER_ROAD_SEGMENT_FLAG	common.h	25;"	d
TPD_VEHICLE_TRAJECTORY_PRINT_FLAG	common.h	73;"	d
TPD_VEHICLE_TRAJECTORY_STORE_FLAG	common.h	76;"	d
TRACE_FILE_OF_HOLE_NUMBER	common.h	431;"	d
TRACE_FILE_OF_HOLE_NUMBER	common.h	540;"	d
TRACE_FILE_OF_SENSOR_NUMBER	common.h	428;"	d
TRACE_FILE_OF_SENSOR_NUMBER	common.h	537;"	d
TRACE_FILE_OF_SLEEPING_TIME	common.h	434;"	d
TRACE_FILE_OF_SLEEPING_TIME	common.h	543;"	d
TRACE_FILE_OF_VEHICLE_CONVOY_LENGTH	common.h	425;"	d
TRACE_FILE_OF_VEHICLE_CONVOY_LENGTH	common.h	534;"	d
TRACE_FILE_OF_VEHICLE_DETECTION_TIME	common.h	437;"	d
TRACE_FILE_OF_VEHICLE_DETECTION_TIME	common.h	546;"	d
TRACE_HOLE_NUMBER	common.h	/^  TRACE_HOLE_NUMBER = 2,$/;"	e	enum:_TRACE_TYPE
TRACE_SENSOR_NUMBER	common.h	/^  TRACE_SENSOR_NUMBER = 1,$/;"	e	enum:_TRACE_TYPE
TRACE_SLEEPING_TIME	common.h	/^  TRACE_SLEEPING_TIME = 3,$/;"	e	enum:_TRACE_TYPE
TRACE_TYPE	common.h	/^} TRACE_TYPE;$/;"	t	typeref:enum:_TRACE_TYPE
TRACE_UNKNOWN	common.h	/^  TRACE_UNKNOWN = 0,$/;"	e	enum:_TRACE_TYPE
TRACE_VEHICLE_CONVOY_LENGTH	common.h	/^  TRACE_VEHICLE_CONVOY_LENGTH = 5$/;"	e	enum:_TRACE_TYPE
TRACE_VEHICLE_DETECTION_TIME	common.h	/^  TRACE_VEHICLE_DETECTION_TIME = 4,$/;"	e	enum:_TRACE_TYPE
TRACK_REFRESH	common.h	/^        TRACK_REFRESH = 101     \/* tracking area's refresh state *\/$/;"	e	enum:_STATE
TRUE	graph-data-struct.h	/^	TRUE = 1$/;"	e	enum:_boolean
TRUE	param.h	/^	TRUE = 1$/;"	e	enum:_boolean
T_comm_rx	common.h	594;"	d
T_comm_tx	common.h	591;"	d
T_comp	common.h	597;"	d
T_encounter	queue.h	/^	double T_encounter; \/\/encounter time$/;"	m	struct:_neighbor_list_queue_node_t
T_encounter	queue.h	/^	double T_encounter; \/\/encounter time$/;"	m	struct:_parent_list_queue_node_t
T_sense	common.h	603;"	d
T_warm	common.h	600;"	d
TakeActionForSensingHole	schedule.c	/^void TakeActionForSensingHole(parameter_t *param, struct_graph_node **Gv, int *Gv_size, schedule_table_t *T, edge_queue_t *Er, struct_sensor_table *S, schedule_table_node_t *pTableNode, double left_hole_offset, double right_hole_offset, double ***Dv_move, int ***Mv_move, int *matrix_size_for_movement_in_Gv, int ***Dv_scan, int ***Mv_scan, int *matrix_size_for_scanning_in_Gv, struct_traffic_table *src_table_for_Gr, struct_traffic_table *dst_table_for_Gr, struct_traffic_table *src_table_for_Gv, struct_traffic_table *dst_table_for_Gv, struct_traffic_table *hole_table_for_Gv, double *movement_time_for_sleeping, double *scanning_time_for_sleeping, double *sleeping_time, double current_time, int dying_sensor_id)$/;"	f
TakeActionForSensorDeath	schedule.c	/^void TakeActionForSensorDeath(parameter_t *param, struct_graph_node *Gv, int Gv_size, schedule_table_t *T, struct_sensor_table *S, schedule_table_node_t *pTableNode, sensor_queue_node_t *pSensorNode, double ***Dv_move, int ***Mv_move, int *matrix_size_for_movement_in_Gv, int ***Dv_scan, int ***Mv_scan, int *matrix_size_for_scanning_in_Gv, struct_traffic_table *src_table_for_Gv, struct_traffic_table *dst_table_for_Gv, double *movement_time_for_sleeping, double *scanning_time_for_sleeping, double *sleeping_time, double current_time, int dying_sensor_id)$/;"	f
U	smpl.c	/^real U(int f)$/;"	f
UNIFORM	param.h	/^  UNIFORM = 2,     \/\/continuous uniform distribution$/;"	e	enum:_distribution_type_t
UNIT_METER	param.h	/^  UNIT_METER = 1, \/\/meter length unit$/;"	e	enum:_length_unit_type_t
UNIT_MILE	param.h	/^  UNIT_MILE = 2 \/\/mile length unit$/;"	e	enum:_length_unit_type_t
UNKNOWN_DISTRIBUTION	param.h	/^{ UNKNOWN_DISTRIBUTION = 0, \/\/unknown distribution$/;"	e	enum:_distribution_type_t
UNKNOWN_GRAPH_NODE_TYPE	graph-data-struct.h	/^	UNKNOWN_GRAPH_NODE_TYPE = 0,$/;"	e	enum:_GRAPH_NODE_TYPE
UNKNOWN_LENGTH_UNIT	param.h	/^{ UNKNOWN_LENGTH_UNIT = 0,$/;"	e	enum:_length_unit_type_t
UNKNOWN_STEP_MODE	param.h	/^{ UNKNOWN_STEP_MODE = 0,$/;"	e	enum:_vehicle_step_mode_type_t
USAGE_STATUS	graph-data-struct.h	/^} USAGE_STATUS;$/;"	t	typeref:enum:_USAGE_STATUS
USAGE_UNUSED	graph-data-struct.h	/^        USAGE_UNUSED = 1$/;"	e	enum:_USAGE_STATUS
USAGE_USED	graph-data-struct.h	/^        USAGE_USED = 0,$/;"	e	enum:_USAGE_STATUS
UpdateEdgeWeight	shortest-path.c	/^void UpdateEdgeWeight(struct_graph_node *G, char *u, char *v, double new_weight)$/;"	f
UpdateForwardingTableQueue	queue.c	/^void UpdateForwardingTableQueue(forwarding_table_queue_t *FTQ, parameter_t *param, struct_graph_node* Gr, int Gr_size, access_point_queue_t *APQ)$/;"	f
UpdateHoleEndpointEID	queue.c	/^void UpdateHoleEndpointEID(hole_endpoint_queue_t *H, int old_eid, char *node, int new_eid)$/;"	f
UpdateScheduleTableForSensorDeath	schedule.c	/^boolean UpdateScheduleTableForSensorDeath(schedule_table_node_t *pTableNode, sensor_queue_node_t *pSensorNode)$/;"	f
UpdateSurveillanceSchedule	schedule.c	/^void UpdateSurveillanceSchedule(parameter_t *param, schedule_table_t *T, struct_sensor_table *S, struct_traffic_table *src_table, struct_traffic_table *dst_table, struct_graph_node *G, int G_size, double **D_move, int **M_move, int **D_scan, int **M_scan, double *movement_time, double *scanning_time, double *sleeping_time)$/;"	f
Update_CurrentHop_VehicleTrajectoryQueueNode_In_PacketReverseTraversal	shortest-path.c	/^boolean Update_CurrentHop_VehicleTrajectoryQueueNode_In_PacketReverseTraversal(packet_queue_node_t *packet)$/;"	f
Update_DestinationVehicle_PassingTime_At_StationaryNode	queue.c	/^void Update_DestinationVehicle_PassingTime_At_StationaryNode(parameter_t *param, double current_time, struct_vehicle_t *vehicle, char *intersection_vertex)$/;"	f
Update_Intersection_EDD_QueueNode_Gnode	shortest-path.c	/^void Update_Intersection_EDD_QueueNode_Gnode(struct_graph_node *G, int G_size)$/;"	f
Update_LinkCost_Information	shortest-path.c	/^void Update_LinkCost_Information(parameter_t *param, struct_graph_node *G, int G_size)$/;"	f
Update_LinkDelay_Information	shortest-path.c	/^void Update_LinkDelay_Information(parameter_t *param, struct_graph_node *G, int G_size)$/;"	f
Update_NeighborNode_Gnode	shortest-path.c	/^void Update_NeighborNode_Gnode(struct_graph_node *G, int G_size)$/;"	f
Update_Schedule_Table	shortest-path.c	/^int Update_Schedule_Table(struct_schedule_table *sched_table, char *src, double current_time, double delay)$/;"	f
Update_VirtualGraph_And_ScheduleTable_And_EdgeQueue_For_SensingHole	shortest-path.c	/^boolean Update_VirtualGraph_And_ScheduleTable_And_EdgeQueue_For_SensingHole(struct_graph_node **Gv, int *Gv_size, schedule_table_t *T, schedule_table_node_t *pTableNode, double left_hole_offset, double right_hole_offset, edge_queue_t *Er, struct_traffic_table *added_hole_set, struct_traffic_table *deleted_hole_set)$/;"	f
VADD_CP	vadd.h	51;"	d
VADD_Compute_Angle	vadd.c	/^double VADD_Compute_Angle(struct_coordinate1_t *coord_1, struct_coordinate1_t *coord_2, struct_coordinate1_t *coord_3)$/;"	f
VADD_Compute_Average_Convoy_Length	vadd.c	/^double VADD_Compute_Average_Convoy_Length(parameter_t *param, struct_graph_node *pGraphNode)$/;"	f
VADD_Compute_Average_Convoy_Length_Standard_Deviation	vadd.c	/^double VADD_Compute_Average_Convoy_Length_Standard_Deviation(parameter_t *param, struct_graph_node *pGraphNode)$/;"	f
VADD_Compute_Conditional_Probability_For_Forwarding_Probability	vadd.c	/^double VADD_Compute_Conditional_Probability_For_Forwarding_Probability(angle_queue_t *M, int k, int h, angle_queue_node_t *pAngleNode)$/;"	f
VADD_Compute_Conditional_Probability_For_Pure_Forwarding_Probability	vadd.c	/^double VADD_Compute_Conditional_Probability_For_Pure_Forwarding_Probability(angle_queue_t *M, int k, int h, angle_queue_node_t *pAngleNode)$/;"	f
VADD_Compute_EDC_And_EDC_SD_Based_On_Shortest_Path_Model	vadd.c	/^void VADD_Compute_EDC_And_EDC_SD_Based_On_Shortest_Path_Model(parameter_t *param, struct_graph_node *G, int G_size, directional_edge_queue_t *EQ, struct_traffic_table *ap_table, int ap_table_index, boolean forwarding_table_update_flag)$/;"	f
VADD_Compute_EDC_And_EDC_SD_Based_On_Shortest_Path_Model_For_Multiple_APs	vadd.c	/^void VADD_Compute_EDC_And_EDC_SD_Based_On_Shortest_Path_Model_For_Multiple_APs(parameter_t *param, struct_graph_node *G, int G_size, directional_edge_queue_t *EQ, struct_traffic_table *ap_table, boolean forwarding_table_update_flag)$/;"	f
VADD_Compute_EDC_And_EDC_SD_Based_On_Shortest_Path_Model_For_Shortest_EDC	vadd.c	/^void VADD_Compute_EDC_And_EDC_SD_Based_On_Shortest_Path_Model_For_Shortest_EDC(parameter_t *param, struct_graph_node *G, int G_size, directional_edge_queue_t *EQ, struct_traffic_table *ap_table, int ap_table_index, boolean forwarding_table_update_flag)$/;"	f
VADD_Compute_EDD_And_EDD_SD_Based_On_Shortest_Path_Model	vadd.c	/^void VADD_Compute_EDD_And_EDD_SD_Based_On_Shortest_Path_Model(parameter_t *param, struct_graph_node *G, int G_size, directional_edge_queue_t *EQ, struct_traffic_table *ap_table, int ap_table_index, boolean forwarding_table_update_flag)$/;"	f
VADD_Compute_EDD_And_EDD_SD_Based_On_Shortest_Path_Model_For_Multiple_APs	vadd.c	/^void VADD_Compute_EDD_And_EDD_SD_Based_On_Shortest_Path_Model_For_Multiple_APs(parameter_t *param, struct_graph_node *G, int G_size, directional_edge_queue_t *EQ, struct_traffic_table *ap_table, boolean forwarding_table_update_flag)$/;"	f
VADD_Compute_EDD_And_EDD_SD_Based_On_Shortest_Path_Model_For_Shortest_EDD	vadd.c	/^void VADD_Compute_EDD_And_EDD_SD_Based_On_Shortest_Path_Model_For_Shortest_EDD(parameter_t *param, struct_graph_node *G, int G_size, directional_edge_queue_t *EQ, struct_traffic_table *ap_table, int ap_table_index, boolean forwarding_table_update_flag)$/;"	f
VADD_Compute_EDD_And_EDD_SD_Based_On_Shortest_Path_Model_For_Shortest_EDD_VAR	vadd.c	/^void VADD_Compute_EDD_And_EDD_SD_Based_On_Shortest_Path_Model_For_Shortest_EDD_VAR(parameter_t *param, struct_graph_node *G, int G_size, directional_edge_queue_t *EQ, struct_traffic_table *ap_table, int ap_table_index, boolean forwarding_table_update_flag)$/;"	f
VADD_Compute_EDD_And_EDD_SD_Based_On_Stochastic_Model	vadd.c	/^void VADD_Compute_EDD_And_EDD_SD_Based_On_Stochastic_Model(parameter_t *param, struct_graph_node *G, int G_size, directional_edge_queue_t *EQ, struct_traffic_table *ap_table, int ap_table_index)$/;"	f
VADD_Compute_EDD_And_EDD_SD_Based_On_Stochastic_Model_For_Multiple_APs	vadd.c	/^void VADD_Compute_EDD_And_EDD_SD_Based_On_Stochastic_Model_For_Multiple_APs(parameter_t *param, struct_graph_node *Gr, int Gr_size, directional_edge_queue_t *DEr, struct_traffic_table *ap_table_for_Gr)$/;"	f
VADD_Compute_EDD_And_EDD_SD_Based_On_Stochastic_Model_For_Target_Intersection	vadd.c	/^void VADD_Compute_EDD_And_EDD_SD_Based_On_Stochastic_Model_For_Target_Intersection(parameter_t *param, struct_graph_node *G, int G_size, directional_edge_queue_t *EQ, int target_intersection_index)$/;"	f
VADD_Compute_EDD_And_EDD_SD_Based_On_Stochastic_Model_For_V2V_Data_Delivery	vadd.c	/^void VADD_Compute_EDD_And_EDD_SD_Based_On_Stochastic_Model_For_V2V_Data_Delivery($/;"	f
VADD_Compute_EDD_And_EDD_SD_Based_On_TBD	vadd.c	/^void VADD_Compute_EDD_And_EDD_SD_Based_On_TBD(parameter_t *param, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, struct_traffic_table *ap_table, double *vehicle_EDD, double *vehicle_EDD_SD)$/;"	f
VADD_Compute_EDD_And_EDD_SD_Based_On_TBD_For_V2V_Data_Delivery	vadd.c	/^void VADD_Compute_EDD_And_EDD_SD_Based_On_TBD_For_V2V_Data_Delivery(parameter_t *param, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, int source_intersection_id, double *vehicle_EDD, double *vehicle_EDD_SD)$/;"	f
VADD_Compute_EDD_And_EDD_SD_Based_On_TBD_VERSION_1	vadd.c	/^void VADD_Compute_EDD_And_EDD_SD_Based_On_TBD_VERSION_1(parameter_t *param, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, struct_traffic_table *ap_table, double *vehicle_EDD, double *vehicle_EDD_SD)$/;"	f
VADD_Compute_EDD_And_EDD_SD_Based_On_TBD_VERSION_2	vadd.c	/^void VADD_Compute_EDD_And_EDD_SD_Based_On_TBD_VERSION_2(parameter_t *param, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, struct_traffic_table *ap_table, double *vehicle_EDD, double *vehicle_EDD_SD)$/;"	f
VADD_Compute_EDD_And_EDD_SD_Based_On_TBD_VERSION_3	vadd.c	/^void VADD_Compute_EDD_And_EDD_SD_Based_On_TBD_VERSION_3(parameter_t *param, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, struct_traffic_table *ap_table, double *vehicle_EDD, double *vehicle_EDD_SD)$/;"	f
VADD_Compute_EDD_And_EDD_SD_Based_On_TBD_VERSION_4	vadd.c	/^void VADD_Compute_EDD_And_EDD_SD_Based_On_TBD_VERSION_4(parameter_t *param, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, struct_traffic_table *ap_table, double *vehicle_EDD, double *vehicle_EDD_SD)$/;"	f
VADD_Compute_EDD_And_EDD_SD_Based_On_VADD	vadd.c	/^void VADD_Compute_EDD_And_EDD_SD_Based_On_VADD(parameter_t *param, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, struct_traffic_table *ap_table, double *vehicle_EDD, double *vehicle_EDD_SD)$/;"	f
VADD_Compute_EDD_And_EDD_SD_Based_On_VADD_For_V2V_Data_Delivery	vadd.c	/^void VADD_Compute_EDD_And_EDD_SD_Based_On_VADD_For_V2V_Data_Delivery(parameter_t *param, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, int source_intersection_id, double *vehicle_EDD, double *vehicle_EDD_SD)$/;"	f
VADD_Compute_EDD_And_EDD_SD_Based_On_VADD_VERSION_1	vadd.c	/^void VADD_Compute_EDD_And_EDD_SD_Based_On_VADD_VERSION_1(parameter_t *param, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, struct_traffic_table *ap_table, double *vehicle_EDD, double *vehicle_EDD_SD)$/;"	f
VADD_Compute_EDD_And_EDD_SD_Based_On_VADD_VERSION_2	vadd.c	/^void VADD_Compute_EDD_And_EDD_SD_Based_On_VADD_VERSION_2(parameter_t *param, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, struct_traffic_table *ap_table, double *vehicle_EDD, double *vehicle_EDD_SD)$/;"	f
VADD_Compute_EDD_And_EDD_SD_Based_On_VADD_VERSION_3	vadd.c	/^void VADD_Compute_EDD_And_EDD_SD_Based_On_VADD_VERSION_3(parameter_t *param, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, struct_traffic_table *ap_table, double *vehicle_EDD, double *vehicle_EDD_SD)$/;"	f
VADD_Compute_EDD_And_EDD_SD_For_TargetPoint_At_Intersection	vadd.c	/^void VADD_Compute_EDD_And_EDD_SD_For_TargetPoint_At_Intersection(parameter_t *param, int target_point_id, char *AP_vertex, forwarding_table_queue_t *FTQ, double *AP_EDD, double *AP_EDD_SD)$/;"	f
VADD_Compute_EDD_And_EDD_SD_For_TargetPoint_At_Intersection_Based_On_Stochastic_Model	vadd.c	/^void VADD_Compute_EDD_And_EDD_SD_For_TargetPoint_At_Intersection_Based_On_Stochastic_Model(parameter_t *param, int target_point_id, char *AP_vertex, forwarding_table_queue_t *FTQ, double *AP_EDD, double *AP_EDD_SD)$/;"	f
VADD_Compute_EDD_And_EDD_SD_For_TargetPoint_At_Intersection_For_V2V_Data_Delivery	vadd.c	/^void VADD_Compute_EDD_And_EDD_SD_For_TargetPoint_At_Intersection_For_V2V_Data_Delivery(parameter_t *param, int target_point_id, int source_intersection_id, struct_graph_node *Gr, int Gr_size, double *E2E_EDD, double *E2E_EDD_SD)$/;"	f
VADD_Compute_EDD_Based_On_Stochastic_Model	vadd.c	/^void VADD_Compute_EDD_Based_On_Stochastic_Model(parameter_t *param, struct_graph_node *G, int G_size, directional_edge_queue_t *EQ, struct_traffic_table *ap_table, int ap_table_index)$/;"	f
VADD_Compute_Edge_Delay	vadd.c	/^double VADD_Compute_Edge_Delay(parameter_t *param, struct_graph_node *pGraphNode)$/;"	f
VADD_Compute_Edge_Delay_Standard_Deviation	vadd.c	/^double VADD_Compute_Edge_Delay_Standard_Deviation(parameter_t *param, struct_graph_node *pGraphNode)$/;"	f
VADD_Compute_Forwarding_Probability	vadd.c	/^void VADD_Compute_Forwarding_Probability(parameter_t *param, struct_graph_node *G, int G_size, struct_traffic_table *ap_table, int ap_table_index)$/;"	f
VADD_Compute_Forwarding_Probability_For_Target_Intersection	vadd.c	/^void VADD_Compute_Forwarding_Probability_For_Target_Intersection(parameter_t *param, struct_graph_node *G, int G_size, int target_intersection_index)$/;"	f
VADD_Compute_Subedge_Delay	vadd.c	/^double VADD_Compute_Subedge_Delay(parameter_t *param, struct_graph_node *pGraphNode, double subedge_length)$/;"	f
VADD_Compute_Subedge_Delay_Standard_Deviation	vadd.c	/^double VADD_Compute_Subedge_Delay_Standard_Deviation(parameter_t *param, struct_graph_node *pGraphNode, double subedge_length)$/;"	f
VADD_Compute_TBD_Based_EDD	vadd.c	/^double VADD_Compute_TBD_Based_EDD(parameter_t *param, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, struct_traffic_table *ap_table)$/;"	f
VADD_Compute_VADD_Based_EDD	vadd.c	/^double VADD_Compute_VADD_Based_EDD(parameter_t *param, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, struct_traffic_table *ap_table)$/;"	f
VADD_Contacting_Time	vadd.h	21;"	d
VADD_Discard_Expired_Packet	vadd.c	/^void VADD_Discard_Expired_Packet(parameter_t *param, double current_time, packet_queue_node_t *pPacketNode, vanet_node_type_t node_type, void *vanet_node, packet_delivery_statistics_t *packet_delivery_stat,int lineNumber)$/;"	f
VADD_Forward_Packet_From_AP_To_Next_Carrier	vadd.c	/^int VADD_Forward_Packet_From_AP_To_Next_Carrier(parameter_t *param, double current_time, struct_access_point_t *AP, struct_vehicle_t *next_carrier, packet_delivery_statistics_t *packet_delivery_stat, int *discard_count)$/;"	f
VADD_Forward_Packet_From_AP_To_Stationary_Node	vadd.c	/^void VADD_Forward_Packet_From_AP_To_Stationary_Node(parameter_t *param, double current_time, struct_access_point_t *AP, int intersection_id, packet_delivery_statistics_t *packet_delivery_stat)$/;"	f
VADD_Forward_Packet_From_Stationary_Node_To_Destination_Vehicle	vadd.c	/^void VADD_Forward_Packet_From_Stationary_Node_To_Destination_Vehicle(parameter_t *param, double current_time, int intersection_id, struct_vehicle_t *destination_vehicle, packet_delivery_statistics_t *packet_delivery_stat)$/;"	f
VADD_Forward_Packet_From_Stationary_Node_To_Next_Carrier	vadd.c	/^void VADD_Forward_Packet_From_Stationary_Node_To_Next_Carrier(parameter_t *param, double current_time, int intersection_id, struct_vehicle_t *next_carrier, packet_delivery_statistics_t *packet_delivery_stat)$/;"	f
VADD_Forward_Packet_To_AP	vadd.c	/^void VADD_Forward_Packet_To_AP(parameter_t *param, double current_time, struct_vehicle_t *vehicle, access_point_queue_node_t *AP, packet_delivery_statistics_t *packet_delivery_stat)$/;"	f
VADD_Forward_Packet_To_Destination_Vehicle	vadd.c	/^void VADD_Forward_Packet_To_Destination_Vehicle(parameter_t *param, double current_time, struct_vehicle_t *carrier_vehicle, struct_vehicle_t *destination_vehicle, packet_delivery_statistics_t *packet_delivery_stat)$/;"	f
VADD_Forward_Packet_To_Next_Carrier	vadd.c	/^int VADD_Forward_Packet_To_Next_Carrier(parameter_t *param, double current_time, struct_vehicle_t *vehicle, struct_vehicle_t *next_carrier, packet_delivery_statistics_t *packet_delivery_stat, int *discard_count)$/;"	f
VADD_Forward_Packet_To_Stationary_Node	vadd.c	/^void VADD_Forward_Packet_To_Stationary_Node(parameter_t *param, double current_time, struct_vehicle_t *vehicle, struct_graph_node *Gr, int Gr_size, intersection_area_type_t intersection_area_type, int head_intersection_id, packet_delivery_statistics_t *packet_delivery_stat)$/;"	f
VADD_Forward_Packet_To_The_Following_Vehicle_In_Convoy	vadd.c	/^void VADD_Forward_Packet_To_The_Following_Vehicle_In_Convoy(parameter_t *param, double current_time, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, struct_traffic_table *ap_table, packet_delivery_statistics_t *packet_delivery_stat)$/;"	f
VADD_Get_EDD_And_EDD_SD_For_TargetPoint_At_Carrier	vadd.c	/^void VADD_Get_EDD_And_EDD_SD_For_TargetPoint_At_Carrier(parameter_t *param, int target_point_id, struct_vehicle_t *carrier_vehicle, forwarding_table_queue_t *FTQ, double *EDD, double *EDD_SD)$/;"	f
VADD_Get_EDD_And_EDD_SD_For_TargetPoint_At_Intersection	vadd.c	/^void VADD_Get_EDD_And_EDD_SD_For_TargetPoint_At_Intersection(parameter_t *param, int target_point_id, char *intersection_vertex, forwarding_table_queue_t *FTQ, double *intersection_EDD, double *intersection_EDD_SD)$/;"	f
VADD_Get_EDD_And_EDD_SD_For_TargetPoint_At_Intersection_For_V2V_Data_Delivery	vadd.c	/^void VADD_Get_EDD_And_EDD_SD_For_TargetPoint_At_Intersection_For_V2V_Data_Delivery(parameter_t *param, int target_point_id, char *intersection_vertex, forwarding_table_queue_t *FTQ, struct_graph_node *Gr, int Gr_size, double *intersection_EDD, double *intersection_EDD_SD)$/;"	f
VADD_Get_EDD_And_EDD_SD_In_Shortest_Path_Model	vadd.c	/^double VADD_Get_EDD_And_EDD_SD_In_Shortest_Path_Model(parameter_t *param, int src_id, int dst_id, double *EDD, double *EDD_SD)$/;"	f
VADD_Get_Initial_Minimum_Neighbor_EDD	vadd.c	/^double VADD_Get_Initial_Minimum_Neighbor_EDD(parameter_t *param, struct_vehicle_t *vehicle)$/;"	f
VADD_Is_There_Next_Carrier_At_Both_Intersection_Areas	vadd.c	/^boolean VADD_Is_There_Next_Carrier_At_Both_Intersection_Areas(parameter_t *param, double current_time, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, forwarding_table_queue_t *FTQ, intersection_area_type_t intersection_area_type, struct_vehicle_t **next_carrier)$/;"	f
VADD_Is_There_Next_Carrier_At_Intersection	vadd.c	/^boolean VADD_Is_There_Next_Carrier_At_Intersection(parameter_t *param, double current_time, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, forwarding_table_queue_t *FTQ, struct_vehicle_t **next_carrier)$/;"	f
VADD_Is_There_Next_Carrier_At_Intersection_Area	vadd.c	/^boolean VADD_Is_There_Next_Carrier_At_Intersection_Area(parameter_t *param, double current_time, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, forwarding_table_queue_t *FTQ, intersection_area_type_t intersection_area_type, struct_vehicle_t **next_carrier)$/;"	f
VADD_Is_There_Next_Carrier_At_Intersection_For_AP	vadd.c	/^boolean VADD_Is_There_Next_Carrier_At_Intersection_For_AP(parameter_t *param, double current_time, struct_access_point_t *AP, struct_graph_node *G, int G_size, forwarding_table_queue_t *FTQ, struct_vehicle_t **next_carrier)$/;"	f
VADD_Is_There_Next_Carrier_On_One_Way_Road_Segment	vadd.c	/^boolean VADD_Is_There_Next_Carrier_On_One_Way_Road_Segment(parameter_t *param, double current_time, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, struct_vehicle_t **next_carrier)$/;"	f
VADD_Is_There_Next_Carrier_On_Road_Segment	vadd.c	/^boolean VADD_Is_There_Next_Carrier_On_Road_Segment(parameter_t *param, double current_time, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, struct_vehicle_t **next_carrier)$/;"	f
VADD_Is_There_Next_Carrier_On_Road_Segment_Incident_To_Intersection	vadd.c	/^boolean VADD_Is_There_Next_Carrier_On_Road_Segment_Incident_To_Intersection(parameter_t *param, double current_time, struct_vehicle_t *vehicle, char *tail_node_for_next_forwarding_edge, char *head_node_for_next_forwarding_edge, directional_edge_type_t edge_type, struct_graph_node *G, int G_size, struct_vehicle_t **next_carrier)$/;"	f
VADD_Is_There_Next_Carrier_On_Road_Segment_Incident_To_Intersection_Area	vadd.c	/^boolean VADD_Is_There_Next_Carrier_On_Road_Segment_Incident_To_Intersection_Area(parameter_t *param, struct_vehicle_t *vehicle, char *tail_node_for_next_forwarding_edge, char *head_node_for_next_forwarding_edge, directional_edge_type_t edge_type, struct_graph_node *G, int G_size, struct_vehicle_t **next_carrier)$/;"	f
VADD_Is_There_Next_Carrier_On_Road_Segment_Incident_To_Intersection_For_AP	vadd.c	/^boolean VADD_Is_There_Next_Carrier_On_Road_Segment_Incident_To_Intersection_For_AP(parameter_t *param, double current_time, struct_access_point_t *AP, char *tail_node_for_next_forwarding_edge, char *head_node_for_next_forwarding_edge, directional_edge_type_t edge_type, struct_graph_node *G, int G_size, struct_vehicle_t **next_carrier)$/;"	f
VADD_Is_There_Next_Carrier_On_Two_Way_Road_Segment	vadd.c	/^boolean VADD_Is_There_Next_Carrier_On_Two_Way_Road_Segment(parameter_t *param, double current_time, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, struct_vehicle_t **next_carrier)$/;"	f
VADD_Is_Vehicle_Moving_On_Packet_Trajectory	vadd.c	/^boolean VADD_Is_Vehicle_Moving_On_Packet_Trajectory(struct_vehicle_t *vehicle, packet_trajectory_queue_t *packet_trajectory)$/;"	f
VADD_Is_Within_AP_Communication_Range	vadd.c	/^boolean VADD_Is_Within_AP_Communication_Range(parameter_t *param, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, struct_traffic_table *ap_table, struct_graph_node **ap_graph_node)$/;"	f
VADD_Is_Within_Destination_Vehicle_Communication_Range	vadd.c	/^boolean VADD_Is_Within_Destination_Vehicle_Communication_Range(parameter_t *param, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, destination_vehicle_queue_t *Q, struct_vehicle_t **destination_vehicle)$/;"	f
VADD_Is_Within_Intersection_Area	vadd.c	/^boolean VADD_Is_Within_Intersection_Area(parameter_t *param, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, intersection_area_type_t *intersection_area_type, int *tail_intersection_id, int *head_intersection_id)$/;"	f
VADD_Iterative_Forward_Packet_To_Next_Carrier_On_Road_Segment	vadd.c	/^int VADD_Iterative_Forward_Packet_To_Next_Carrier_On_Road_Segment(parameter_t *param, double current_time, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, forwarding_table_queue_t *FTQ, packet_delivery_statistics_t *packet_delivery_statistics)$/;"	f
VADD_Recompute_Forwarding_Probability	vadd.c	/^void VADD_Recompute_Forwarding_Probability(parameter_t *param, struct_graph_node *G, int G_size)$/;"	f
VADD_Update_VehicleTargetPoint_Along_With_EDD_And_EDD_SD_For_Download	vadd.c	/^void VADD_Update_VehicleTargetPoint_Along_With_EDD_And_EDD_SD_For_Download(double update_time, parameter_t *param, struct_vehicle_t *vehicle, forwarding_table_queue_t *FTQ, intersection_area_type_t input_intersection_area_type)$/;"	f
VADD_Update_Vehicle_EDD	vadd.c	/^double VADD_Update_Vehicle_EDD(double update_time, parameter_t *param, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, struct_traffic_table *ap_table)$/;"	f
VADD_Update_Vehicle_EDD_And_EDD_SD	vadd.c	/^void VADD_Update_Vehicle_EDD_And_EDD_SD(double update_time, parameter_t *param, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, struct_traffic_table *ap_table)$/;"	f
VADD_Update_Vehicle_EDD_And_EDD_SD_For_Download	vadd.c	/^void VADD_Update_Vehicle_EDD_And_EDD_SD_For_Download(double update_time, parameter_t *param, struct_vehicle_t *vehicle, forwarding_table_queue_t *FTQ)$/;"	f
VADD_Update_Vehicle_EDD_And_EDD_SD_For_Download_With_Given_TargetPoint_And_SequenceNumber	vadd.c	/^void VADD_Update_Vehicle_EDD_And_EDD_SD_For_Download_With_Given_TargetPoint_And_SequenceNumber(double update_time, parameter_t *param, struct_vehicle_t *vehicle, forwarding_table_queue_t *FTQ, int target_point_id, unsigned int seq)$/;"	f
VADD_Update_Vehicle_EDD_And_EDD_SD_For_V2V_Data_Delivery	vadd.c	/^void VADD_Update_Vehicle_EDD_And_EDD_SD_For_V2V_Data_Delivery(double update_time, parameter_t *param, struct_vehicle_t *vehicle, struct_graph_node *G, int G_size, int source_intersection_id)$/;"	f
VADD_Vehicle_Density	vadd.h	27;"	d
VADD_Vehicle_Lambda_1	vadd.h	32;"	d
VADD_Vehicle_Lambda_2	vadd.h	38;"	d
VADD_Vehicle_Mean_Interarrival_Time	vadd.h	45;"	d
VANET_EDD_AND_LINK_MODEL_STBD_EDD_AND_STBD_LINK	param.h	/^  VANET_EDD_AND_LINK_MODEL_STBD_EDD_AND_STBD_LINK = 5 \/\/STBD EDD + STBD Link Model$/;"	e	enum:_vanet_edd_and_link_model_type_t
VANET_EDD_AND_LINK_MODEL_TBD_EDD_AND_TBD_LINK	param.h	/^  VANET_EDD_AND_LINK_MODEL_TBD_EDD_AND_TBD_LINK = 1, \/\/TBD EDD + TBD Link Model$/;"	e	enum:_vanet_edd_and_link_model_type_t
VANET_EDD_AND_LINK_MODEL_TBD_EDD_AND_VADD_LINK	param.h	/^  VANET_EDD_AND_LINK_MODEL_TBD_EDD_AND_VADD_LINK = 2, \/\/TBD EDD + VADD Link Model$/;"	e	enum:_vanet_edd_and_link_model_type_t
VANET_EDD_AND_LINK_MODEL_UNKNOWN	param.h	/^  VANET_EDD_AND_LINK_MODEL_UNKNOWN = 0, \/\/Unknown VANET EDD-Link Model$/;"	e	enum:_vanet_edd_and_link_model_type_t
VANET_EDD_AND_LINK_MODEL_VADD_EDD_AND_TBD_LINK	param.h	/^  VANET_EDD_AND_LINK_MODEL_VADD_EDD_AND_TBD_LINK = 4, \/\/VADD EDD + TBD Link Model$/;"	e	enum:_vanet_edd_and_link_model_type_t
VANET_EDD_AND_LINK_MODEL_VADD_EDD_AND_VADD_LINK	param.h	/^  VANET_EDD_AND_LINK_MODEL_VADD_EDD_AND_VADD_LINK = 3, \/\/VADD EDD + VADD Link Model$/;"	e	enum:_vanet_edd_and_link_model_type_t
VANET_EDD_BASED_ON_TBD_WITH_FULL_PATH	param.h	/^  VANET_EDD_BASED_ON_TBD_WITH_FULL_PATH = 1, \/\/EDD based on TBD with the path from the current position to the destination$/;"	e	enum:_vanet_tbd_edd_computation_type_t
VANET_EDD_BASED_ON_TBD_WITH_ONE_HOP_AHEAD	param.h	/^  VANET_EDD_BASED_ON_TBD_WITH_ONE_HOP_AHEAD = 3 \/\/EDD based on TBD with one-hop-ahead intersection$/;"	e	enum:_vanet_tbd_edd_computation_type_t
VANET_EDD_BASED_ON_TBD_WITH_PARTIAL_PATH	param.h	/^  VANET_EDD_BASED_ON_TBD_WITH_PARTIAL_PATH = 2, \/\/EDD based on TBD with the path from the current position to the first visisted AP$/;"	e	enum:_vanet_tbd_edd_computation_type_t
VANET_EDD_COMPUTATION_BASED_ON_SHORTEST_PATH_MODEL	param.h	/^  VANET_EDD_COMPUTATION_BASED_ON_SHORTEST_PATH_MODEL = 2 \/\/EDD computation based on the shortest path model$/;"	e	enum:_vanet_edd_computation_model_type_t
VANET_EDD_COMPUTATION_BASED_ON_STOCHASTIC_MODEL	param.h	/^  VANET_EDD_COMPUTATION_BASED_ON_STOCHASTIC_MODEL = 1, \/\/EDD computation based on the stochastic model$/;"	e	enum:_vanet_edd_computation_model_type_t
VANET_EDD_HYBRID_MODEL	param.h	/^  VANET_EDD_HYBRID_MODEL = 4 \/\/VANET Hybrid Model for EDD Computation that is the linear combination of Per-Vehicle EDD and Per-Intersection EDD; note that the weights of two EDDs for the linear combination are adjusted by the density of vehicular traffic in the given road network$/;"	e	enum:_vanet_edd_model_type_t
VANET_EDD_PER_INTERSECTION_MODEL	param.h	/^  VANET_EDD_PER_INTERSECTION_MODEL = 2, \/\/VANET Per-Intersection Model for EDD Computation: VADD Model$/;"	e	enum:_vanet_edd_model_type_t
VANET_EDD_PER_SNODE_MODEL	param.h	/^  VANET_EDD_PER_SNODE_MODEL = 3, \/\/VANET Per-Stationary-Node Model for EDD Computation: STBD Model$/;"	e	enum:_vanet_edd_model_type_t
VANET_EDD_PER_VEHICLE_MODEL	param.h	/^  VANET_EDD_PER_VEHICLE_MODEL = 1, \/\/VANET Per-Vehicle Model for EDD Computation: TBD Model$/;"	e	enum:_vanet_edd_model_type_t
VANET_EDD_UNKNOWN_COMPUTATION_MODEL	param.h	/^  VANET_EDD_UNKNOWN_COMPUTATION_MODEL = 0,$/;"	e	enum:_vanet_edd_computation_model_type_t
VANET_EDD_UNKNOWN_COMPUTATION_TYPE	param.h	/^  VANET_EDD_UNKNOWN_COMPUTATION_TYPE = 0,$/;"	e	enum:_vanet_tbd_edd_computation_type_t
VANET_EDD_UNKNOWN_MODEL	param.h	/^  VANET_EDD_UNKNOWN_MODEL = 0, \/\/Unknown VANET EDD Model$/;"	e	enum:_vanet_edd_model_type_t
VANET_EDD_UPDATE	common.h	/^	VANET_EDD_UPDATE = 14, \/* vanet edd update state: build or rebuild the EDD *\/ $/;"	e	enum:_STATE
VANET_EDGE_DELAY_TBD_MODEL_FOR_FINITE_ROAD	param.h	/^  VANET_EDGE_DELAY_TBD_MODEL_FOR_FINITE_ROAD = 1, \/\/VANET TBD Model for Edge Delay Computation$/;"	e	enum:_vanet_edge_delay_model_type_t
VANET_EDGE_DELAY_TBD_MODEL_FOR_INFINITE_ROAD	param.h	/^  VANET_EDGE_DELAY_TBD_MODEL_FOR_INFINITE_ROAD = 2, \/\/VANET TBD Model for Edge Delay Computation for Infinite Road$/;"	e	enum:_vanet_edge_delay_model_type_t
VANET_EDGE_DELAY_TSF_MODEL	param.h	/^  VANET_EDGE_DELAY_TSF_MODEL = 4 \/\/VANET TSF Model for Edge Delay Computation$/;"	e	enum:_vanet_edge_delay_model_type_t
VANET_EDGE_DELAY_UNKNOWN_MODEL	param.h	/^  VANET_EDGE_DELAY_UNKNOWN_MODEL = 0, \/\/Unknown VANET Edge Delay Model$/;"	e	enum:_vanet_edge_delay_model_type_t
VANET_EDGE_DELAY_VADD_MODEL	param.h	/^  VANET_EDGE_DELAY_VADD_MODEL = 3, \/\/VANET VADD Model for Edge Delay Computation$/;"	e	enum:_vanet_edge_delay_model_type_t
VANET_FILE_SUFFIX	common.h	386;"	d
VANET_FILE_SUFFIX	common.h	495;"	d
VANET_FORWARDING_BASED_ON_CONVOY	param.h	/^  VANET_FORWARDING_BASED_ON_CONVOY = 2   \/\/VANET forwarding based on convoy$/;"	e	enum:_vanet_forwarding_type_t
VANET_FORWARDING_BASED_ON_VEHICLE	param.h	/^  VANET_FORWARDING_BASED_ON_VEHICLE = 1, \/\/VANET forwarding based on individual vehicle$/;"	e	enum:_vanet_forwarding_type_t
VANET_FORWARDING_EPIDEMIC	param.h	/^  VANET_FORWARDING_EPIDEMIC = 4, \/\/Epidemic Routing$/;"	e	enum:_vanet_forwarding_scheme_t
VANET_FORWARDING_TBD	param.h	/^  VANET_FORWARDING_TBD = 2,  \/\/TBD$/;"	e	enum:_vanet_forwarding_scheme_t
VANET_FORWARDING_TMA	param.h	/^  VANET_FORWARDING_TMA = 6   \/\/TMA$/;"	e	enum:_vanet_forwarding_scheme_t
VANET_FORWARDING_TPD	param.h	/^  VANET_FORWARDING_TPD = 3,  \/\/TPD$/;"	e	enum:_vanet_forwarding_scheme_t
VANET_FORWARDING_TSF	param.h	/^  VANET_FORWARDING_TSF = 5,  \/\/TSF$/;"	e	enum:_vanet_forwarding_scheme_t
VANET_FORWARDING_UNKNOWN	param.h	/^  VANET_FORWARDING_UNKNOWN = 0, \/\/unknown vanet forwarding scheme$/;"	e	enum:_vanet_forwarding_scheme_t
VANET_FORWARDING_UNKNOWN_TYPE	param.h	/^  VANET_FORWARDING_UNKNOWN_TYPE = 0,$/;"	e	enum:_vanet_forwarding_type_t
VANET_FORWARDING_VADD	param.h	/^  VANET_FORWARDING_VADD = 1, \/\/VADD$/;"	e	enum:_vanet_forwarding_scheme_t
VANET_INTERSECTION_FORWARDING_DEFERRED_FORWARDING	param.h	/^  VANET_INTERSECTION_FORWARDING_DEFERRED_FORWARDING = 1, \/\/VANET Deferred forwarding at intersection$/;"	e	enum:_vanet_intersection_forwarding_type_t
VANET_INTERSECTION_FORWARDING_EAGER_FORWARDING	param.h	/^  VANET_INTERSECTION_FORWARDING_EAGER_FORWARDING = 2   \/\/VANET Eager forwarding at intersection$/;"	e	enum:_vanet_intersection_forwarding_type_t
VANET_INTERSECTION_FORWARDING_UNKNOWN_TYPE	param.h	/^  VANET_INTERSECTION_FORWARDING_UNKNOWN_TYPE = 0,$/;"	e	enum:_vanet_intersection_forwarding_type_t
VANET_LOG_PACKET_AP_ARRIVAL	common.h	/^	VANET_LOG_PACKET_AP_ARRIVAL = 1, \/* packet has successfully reached one of Internet access points *\/$/;"	e	enum:_VANET_LOG_TYPE
VANET_LOG_PACKET_DESTINATION_VEHICLE_ARRIVAL	common.h	/^	VANET_LOG_PACKET_DESTINATION_VEHICLE_ARRIVAL = 2, \/* packet has successfully reached one of destination vehicles *\/$/;"	e	enum:_VANET_LOG_TYPE
VANET_LOG_PACKET_DROP	common.h	/^	VANET_LOG_PACKET_DROP = 3 \/* packet has been dropped by the expiration of its TTL *\/$/;"	e	enum:_VANET_LOG_TYPE
VANET_LOG_TYPE	common.h	/^} VANET_LOG_TYPE;$/;"	t	typeref:enum:_VANET_LOG_TYPE
VANET_LOG_UNKNOWN	common.h	/^	VANET_LOG_UNKNOWN = 0,$/;"	e	enum:_VANET_LOG_TYPE
VANET_METRIC_EDD	param.h	/^  VANET_METRIC_EDD = 1, \/\/EDD: Expected E2E Delivery Delay$/;"	e	enum:_vanet_metric_type_t
VANET_METRIC_EDD_VAR	param.h	/^  VANET_METRIC_EDD_VAR = 2 \/\/EDD_VAR: E2E Delivery Delay Variance$/;"	e	enum:_vanet_metric_type_t
VANET_METRIC_UNKNOWN	param.h	/^  VANET_METRIC_UNKNOWN = 0, \/\/unknown vanet node type$/;"	e	enum:_vanet_metric_type_t
VANET_NODE_AP	common.h	/^  VANET_NODE_AP = 1, \/\/access point$/;"	e	enum:_vanet_node_type_t
VANET_NODE_SNODE	common.h	/^  VANET_NODE_SNODE = 3 \/\/stationary node for packet buffer at intersection$/;"	e	enum:_vanet_node_type_t
VANET_NODE_UNKNOWN	common.h	/^  VANET_NODE_UNKNOWN = 0, \/\/unknown vanet node type$/;"	e	enum:_vanet_node_type_t
VANET_NODE_VEHICLE	common.h	/^  VANET_NODE_VEHICLE = 2, \/\/vehicle$/;"	e	enum:_vanet_node_type_t
VANET_PACKET_CARRIER_TRACE_FILE_SUFFIX	common.h	389;"	d
VANET_PACKET_CARRIER_TRACE_FILE_SUFFIX	common.h	498;"	d
VANET_TARGET_POINT_COMPUTATION_METHOD_END_INTERSECTION	param.h	/^  VANET_TARGET_POINT_COMPUTATION_METHOD_END_INTERSECTION = 2, \/\/target point computation method to choose the destination's end intersection in the vehicle trajectory as target point$/;"	e	enum:_vanet_target_point_computation_method_t
VANET_TARGET_POINT_COMPUTATION_METHOD_HEADING_INTERSECTION	param.h	/^  VANET_TARGET_POINT_COMPUTATION_METHOD_HEADING_INTERSECTION = 8 \/\/target point computation method to choose the destination's heading intersection as target point$/;"	e	enum:_vanet_target_point_computation_method_t
VANET_TARGET_POINT_COMPUTATION_METHOD_OPTIMAL_INTERSECTION	param.h	/^  VANET_TARGET_POINT_COMPUTATION_METHOD_OPTIMAL_INTERSECTION = 6, \/\/target point computation method for an optimal target point $/;"	e	enum:_vanet_target_point_computation_method_t
VANET_TARGET_POINT_COMPUTATION_METHOD_PACKET_EARLIEST_ARRIVING_INTERSECTION	param.h	/^  VANET_TARGET_POINT_COMPUTATION_METHOD_PACKET_EARLIEST_ARRIVING_INTERSECTION = 7, \/\/target point computation method for a target point to choose an intersection where the packet arrives at the intersection earlier than the destination vehicle with the smallest EDD$/;"	e	enum:_vanet_target_point_computation_method_t
VANET_TARGET_POINT_COMPUTATION_METHOD_PACKET_TRAJECTORY_FULLY_DYNAMIC_FORWARDING	param.h	/^  VANET_TARGET_POINT_COMPUTATION_METHOD_PACKET_TRAJECTORY_FULLY_DYNAMIC_FORWARDING = 5, \/\/target point computation method for an optimal target point, based on the packet trajectory with the fully dynamic forwarding through stationary nodes$/;"	e	enum:_vanet_target_point_computation_method_t
VANET_TARGET_POINT_COMPUTATION_METHOD_PACKET_TRAJECTORY_PARTIALLY_DYNAMIC_FORWARDING	param.h	/^  VANET_TARGET_POINT_COMPUTATION_METHOD_PACKET_TRAJECTORY_PARTIALLY_DYNAMIC_FORWARDING = 1, \/\/target point computation method for an optimal target point, based on the packet trajectory with the partially dynamic forwarding through stationary nodes$/;"	e	enum:_vanet_target_point_computation_method_t
VANET_TARGET_POINT_COMPUTATION_METHOD_PACKET_TRAJECTORY_STATIC_FORWARDING	param.h	/^  VANET_TARGET_POINT_COMPUTATION_METHOD_PACKET_TRAJECTORY_STATIC_FORWARDING = 4, \/\/target point computation method for an optimal target point, based on the packet trajectory with the static forwarding through stationary nodes$/;"	e	enum:_vanet_target_point_computation_method_t
VANET_TARGET_POINT_COMPUTATION_METHOD_RANDOM_INTERSECTION	param.h	/^  VANET_TARGET_POINT_COMPUTATION_METHOD_RANDOM_INTERSECTION = 3, \/\/target point computation method to choose a random intersection among the intersections on the destination vehicle trajectory$/;"	e	enum:_vanet_target_point_computation_method_t
VANET_TARGET_POINT_COMPUTATION_METHOD_UNKNOWN	param.h	/^  VANET_TARGET_POINT_COMPUTATION_METHOD_UNKNOWN = 0,$/;"	e	enum:_vanet_target_point_computation_method_t
VANET_TARGET_POINT_OPTIMIZATION_FUNCTION_EAD_WITH_CONSTRAINT_1	param.h	/^  VANET_TARGET_POINT_OPTIMIZATION_FUNCTION_EAD_WITH_CONSTRAINT_1 = 2, \/\/EAD satisfying the constraint 1 that EDD + c*EDD_SD <= EAD - c*EAD_SD <===> EAD - EDD >= c*EAD_SD + c*EDD_SD, where c is the coefficient for delay deviation width$/;"	e	enum:_vanet_target_point_optimization_function_type_t
VANET_TARGET_POINT_OPTIMIZATION_FUNCTION_EAD_WITH_CONSTRAINT_2	param.h	/^  VANET_TARGET_POINT_OPTIMIZATION_FUNCTION_EAD_WITH_CONSTRAINT_2 = 3 \/\/EAD satisfying the constraint 2 that P(DD > AD) <= epsilon <===> P(DD <= AD) >= 1 - epsilon, where epsilon is missing probability threshold $/;"	e	enum:_vanet_target_point_optimization_function_type_t
VANET_TARGET_POINT_OPTIMIZATION_FUNCTION_EDD_AND_EAD_DIFFERENCE	param.h	/^  VANET_TARGET_POINT_OPTIMIZATION_FUNCTION_EDD_AND_EAD_DIFFERENCE = 1, \/\/difference of EDD and EAD$/;"	e	enum:_vanet_target_point_optimization_function_type_t
VANET_TARGET_POINT_OPTIMIZATION_FUNCTION_UNKNOWN	param.h	/^  VANET_TARGET_POINT_OPTIMIZATION_FUNCTION_UNKNOWN = 0,$/;"	e	enum:_vanet_target_point_optimization_function_type_t
VANET_TARGET_POINT_SEARCH_SPACE_UNKNOWN	param.h	/^  VANET_TARGET_POINT_SEARCH_SPACE_UNKNOWN = 0,$/;"	e	enum:_vanet_target_point_search_space_type_t
VANET_TARGET_POINT_SEARCH_SPACE_VALID_FULL_TRAJECTORY	param.h	/^  VANET_TARGET_POINT_SEARCH_SPACE_VALID_FULL_TRAJECTORY = 1, \/\/the search space is the valid full trajectory from the destination vehicle's current position to the trajectory end position$/;"	e	enum:_vanet_target_point_search_space_type_t
VANET_TARGET_POINT_SEARCH_SPACE_VALID_PARTIAL_TRAJECTORY	param.h	/^  VANET_TARGET_POINT_SEARCH_SPACE_VALID_PARTIAL_TRAJECTORY = 2 \/\/the search space is the valid partial trajectory from the destination vehicle's current position to the next target point candidate's position; the actual target point is selected to be closer to the destination vehicle during the packet delivery process. $/;"	e	enum:_vanet_target_point_search_space_type_t
VANET_TARGET_POINT_SELECTION_ADAPTIVE_TARGET_POINT	param.h	/^  VANET_TARGET_POINT_SELECTION_ADAPTIVE_TARGET_POINT = 6, \/\/adaptive target point selection that the intermediate vehicles on the destination vehicle trajectory recomputes a new target point$/;"	e	enum:_vanet_target_point_selection_type_t
VANET_TARGET_POINT_SELECTION_CONVERGENT_TARGET_POINT	param.h	/^  VANET_TARGET_POINT_SELECTION_CONVERGENT_TARGET_POINT = 3, \/\/convergent target point selection that the target point is getting closer to the destination vehicle$/;"	e	enum:_vanet_target_point_selection_type_t
VANET_TARGET_POINT_SELECTION_DYNAMIC_TARGET_POINT	param.h	/^  VANET_TARGET_POINT_SELECTION_DYNAMIC_TARGET_POINT = 7 \/\/dynamic target point selection that the intermediate vehicles recompute a new target point dynamically during the packet delivery$/;"	e	enum:_vanet_target_point_selection_type_t
VANET_TARGET_POINT_SELECTION_PACKET_TRAJECTORY_TARGET_POINT	param.h	/^  VANET_TARGET_POINT_SELECTION_PACKET_TRAJECTORY_TARGET_POINT = 1, \/\/optimal target point selection based on the packet trajectory with stationary nodes$/;"	e	enum:_vanet_target_point_selection_type_t
VANET_TARGET_POINT_SELECTION_PROGRESS_TARGET_POINT	param.h	/^  VANET_TARGET_POINT_SELECTION_PROGRESS_TARGET_POINT = 5, \/\/PROGRESS target point selection that the intermediate vehicles on the destination vehicle trajectory recomputes a new target point at an interval of EDD(tp(i))\/k where tp(i) is the current target point$/;"	e	enum:_vanet_target_point_selection_type_t
VANET_TARGET_POINT_SELECTION_REVERSE_PATH_TARGET_POINT	param.h	/^  VANET_TARGET_POINT_SELECTION_REVERSE_PATH_TARGET_POINT = 4, \/\/reverse target point selection that the target point is determined as an intersection from the reverse path on the destination vehicle's trajectory$/;"	e	enum:_vanet_target_point_selection_type_t
VANET_TARGET_POINT_SELECTION_STATIC_TARGET_POINT	param.h	/^  VANET_TARGET_POINT_SELECTION_STATIC_TARGET_POINT = 2, \/\/static target point selection that the target point is determined only by AP$/;"	e	enum:_vanet_target_point_selection_type_t
VANET_TARGET_POINT_SELECTION_UNKNOWN	param.h	/^  VANET_TARGET_POINT_SELECTION_UNKNOWN = 0,$/;"	e	enum:_vanet_target_point_selection_type_t
VANET_TYPE_1_STATISTICS_ROAD_GRAPH_FILE	common.h	440;"	d
VANET_TYPE_1_STATISTICS_ROAD_GRAPH_FILE	common.h	549;"	d
VANET_TYPE_2_STATISTICS_ROAD_GRAPH_FILE	common.h	443;"	d
VANET_TYPE_2_STATISTICS_ROAD_GRAPH_FILE	common.h	552;"	d
VANET_TYPE_3_STATISTICS_ROAD_GRAPH_FILE	common.h	446;"	d
VANET_TYPE_3_STATISTICS_ROAD_GRAPH_FILE	common.h	555;"	d
VANET_TYPE_4_STATISTICS_ROAD_GRAPH_FILE	common.h	449;"	d
VANET_TYPE_4_STATISTICS_ROAD_GRAPH_FILE	common.h	558;"	d
VANET_VEHICLE_TRAJECTORY_FULL	param.h	/^  VANET_VEHICLE_TRAJECTORY_FULL = 1, \/\/the full vehicle trajectory type$/;"	e	enum:_vanet_vehicle_trajectory_type_t
VANET_VEHICLE_TRAJECTORY_LENGTH_FINITE	param.h	/^  VANET_VEHICLE_TRAJECTORY_LENGTH_FINITE = 2 \/\/the finite vehicle trajectory length type$/;"	e	enum:_vanet_vehicle_trajectory_length_type_t
VANET_VEHICLE_TRAJECTORY_LENGTH_INFINITE	param.h	/^  VANET_VEHICLE_TRAJECTORY_LENGTH_INFINITE = 1, \/\/the infinite vehicle trajectory length type$/;"	e	enum:_vanet_vehicle_trajectory_length_type_t
VANET_VEHICLE_TRAJECTORY_LENGTH_UNKNOWN	param.h	/^  VANET_VEHICLE_TRAJECTORY_LENGTH_UNKNOWN = 0,$/;"	e	enum:_vanet_vehicle_trajectory_length_type_t
VANET_VEHICLE_TRAJECTORY_PARTIAL	param.h	/^  VANET_VEHICLE_TRAJECTORY_PARTIAL = 2 \/\/the partial vehicle trajectory type$/;"	e	enum:_vanet_vehicle_trajectory_type_t
VANET_VEHICLE_TRAJECTORY_UNKNOWN	param.h	/^  VANET_VEHICLE_TRAJECTORY_UNKNOWN = 0,$/;"	e	enum:_vanet_vehicle_trajectory_type_t
VANET_VEHICULAR_TRAFFIC_CLOSED_NETWORK	param.h	/^  VANET_VEHICULAR_TRAFFIC_CLOSED_NETWORK = 1, \/\/VANET Closed Network where vehicles arriving at sources move around the road network without leaving the road network$/;"	e	enum:_vanet_vehicular_traffic_model_type_t
VANET_VEHICULAR_TRAFFIC_OPEN_NETWORK	param.h	/^  VANET_VEHICULAR_TRAFFIC_OPEN_NETWORK = 2 \/\/VANET Open Network where vehicles arriving at sources leave the road network when they arrive at their destinations$/;"	e	enum:_vanet_vehicular_traffic_model_type_t
VANET_VEHICULAR_TRAFFIC_UNKNOWN_MODEL	param.h	/^  VANET_VEHICULAR_TRAFFIC_UNKNOWN_MODEL = 0, \/\/Unknown VANET Vehicular Traffic Model$/;"	e	enum:_vanet_vehicular_traffic_model_type_t
VEHICLE_ARRIVE	common.h	/^	VEHICLE_ARRIVE = 7,    \/* vehicle arrive state *\/$/;"	e	enum:_STATE
VEHICLE_CARRIER	vehicle-model.h	/^  VEHICLE_CARRIER = 1, \/\/carrier candidate vehicle$/;"	e	enum:_vehicle_type_t
VEHICLE_CHECK	common.h	/^	VEHICLE_CHECK = 8,     \/* vehicle check state *\/$/;"	e	enum:_STATE
VEHICLE_COUNT_MAX	main.c	44;"	d	file:
VEHICLE_CURRENT_PACKET_CARRIER	vehicle-model.h	/^  VEHICLE_CURRENT_PACKET_CARRIER = 2, \/\/current packet carrier vehicle $/;"	e	enum:_vehicle_type_t
VEHICLE_DESTINATION	vehicle-model.h	/^  VEHICLE_DESTINATION = 3 \/\/destination vehicle$/;"	e	enum:_vehicle_type_t
VEHICLE_DETECTED	common.h	/^	VEHICLE_DETECTED = 11, \/* vehicle detected state *\/$/;"	e	enum:_STATE
VEHICLE_ESCAPE	common.h	/^	VEHICLE_ESCAPE = 9,    \/* vehicle escape state *\/$/;"	e	enum:_STATE
VEHICLE_MAX_TURNING_ANGLE	common.h	287;"	d
VEHICLE_MOVE	common.h	/^	VEHICLE_MOVE = 10,      \/* vehicle move state *\/$/;"	e	enum:_STATE
VEHICLE_OUT_OF_INTERSECTION	common.h	/^	VEHICLE_OUT_OF_INTERSECTION = 13, \/* vehicle out-of-intersection state: out of the communication range from the intersection *\/$/;"	e	enum:_STATE
VEHICLE_PATH_DIRECTION_BACKWARD	vehicle-model.h	/^  VEHICLE_PATH_DIRECTION_BACKWARD = 2$/;"	e	enum:_vehicle_path_direction_t
VEHICLE_PATH_DIRECTION_FORWARD	vehicle-model.h	/^  VEHICLE_PATH_DIRECTION_FORWARD = 1,$/;"	e	enum:_vehicle_path_direction_t
VEHICLE_PATH_DIRECTION_UNKNOWN	vehicle-model.h	/^  VEHICLE_PATH_DIRECTION_UNKNOWN = 0,$/;"	e	enum:_vehicle_path_direction_t
VEHICLE_RESTART	common.h	/^	VEHICLE_RESTART = 12,  \/* vehicle restart state *\/$/;"	e	enum:_STATE
VEHICLE_ROLE_AP_VEHICLE	vehicle-model.h	/^  VEHICLE_ROLE_AP_VEHICLE = 1,    \/* AP vehicle that is guranteed to passes AP(s) *\/$/;"	e	enum:_vehicle_role_t
VEHICLE_ROLE_NON_AP_VEHICLE	vehicle-model.h	/^  VEHICLE_ROLE_NON_AP_VEHICLE = 2 \/* Non-AP vehicle that is not guranteed to pass AP(s) *\/$/;"	e	enum:_vehicle_role_t
VEHICLE_ROLE_UNKNOWN	vehicle-model.h	/^  VEHICLE_ROLE_UNKNOWN = 0,$/;"	e	enum:_vehicle_role_t
VEHICLE_STATIONARY_VEHICLE_SEND	common.h	/^	VEHICLE_STATIONARY_VEHICLE_SEND = 23,  \/* stationary-vehicle-send state where the stationary vehicle sends packets to moving vehicles *\/$/;"	e	enum:_STATE
VEHICLE_STATIONARY_VEHICLE_START	common.h	/^	VEHICLE_STATIONARY_VEHICLE_START = 22, \/* stationary-vehicle-start state where the stationary vehicle starts *\/$/;"	e	enum:_STATE
VEHICLE_TARGET_VEHICLE_RECEIVE	common.h	/^	VEHICLE_TARGET_VEHICLE_RECEIVE = 26, \/* state where a target vehicle receives a packet from packet carrier *\/$/;"	e	enum:_STATE
VEHICLE_TARGET_VEHICLE_RESTART	common.h	/^	VEHICLE_TARGET_VEHICLE_RESTART = 25, \/* state where a target vehicle restarts its movement according to its new vehicle trajectory *\/$/;"	e	enum:_STATE
VEHICLE_TARGET_VEHICLE_START	common.h	/^	VEHICLE_TARGET_VEHICLE_START = 24,   \/* state where a target vehicle starts its movement according to its vehicle trajectory *\/$/;"	e	enum:_STATE
VEHICLE_UNKNOWN	vehicle-model.h	/^  VEHICLE_UNKNOWN = 0, \/\/unknown vehicle$/;"	e	enum:_vehicle_type_t
VEHICLE_UPDATE	common.h	/^	VEHICLE_UPDATE = 100,   \/* vehicle's mobility update state *\/$/;"	e	enum:_STATE
VEHICLE_WHEELBASE	common.h	285;"	d
VEHICLE_ZERO_SPEED	common.h	293;"	d
VIRTUAL_NODE_NEIGHBOR_NAME	graph-data-struct.h	25;"	d
VIRTUAL_TOPOLOGY_FILE_SUFFIX_1	common.h	404;"	d
VIRTUAL_TOPOLOGY_FILE_SUFFIX_1	common.h	513;"	d
VIRTUAL_TOPOLOGY_FILE_SUFFIX_2	common.h	407;"	d
VIRTUAL_TOPOLOGY_FILE_SUFFIX_2	common.h	516;"	d
WEIGHT_DIFFERENCE_THRESHOLD	analysis.h	34;"	d
WIN32_LEAN_AND_MEAN	stdafx.h	17;"	d
Weight	apl-graph-matching.cc	/^Weight::Weight()$/;"	f	class:Weight
Weight	apl-graph-matching.cc	/^Weight::Weight(double weight)$/;"	f	class:Weight
Weight	apl-graph-matching.h	/^class Weight$/;"	c
Weight	shortest-path.c	/^double Weight(struct_graph_node *gnode, char *neighbor)$/;"	f
WeightComparator	apl-graph-matching.h	/^  WeightComparator(double threshold)$/;"	f	class:WeightComparator
WeightComparator	apl-graph-matching.h	/^class WeightComparator: public AttrComparator$/;"	c
WeightDestroyer	apl-graph-matching.cc	/^WeightDestroyer::WeightDestroyer()$/;"	f	class:WeightDestroyer
WeightDestroyer	apl-graph-matching.h	/^class WeightDestroyer: public AttrDestroyer$/;"	c
Wr_edc	param.h	/^	double **Wr_edc; \/\/the adjacency matrix of road network graph based on delivery cost mean$/;"	m	struct:_vanet_information_table_t
Wr_edc	queue.h	/^	double **Wr_edc; \/\/the adjacency matrix for edge cost from start-point to end-point$/;"	m	struct:_forwarding_table_queue_node_t
_CRT_SECURE_NO_DEPRECATE	stdafx.h	10;"	d
_DELAY_TYPE	common.h	/^typedef enum _DELAY_TYPE{$/;"	g
_GRAPH_NODE_ROLE	graph-data-struct.h	/^typedef enum _GRAPH_NODE_ROLE{$/;"	g
_GRAPH_NODE_TYPE	graph-data-struct.h	/^typedef enum _GRAPH_NODE_TYPE{$/;"	g
_MOVE_TYPE	common.h	/^typedef enum _MOVE_TYPE{$/;"	g
_SENSOR_TYPE	common.h	/^typedef enum _SENSOR_TYPE{$/;"	g
_STATE	common.h	/^typedef enum _STATE{$/;"	g
_TRACE_TYPE	common.h	/^typedef enum _TRACE_TYPE{$/;"	g
_USAGE_STATUS	graph-data-struct.h	/^typedef enum _USAGE_STATUS$/;"	g
_VANET_LOG_TYPE	common.h	/^typedef enum _VANET_LOG_TYPE{$/;"	g
__ACCESS_POINT_MODEL_H__	access-point-model.h	9;"	d
__ALL_PAIRS_SHORTEST_PATHS_H__	all-pairs-shortest-paths.h	9;"	d
__ANALYSIS_H__	analysis.h	8;"	d
__APL_GRAPH_MATCHING_H__	apl-graph-matching.h	9;"	d
__BOOLEAN__	graph-data-struct.h	100;"	d
__BOOLEAN__	param.h	30;"	d
__COMMON_H__	common.h	8;"	d
__DEBUG_INTERACTIVE_MODE__	common.h	96;"	d
__DEBUG_LEVEL_VANET_EDD_UPDATE__	common.h	132;"	d
__DEBUG_LEVEL_VANET_PACKET_CARRIER_TRACE_FOR_STATIONARY_NODE__	common.h	196;"	d
__DEBUG_LEVEL_VANET_PACKET_CARRIER_TRACE__	common.h	193;"	d
__EPIDEMIC_H__	epidemic.h	10;"	d
__GRAPH_DATA_STRUCT_H__	graph-data-struct.h	9;"	d
__GSL_LIBRARY_SUPPORT__	common.h	85;"	d
__GSL_UTIL_H__	gsl-util.h	8;"	d
__HEAP_H__	heap.h	9;"	d
__LINEAR_ALGEBRA_H__	linear-algebra.h	9;"	d
__LOG_LEVEL_SHOW_STATUS_OF_SENSORS_ON_PATH__	common.h	226;"	d
__LOG_LEVEL_TRACE_OF_SENSOR_NUMBER__	common.h	232;"	d
__LOG_LEVEL_TRACE_OF_SLEEPING_TIME__	common.h	238;"	d
__LOG_LEVEL_TRACE_OF_VEHICLE_DETECTION_TIME__	common.h	241;"	d
__MAIN_H__	main.h	9;"	d
__MATLAB_OPERATION_H__	matlab-operation.h	10;"	d
__MOBILITY_H__	mobility.h	10;"	d
__MST_H__	mst.h	9;"	d
__PACKET_MODEL_H__	packet-model.h	8;"	d
__PARAM_H__	param.h	8;"	d
__QUEUE_H__	queue.h	10;"	d
__QUICK_SORT_H__	quick-sort.h	9;"	d
__RANDOM_PATH_H__	random-path.h	10;"	d
__RAND_H__	rand.h	10;"	d
__SCHEDULE_H__	schedule.h	9;"	d
__SENSOR_MODEL_H__	sensor-model.h	8;"	d
__SHORTEST_PATH_H__	shortest-path.h	10;"	d
__SMPL_H__	smpl.h	7;"	d
__STDAFX_FOR_LINUX_H__	stdafx-for-linux.h	7;"	d
__TPD_H__	tpd.h	10;"	d
__UTIL_H__	util.h	8;"	d
__VADD_H__	vadd.h	10;"	d
__VEHICLE_MODEL_H__	vehicle-model.h	8;"	d
_access_point_queue_node_t	queue.h	/^typedef struct _access_point_queue_node_t$/;"	s
_access_point_queue_t	queue.h	/^typedef struct _access_point_queue_t {$/;"	s
_adjacency_list_pointer_queue_node_t	queue.h	/^typedef struct _adjacency_list_pointer_queue_node_t {$/;"	s
_adjacency_list_pointer_queue_t	queue.h	/^typedef struct _adjacency_list_pointer_queue_t {$/;"	s
_adjacency_list_queue_node_t	queue.h	/^typedef struct _adjacency_list_queue_node_t {$/;"	s
_adjacency_list_queue_t	queue.h	/^typedef struct _adjacency_list_queue_t {$/;"	s
_aggregation_type_t	param.h	/^typedef enum _aggregation_type_t$/;"	g
_angle_queue_node_t	queue.h	/^typedef struct _angle_queue_node_t {$/;"	s
_angle_queue_t	queue.h	/^typedef struct _angle_queue_t {$/;"	s
_boolean	graph-data-struct.h	/^typedef enum _boolean{$/;"	g
_boolean	param.h	/^typedef enum _boolean{$/;"	g
_carrier_trace_queue_node_t	queue.h	/^typedef struct _carrier_trace_queue_node_t {$/;"	s
_carrier_trace_queue_t	queue.h	/^typedef struct _carrier_trace_queue_t {$/;"	s
_cluster_type_t	queue.h	/^typedef enum _cluster_type_t {$/;"	g
_comparison_target_type_t	param.h	/^typedef  enum _comparison_target_type_t$/;"	g
_component_vertex_queue_node_t	queue.h	/^typedef struct _component_vertex_queue_node_t {$/;"	s
_component_vertex_queue_t	queue.h	/^typedef struct _component_vertex_queue_t {$/;"	s
_conditional_forwarding_probability_queue_node_t	queue.h	/^typedef struct _conditional_forwarding_probability_queue_node_t {$/;"	s
_conditional_forwarding_probability_queue_t	queue.h	/^typedef struct _conditional_forwarding_probability_queue_t {$/;"	s
_convoy_queue_node_t	queue.h	/^typedef struct _convoy_queue_node_t {$/;"	s
_convoy_queue_t	queue.h	/^typedef struct _convoy_queue_t {$/;"	s
_coordinate_directional_edge_type_t	graph-data-struct.h	/^typedef enum _coordinate_directional_edge_type_t{$/;"	g
_data_forwarding_link_selection_t	param.h	/^typedef enum _data_forwarding_link_selection_t$/;"	g
_data_forwarding_mode_t	param.h	/^typedef enum _data_forwarding_mode_t$/;"	g
_delay_component_queue_node_t	queue.h	/^typedef struct _delay_component_queue_node_t {$/;"	s
_delay_component_queue_t	queue.h	/^typedef struct _delay_component_queue_t {$/;"	s
_delay_queue_node_t	queue.h	/^typedef struct _delay_queue_node_t {$/;"	s
_delay_queue_t	queue.h	/^typedef struct _delay_queue_t {$/;"	s
_destination_vehicle_queue_node_t	queue.h	/^typedef struct _destination_vehicle_queue_node_t {$/;"	s
_destination_vehicle_queue_t	queue.h	/^typedef struct _destination_vehicle_queue_t {$/;"	s
_directional_edge_queue_node_t	queue.h	/^typedef struct _directional_edge_queue_node_t {$/;"	s
_directional_edge_queue_t	queue.h	/^typedef struct _directional_edge_queue_t {$/;"	s
_directional_edge_type_t	graph-data-struct.h	/^typedef enum _directional_edge_type_t$/;"	g
_distribution_type_t	param.h	/^typedef enum _distribution_type_t$/;"	g
_edge_queue_node_t	queue.h	/^typedef struct _edge_queue_node_t {$/;"	s
_edge_queue_t	queue.h	/^typedef struct _edge_queue_t {$/;"	s
_edge_set_queue_node_t	queue.h	/^typedef struct _edge_set_queue_node_t {$/;"	s
_edge_set_queue_t	queue.h	/^typedef struct _edge_set_queue_t {$/;"	s
_enum_edge_direction_t	schedule.h	/^typedef enum _enum_edge_direction_t {$/;"	g
_enum_endpoint_t	schedule.h	/^typedef enum _enum_endpoint_t {$/;"	g
_enum_segment_type_t	schedule.h	/^typedef enum _enum_segment_type_t {$/;"	g
_enum_status_t	schedule.h	/^typedef enum _enum_status_t {$/;"	g
_evaluation_type_t	param.h	/^typedef enum _evaluation_type_t$/;"	g
_forwarding_table_queue_node_t	queue.h	/^typedef struct _forwarding_table_queue_node_t {$/;"	s
_forwarding_table_queue_t	queue.h	/^typedef struct _forwarding_table_queue_t {$/;"	s
_global_packet_queue_node_t	queue.h	/^typedef struct _global_packet_queue_node_t {$/;"	s
_global_packet_queue_t	queue.h	/^typedef struct _global_packet_queue_t {$/;"	s
_hole_endpoint_queue_node_t	queue.h	/^typedef struct _hole_endpoint_queue_node_t {$/;"	s
_hole_endpoint_queue_t	queue.h	/^typedef struct _hole_endpoint_queue_t {$/;"	s
_hole_handling_algorithm_t	param.h	/^typedef enum _hole_handling_algorithm_t$/;"	g
_hole_handling_mode_t	param.h	/^typedef enum _hole_handling_mode_t$/;"	g
_hole_segment_queue_node_t	queue.h	/^typedef struct _hole_segment_queue_node_t {$/;"	s
_hole_segment_queue_t	queue.h	/^typedef struct _hole_segment_queue_t {$/;"	s
_intersection_area_type_t	common.h	/^typedef enum _intersection_area_type_t{$/;"	g
_intersection_edd_queue_node_t	queue.h	/^typedef struct _intersection_edd_queue_node_t {$/;"	s
_intersection_edd_queue_t	queue.h	/^typedef struct _intersection_edd_queue_t {$/;"	s
_length_unit_type_t	param.h	/^typedef enum _length_unit_type_t$/;"	g
_location_queue_node_t	queue.h	/^typedef struct _location_queue_node_t {$/;"	s
_location_queue_t	queue.h	/^typedef struct _location_queue_t {$/;"	s
_minimum_priority_queue_node_t	queue.h	/^typedef struct _minimum_priority_queue_node_t {$/;"	s
_minimum_priority_queue_t	queue.h	/^typedef struct _minimum_priority_queue_t {$/;"	s
_mobility_queue_node_t	queue.h	/^typedef struct _mobility_queue_node_t {$/;"	s
_mobility_queue_t	queue.h	/^typedef struct _mobility_queue_t {$/;"	s
_mobility_type_t	common.h	/^typedef enum _mobility_type_t$/;"	g
_neighbor_list_queue_node_t	queue.h	/^typedef struct _neighbor_list_queue_node_t {$/;"	s
_neighbor_list_queue_t	queue.h	/^typedef struct _neighbor_list_queue_t {$/;"	s
_packet_delivery_statistics_t	common.h	/^typedef struct _packet_delivery_statistics_t{$/;"	s
_packet_forwarding_tree_path_queue_node_t	queue.h	/^typedef struct _packet_forwarding_tree_path_queue_node_t {$/;"	s
_packet_forwarding_tree_path_queue_t	queue.h	/^typedef struct _packet_forwarding_tree_path_queue_t {$/;"	s
_packet_pointer_queue_node_t	queue.h	/^typedef struct _packet_pointer_queue_node_t {$/;"	s
_packet_pointer_queue_t	queue.h	/^typedef struct _packet_pointer_queue_t {$/;"	s
_packet_queue_node_t	queue.h	/^typedef struct _packet_queue_node_t {$/;"	s
_packet_queue_t	queue.h	/^typedef struct _packet_queue_t {$/;"	s
_packet_schedule_queue_node_t	queue.h	/^typedef struct _packet_schedule_queue_node_t {$/;"	s
_packet_schedule_queue_t	queue.h	/^typedef struct _packet_schedule_queue_t {$/;"	s
_packet_trajectory_queue_node_t	queue.h	/^typedef struct _packet_trajectory_queue_node_t {$/;"	s
_packet_trajectory_queue_t	queue.h	/^typedef struct _packet_trajectory_queue_t {$/;"	s
_parent_list_queue_node_t	queue.h	/^typedef struct _parent_list_queue_node_t {$/;"	s
_parent_list_queue_t	queue.h	/^typedef struct _parent_list_queue_t {$/;"	s
_path_queue_node_t	queue.h	/^typedef struct _path_queue_node_t {$/;"	s
_path_queue_t	queue.h	/^typedef struct _path_queue_t {$/;"	s
_performance_metric_type_t	param.h	/^typedef enum _performance_metric_type_t$/;"	g
_predicted_encounter_graph_t	queue.h	/^typedef struct _predicted_encounter_graph_t {$/;"	s
_prefilter_type_t	param.h	/^typedef enum _prefilter_type_t$/;"	g
_probability_and_statistics_queue_node_t	queue.h	/^typedef struct _probability_and_statistics_queue_node_t {$/;"	s
_probability_and_statistics_queue_t	queue.h	/^typedef struct _probability_and_statistics_queue_t {$/;"	s
_queue_node_object_type_t	queue.h	/^typedef enum _queue_node_object_type_t{$/;"	g
_queue_node_t	queue.h	/^typedef struct _queue_node_t {$/;"	s
_queue_t	queue.h	/^typedef struct _queue_t {$/;"	s
_queue_type_t	queue.h	/^typedef enum _queue_type_t {$/;"	g
_schedule_queue_node_t	queue.h	/^typedef struct _schedule_queue_node_t {$/;"	s
_schedule_queue_t	queue.h	/^typedef struct _schedule_queue_t {$/;"	s
_schedule_table_node_t	schedule.h	/^typedef struct _schedule_table_node_t {$/;"	s
_schedule_table_t	schedule.h	/^typedef struct _schedule_table_t {$/;"	s
_sensor_queue_node_t	queue.h	/^typedef struct _sensor_queue_node_t {$/;"	s
_sensor_queue_t	queue.h	/^typedef struct _sensor_queue_t {$/;"	s
_sensor_scan_type_t	param.h	/^typedef enum _sensor_scan_type_t$/;"	g
_sensor_schedule_mode_type_t	param.h	/^typedef enum _sensor_schedule_mode_type_t$/;"	g
_simulation_mode_type_t	param.h	/^typedef enum _simulation_mode_type_t$/;"	g
_simulation_run_type_t	param.h	/^typedef enum _simulation_run_type_t$/;"	g
_simulation_seed_type_t	param.h	/^typedef enum _simulation_seed_type_t$/;"	g
_stationary_node_queue_node_t	queue.h	/^typedef struct _stationary_node_queue_node_t {$/;"	s
_stationary_node_queue_t	queue.h	/^typedef struct _stationary_node_queue_t {$/;"	s
_struct_coordinate1_t	graph-data-struct.h	/^typedef struct _struct_coordinate1_t$/;"	s
_struct_coordinate2_t	graph-data-struct.h	/^typedef struct _struct_coordinate2_t$/;"	s
_struct_coordinate3_t	graph-data-struct.h	/^typedef struct _struct_coordinate3_t$/;"	s
_struct_graph_node	graph-data-struct.h	/^typedef struct _struct_graph_node$/;"	s
_struct_matlab_localization_result	matlab-operation.h	/^typedef struct _struct_matlab_localization_result$/;"	s
_struct_matlab_prefiltering_result	matlab-operation.h	/^typedef struct _struct_matlab_prefiltering_result$/;"	s
_struct_matlab_tracking_result	matlab-operation.h	/^typedef struct _struct_matlab_tracking_result$/;"	s
_struct_path_node	graph-data-struct.h	/^typedef struct _struct_path_node$/;"	s
_struct_path_table	graph-data-struct.h	/^typedef struct _struct_path_table$/;"	s
_struct_schedule_entry	graph-data-struct.h	/^typedef struct _struct_schedule_entry$/;"	s
_struct_schedule_table	graph-data-struct.h	/^typedef struct _struct_schedule_table$/;"	s
_struct_sensor_table	schedule.h	/^typedef struct _struct_sensor_table$/;"	s
_struct_set_node	graph-data-struct.h	/^typedef struct _struct_set_node$/;"	s
_struct_shortest_path_node	graph-data-struct.h	/^typedef struct _struct_shortest_path_node$/;"	s
_struct_traffic_node	graph-data-struct.h	/^typedef struct _struct_traffic_node$/;"	s
_struct_traffic_table	graph-data-struct.h	/^typedef struct _struct_traffic_table$/;"	s
_subedge_queue_node_t	queue.h	/^typedef struct _subedge_queue_node_t {$/;"	s
_subedge_queue_t	queue.h	/^typedef struct _subedge_queue_t {$/;"	s
_target_point_queue_node_t	queue.h	/^typedef struct _target_point_queue_node_t {$/;"	s
_target_point_queue_t	queue.h	/^typedef struct _target_point_queue_t {$/;"	s
_tpd_opt_params_t	gsl-util.h	/^typedef struct _tpd_opt_params_t $/;"	s
_vanet_edd_and_link_model_type_t	param.h	/^typedef enum _vanet_edd_and_link_model_type_t$/;"	g
_vanet_edd_computation_model_type_t	param.h	/^typedef enum _vanet_edd_computation_model_type_t$/;"	g
_vanet_edd_model_type_t	param.h	/^typedef enum _vanet_edd_model_type_t$/;"	g
_vanet_edge_delay_model_type_t	param.h	/^typedef enum _vanet_edge_delay_model_type_t$/;"	g
_vanet_forwarding_scheme_t	param.h	/^typedef enum _vanet_forwarding_scheme_t$/;"	g
_vanet_forwarding_type_t	param.h	/^typedef enum _vanet_forwarding_type_t$/;"	g
_vanet_information_table_t	param.h	/^typedef struct _vanet_information_table_t$/;"	s
_vanet_intersection_forwarding_type_t	param.h	/^typedef enum _vanet_intersection_forwarding_type_t$/;"	g
_vanet_metric_type_t	param.h	/^typedef enum _vanet_metric_type_t$/;"	g
_vanet_node_type_t	common.h	/^typedef enum _vanet_node_type_t$/;"	g
_vanet_opt_params_t	gsl-util.h	/^typedef struct _vanet_opt_params_t $/;"	s
_vanet_packet_forwarding_mode_t	param.h	/^typedef enum _vanet_packet_forwarding_mode_t$/;"	g
_vanet_target_point_computation_method_t	param.h	/^typedef enum _vanet_target_point_computation_method_t$/;"	g
_vanet_target_point_optimization_function_type_t	param.h	/^typedef enum _vanet_target_point_optimization_function_type_t$/;"	g
_vanet_target_point_search_space_type_t	param.h	/^typedef enum _vanet_target_point_search_space_type_t$/;"	g
_vanet_target_point_selection_type_t	param.h	/^typedef enum _vanet_target_point_selection_type_t$/;"	g
_vanet_tbd_edd_computation_type_t	param.h	/^typedef enum _vanet_tbd_edd_computation_type_t$/;"	g
_vanet_vehicle_trajectory_length_type_t	param.h	/^typedef enum _vanet_vehicle_trajectory_length_type_t$/;"	g
_vanet_vehicle_trajectory_type_t	param.h	/^typedef enum _vanet_vehicle_trajectory_type_t$/;"	g
_vanet_vehicular_traffic_model_type_t	param.h	/^typedef enum _vanet_vehicular_traffic_model_type_t$/;"	g
_vehicle_movement_queue_node_t	queue.h	/^typedef struct _vehicle_movement_queue_node_t {$/;"	s
_vehicle_movement_queue_t	queue.h	/^typedef struct _vehicle_movement_queue_t {$/;"	s
_vehicle_path_direction_t	vehicle-model.h	/^typedef enum _vehicle_path_direction_t$/;"	g
_vehicle_queue_node_t	queue.h	/^typedef struct _vehicle_queue_node_t {$/;"	s
_vehicle_queue_t	queue.h	/^typedef struct _vehicle_queue_t {$/;"	s
_vehicle_role_t	vehicle-model.h	/^typedef enum _vehicle_role_t$/;"	g
_vehicle_step_mode_type_t	param.h	/^typedef enum _vehicle_step_mode_type_t$/;"	g
_vehicle_trajectory_queue_node_t	queue.h	/^typedef struct _vehicle_trajectory_queue_node_t {$/;"	s
_vehicle_trajectory_queue_t	queue.h	/^typedef struct _vehicle_trajectory_queue_t {$/;"	s
_vehicle_type_t	vehicle-model.h	/^typedef enum _vehicle_type_t$/;"	g
_vertex_set_queue_node_t	queue.h	/^typedef struct _vertex_set_queue_node_t {$/;"	s
_vertex_set_queue_t	queue.h	/^typedef struct _vertex_set_queue_t {$/;"	s
acceleration	vehicle-model.h	/^    double acceleration; \/* speed acceleration *\/$/;"	m	struct:struct_vehicle
access_point_queue_node_t	queue.h	/^} access_point_queue_node_t;$/;"	t	typeref:struct:_access_point_queue_node_t
access_point_queue_t	queue.h	/^} access_point_queue_t;$/;"	t	typeref:struct:_access_point_queue_t
acl_convoy_area	queue.h	/^        double acl_convoy_area; \/\/the accumulated area for ACL during the new convoy's duration$/;"	m	struct:_directional_edge_queue_node_t
acl_convoy_duration	queue.h	/^        double acl_convoy_duration; \/\/the new convoy's duration; that is, the time difference of convoy end time and convoy start time$/;"	m	struct:_directional_edge_queue_node_t
acl_convoy_end_length	queue.h	/^        double acl_convoy_end_length; \/\/end-length of a convoy$/;"	m	struct:_directional_edge_queue_node_t
acl_convoy_end_time	queue.h	/^        double acl_convoy_end_time; \/\/end-time of a convoy$/;"	m	struct:_directional_edge_queue_node_t
acl_convoy_head_arrival_time	queue.h	/^        double acl_convoy_head_arrival_time; \/\/arrival time of the convoy head vehicle at the edge$/;"	m	struct:_directional_edge_queue_node_t
acl_convoy_head_departure_time	queue.h	/^        double acl_convoy_head_departure_time; \/\/departure time of the convoy head vehicle from the edge$/;"	m	struct:_directional_edge_queue_node_t
acl_convoy_head_vehicle	queue.h	/^        struct_vehicle_t *acl_convoy_head_vehicle; \/\/vehicle id corresponding to the convoy head$/;"	m	struct:_directional_edge_queue_node_t
acl_convoy_rectangle_height	queue.h	/^        double acl_convoy_rectangle_height; \/\/the convoy length when a new convoy starts$/;"	m	struct:_directional_edge_queue_node_t
acl_convoy_start_length	queue.h	/^        double acl_convoy_start_length; \/\/start-length of a convoy$/;"	m	struct:_directional_edge_queue_node_t
acl_convoy_start_time	queue.h	/^        double acl_convoy_start_time; \/\/start-time of a convoy$/;"	m	struct:_directional_edge_queue_node_t
acl_convoy_tail_arrival_time	queue.h	/^        double acl_convoy_tail_arrival_time; \/\/arrival time of the convoy tail vehicle at the edge or the last vehicle arrival time at the edge$/;"	m	struct:_directional_edge_queue_node_t
acl_convoy_tail_departure_time	queue.h	/^        double acl_convoy_tail_departure_time; \/\/departure time of the convoy tail vehicle from the edge$/;"	m	struct:_directional_edge_queue_node_t
acl_convoy_tail_vehicle	queue.h	/^        struct_vehicle_t *acl_convoy_tail_vehicle; \/\/vehicle id arriving last$/;"	m	struct:_directional_edge_queue_node_t
acl_convoy_threshold	queue.h	/^        double acl_convoy_threshold; \/\/the time that a convoy is disconnected from the intersection, that is, param->communication_range\/param->vehicle_speed$/;"	m	struct:_directional_edge_queue_node_t
acl_convoy_triangle_height	queue.h	/^        double acl_convoy_triangle_height; \/\/the increased convoy length after a new convoy starts$/;"	m	struct:_directional_edge_queue_node_t
acl_convoy_vehicle_number	queue.h	/^        int acl_convoy_vehicle_number; \/\/number of vehicles consisting of a convoy from the tail node$/;"	m	struct:_directional_edge_queue_node_t
acl_interarrival_time	queue.h	/^        double acl_interarrival_time; \/\/interarrival time of two consecutive vehicles$/;"	m	struct:_directional_edge_queue_node_t
acl_measurement_end_time	queue.h	/^        double acl_measurement_end_time; \/\/ACL measurement end time; that is, the time when the last sum of area happens during the simulation, which is updated every time the ACL area is summed$/;"	m	struct:_directional_edge_queue_node_t
acl_measurement_start_flag	queue.h	/^        boolean acl_measurement_start_flag; \/\/ACL measurement start flag to indicate that the first arrived vehicle has departed the directional edge, so the ACL measurement can start with the full pipeline of arriving vehicles on the directional edge.$/;"	m	struct:_directional_edge_queue_node_t
acl_measurement_start_time	queue.h	/^        double acl_measurement_start_time; \/\/ACL measurement start time; that is, the time when the first vehicle arrives at the head of the directional edge        $/;"	m	struct:_directional_edge_queue_node_t
acl_vehicle_arrival_number	queue.h	/^        int acl_vehicle_arrival_number; \/\/number of vehicle arrivals at the tail node$/;"	m	struct:_directional_edge_queue_node_t
actual_average_convoy_length	graph-data-struct.h	/^        double actual_average_convoy_length; \/\/measured average convoy length (ACL)$/;"	m	struct:_struct_graph_node
actual_delivery_delay	queue.h	/^        double actual_delivery_delay; \/* actual delivery delay from the packet source to the destination AP *\/$/;"	m	struct:_packet_queue_node_t
actual_delivery_delay_standard_deviation	queue.h	/^        double actual_delivery_delay_standard_deviation; \/* actual delivery delay's standard deviation that is computed by the absolute difference between expected_delivery_delay and actual_delivery_delay *\/$/;"	m	struct:_packet_queue_node_t
actual_delivery_delay_sum	common.h	/^  double actual_delivery_delay_sum; \/\/sum of actual packet delivery delay$/;"	m	struct:_packet_delivery_statistics_t
actual_delivery_time	packet-model.h	/^        double actual_delivery_time; \/* actual delivery time from the packet source to the destination AP *\/$/;"	m	struct:struct_packet
actual_dst_id	queue.h	/^        int actual_dst_id; \/* actual destination id, such as packet receiving AP *\/$/;"	m	struct:_packet_queue_node_t
actual_lifetime	queue.h	/^        double actual_lifetime; \/* actual lifetime when the packet is discarded *\/$/;"	m	struct:_packet_queue_node_t
actual_packet_transmission_number_sum	common.h	/^  int actual_packet_transmission_number_sum; \/\/sum of actual packet transmission numbers$/;"	m	struct:_packet_delivery_statistics_t
actual_vector_size	queue.h	/^	int actual_vector_size;$/;"	m	struct:_global_packet_queue_t
adjacency_list_pointer_queue_node_t	queue.h	/^} adjacency_list_pointer_queue_node_t;$/;"	t	typeref:struct:_adjacency_list_pointer_queue_node_t
adjacency_list_pointer_queue_t	queue.h	/^} adjacency_list_pointer_queue_t;$/;"	t	typeref:struct:_adjacency_list_pointer_queue_t
adjacency_list_queue_node_t	queue.h	/^} adjacency_list_queue_node_t;$/;"	t	typeref:struct:_adjacency_list_queue_node_t
adjacency_list_queue_t	queue.h	/^} adjacency_list_queue_t;$/;"	t	typeref:struct:_adjacency_list_queue_t
adjust_sensing_range	util.c	/^double adjust_sensing_range(double com_density, double sen_density, struct parameter* param)$/;"	f
adjust_sensor_energy_budget	util.c	/^boolean adjust_sensor_energy_budget(double current_time, struct_sensor_t *sensor_info)$/;"	f
aggregation_type_t	param.h	/^} aggregation_type_t;$/;"	t	typeref:enum:_aggregation_type_t
angle_queue	graph-data-struct.h	/^        struct _angle_queue_t *angle_queue; \/\/angle queue to enumerate the neighboring nodes in the increasing order of EDD$/;"	m	struct:_struct_graph_node	typeref:struct:_struct_graph_node::_angle_queue_t
angle_queue_node_t	queue.h	/^} angle_queue_node_t;$/;"	t	typeref:struct:_angle_queue_node_t
angle_queue_t	queue.h	/^} angle_queue_t;$/;"	t	typeref:struct:_angle_queue_t
ap_arrival_delay_sum	common.h	/^  double ap_arrival_delay_sum; \/\/sum of actual packet delivery delay on ap arrival$/;"	m	struct:_packet_delivery_statistics_t
ap_table_for_target_point	queue.h	/^    struct_traffic_table ap_table_for_target_point;  \/\/table for target points that are regarded as the virtual APs (i.e., geographic packet destination) in augmented graph Ga$/;"	m	struct:_access_point_queue_node_t
arrival_time	packet-model.h	/^	double arrival_time; \/* time when this packet has arrived at access point *\/$/;"	m	struct:struct_packet
arrival_time	queue.h	/^	double arrival_time;   \/\/time when the scan arrives at tail node$/;"	m	struct:_schedule_queue_node_t
arrival_time	queue.h	/^        double arrival_time;  \/\/vehicle arrival time at this edge$/;"	m	struct:_vehicle_movement_queue_node_t
arrival_time	queue.h	/^        double arrival_time; \/\/estimated arrival time of the destination vehicle$/;"	m	struct:_vehicle_trajectory_queue_node_t
arrival_time	queue.h	/^        double arrival_time; \/\/estimated arrival time of the intersection vehicle$/;"	m	struct:_packet_trajectory_queue_node_t
arrival_time	vehicle-model.h	/^    double arrival_time;    \/* time when it arrives at road network *\/$/;"	m	struct:struct_vehicle
arrival_time1	schedule.h	/^	double arrival_time1;   \/\/time when the first scan arrives at tail node$/;"	m	struct:_schedule_table_node_t
arrival_time2	schedule.h	/^	double arrival_time2;   \/\/time when the second scan arrives at head node$/;"	m	struct:_schedule_table_node_t
assert_memory	util.c	/^void assert_memory(void *memory)$/;"	f
average_forwarding_probability	queue.h	/^        double average_forwarding_probability;$/;"	m	struct:_probability_and_statistics_queue_node_t
avl	smpl.c	/^  avl,               \/* available element list header       *\/$/;"	v	file:
avn	smpl.c	/^  avn,               \/* next available namespace position   *\/$/;"	v	file:
binary_search_for_localization	analysis.c	/^int binary_search_for_localization(float *TIMESTAMP, int boundary_time, int start_index, int end_index)$/;"	f
birth_time	sensor-model.h	/^	double birth_time;   \/* birth time is when sensor starts working initially *\/$/;"	m	struct:struct_sensor
bitmap	queue.h	/^	boolean *bitmap; \/\/bitmap to tell whether the graph node for vehicle with vid (index+1) exists in the graph G$/;"	m	struct:_adjacency_list_queue_t
bitmap_gnodes	queue.h	/^	adjacency_list_queue_node_t **bitmap_gnodes; \/\/pointers to graph nodes for vehicles$/;"	m	struct:_adjacency_list_queue_t
bitmap_size	queue.h	/^	int bitmap_size; \/\/size of bitmap$/;"	m	struct:_adjacency_list_queue_t
blk	smpl.c	/^  blk,               \/* next available block index          *\/$/;"	v	file:
boolean	graph-data-struct.h	/^} boolean;$/;"	t	typeref:enum:_boolean
boolean	param.h	/^} boolean;$/;"	t	typeref:enum:_boolean
branch_probability	queue.h	/^        double branch_probability;$/;"	m	struct:_probability_and_statistics_queue_node_t
cancel	smpl.c	/^int cancel(int ev)$/;"	f
carrier_trace	queue.h	/^        carrier_trace_queue_t carrier_trace; \/* queue for this packet's carrier trace *\/$/;"	m	struct:_packet_queue_node_t
carrier_trace_queue_node_t	queue.h	/^} carrier_trace_queue_node_t;$/;"	t	typeref:struct:_carrier_trace_queue_node_t
carrier_trace_queue_t	queue.h	/^} carrier_trace_queue_t;$/;"	t	typeref:struct:_carrier_trace_queue_t
carrier_vehicle_gnode	queue.h	/^	adjacency_list_queue_node_t *carrier_vehicle_gnode; \/\/graph node for the current carrier vehicle$/;"	m	struct:_adjacency_list_queue_t
carrier_vnode	queue.h	/^        struct_vehicle_t *carrier_vnode; \/* pointer to carrier vehicle under both upload mode and download mode *\/$/;"	m	struct:_packet_queue_node_t
carrier_vnode	queue.h	/^        struct_vehicle_t *carrier_vnode; \/* pointer to packet carrier vehicle *\/$/;"	m	struct:_global_packet_queue_node_t
carry_dst_id	queue.h	/^        int carry_dst_id; \/* carrier destination id *\/$/;"	m	struct:_packet_queue_node_t
carry_dst_id	queue.h	/^        int carry_dst_id; \/\/carrier destination id$/;"	m	struct:_carrier_trace_queue_node_t
carry_src_id	queue.h	/^        int carry_src_id; \/* carrier source id *\/$/;"	m	struct:_packet_queue_node_t
carry_src_id	queue.h	/^        int carry_src_id; \/\/carrier source id$/;"	m	struct:_carrier_trace_queue_node_t
carry_vid	packet-model.h	/^        int carry_vid; \/* carry vehicle id *\/     $/;"	m	struct:struct_packet
cause	smpl.c	/^int cause(int *ev,int *tkn)$/;"	f
cid	queue.h	/^        int cid; \/\/convoy id$/;"	m	struct:_convoy_queue_node_t
clock	smpl.c	/^  clock,             \/* current simulation time             *\/$/;"	v	file:
close_localization_file	util.c	/^void close_localization_file()$/;"	f
close_path_list_file	util.c	/^void close_path_list_file()$/;"	f
close_surveillance_file	util.c	/^void close_surveillance_file()$/;"	f
close_trace_file	util.c	/^void close_trace_file(FILE *fp)$/;"	f
close_vanet_file	util.c	/^void close_vanet_file()$/;"	f
close_vanet_packet_carrier_trace_file	util.c	/^void close_vanet_packet_carrier_trace_file()$/;"	f
cluster_set	queue.h	/^	struct _vertex_set_queue_t *cluster_set; \/\/pointer to the cluster set$/;"	m	struct:_vertex_set_queue_node_t	typeref:struct:_vertex_set_queue_node_t::_vertex_set_queue_t
cluster_type	queue.h	/^	cluster_type_t cluster_type; \/\/cluster type$/;"	m	struct:_vertex_set_queue_node_t
cluster_type	queue.h	/^	cluster_type_t cluster_type; \/\/cluster type$/;"	m	struct:_vertex_set_queue_t
cluster_type_t	queue.h	/^} cluster_type_t;$/;"	t	typeref:enum:_cluster_type_t
com_density	sensor-model.h	/^	double com_density; \/* communication density *\/$/;"	m	struct:struct_sensor
combination	util.c	/^int combination(int n, int r)$/;"	f
combinations	util.c	/^void combinations(int v[], int start, int n, int k, int maxk)$/;"	f
combinations_for_target_points	util.c	/^void combinations_for_target_points(int v[], int w[], int start, int n, int k, int maxk, double p[], double d[], parameter_t *param, double current_time, char *AP_vertex, struct_vehicle_t *destination_vehicle, packet_queue_node_t *packet, forwarding_table_queue_t *FTQ, target_point_queue_t *global_TPQ)$/;"	f
communication_AP_maximum_number	param.h	/^        int communication_AP_maximum_number; \/\/maximum number of APs deployed into road network $/;"	m	struct:parameter
communication_AP_packet_generation_schedule_time	param.h	/^        double communication_AP_packet_generation_schedule_time; \/\/AP's packet generation start time$/;"	m	struct:parameter
communication_SN_maximum_number	param.h	/^        int communication_SN_maximum_number; \/\/maximum number of SNs deployed into road network $/;"	m	struct:parameter
communication_data_packet_size	param.h	/^        int communication_data_packet_size; \/\/data packet size: unit is byte$/;"	m	struct:parameter
communication_multiple_AP_flag	param.h	/^        boolean communication_multiple_AP_flag; \/\/flag to indicate that multiple APs are deployed in the road network$/;"	m	struct:parameter
communication_multiple_SN_flag	param.h	/^        boolean communication_multiple_SN_flag; \/\/flag to indicate that multiple Stationary Nodes (SNs) are deployed in the road network$/;"	m	struct:parameter
communication_one_hop_delay	param.h	/^        double communication_one_hop_delay; \/\/average one-hop packet transmission delay for the radio communication range: unit is second.$/;"	m	struct:parameter
communication_packet_delivery_probability_threshold	param.h	/^        double communication_packet_delivery_probability_threshold; \/\/the threshold of the packet delivery probability that the packet will arrive at the target point (i.e., target intersection) earlier than the destination vehicle$/;"	m	struct:parameter
communication_packet_hop_limit	param.h	/^		int communication_packet_hop_limit; \/\/packet hop limit to limit the number of packet copies that is usually used by Epidemic Routing for controlled broadcast$/;"	m	struct:parameter
communication_packet_interarrival_time	param.h	/^        double communication_packet_interarrival_time; \/\/packet interarrival time: unit is second$/;"	m	struct:parameter
communication_packet_interarrival_time_distribution	param.h	/^        distribution_type_t communication_packet_interarrival_time_distribution; \/\/packet interarrival time distribution$/;"	m	struct:parameter
communication_packet_interarrival_time_standard_deviation	param.h	/^        double communication_packet_interarrival_time_standard_deviation; \/\/standard deviation of packet interarrival time$/;"	m	struct:parameter
communication_packet_maximum_interarrival_time	param.h	/^        double communication_packet_maximum_interarrival_time; \/\/packet maximum interarrival time$/;"	m	struct:parameter
communication_packet_maximum_interarrival_time_factor	param.h	/^        double communication_packet_maximum_interarrival_time_factor; \/\/factor for packet maximum interarrival time$/;"	m	struct:parameter
communication_packet_maximum_number	param.h	/^        int communication_packet_maximum_number; \/\/maximum number of generated packets$/;"	m	struct:parameter
communication_packet_reverse_traversal_hop_distance_threshold	param.h	/^        int communication_packet_reverse_traversal_hop_distance_threshold; \/\/the threshold of the hop distance from the packet and the destination vehicle on the destination vehicle's trajectory in order to determine the packet reverse traversal$/;"	m	struct:parameter
communication_packet_ttl	param.h	/^        double communication_packet_ttl; \/\/packet TTL (i.e., lifetime): unit is second$/;"	m	struct:parameter
communication_packet_ttl_override_flag	param.h	/^        double communication_packet_ttl_override_flag; \/\/packet TTL override flag to indicate whether the TTL can be replaced with the vehicle trajectory travel time$/;"	m	struct:parameter
communication_range	param.h	/^        double communication_range; \/\/communication range between the vehicles or the vehicles and access points$/;"	m	struct:parameter
comparison_target_type	param.h	/^        comparison_target_type_t comparison_target_type;$/;"	m	struct:parameter
comparison_target_type_t	param.h	/^} comparison_target_type_t;$/;"	t	typeref:enum:_comparison_target_type_t
compatible	apl-graph-matching.cc	/^bool WeightComparator::compatible(void *pa, void *pb)$/;"	f	class:WeightComparator
component_vertex_queue_node_t	queue.h	/^} component_vertex_queue_node_t;$/;"	t	typeref:struct:_component_vertex_queue_node_t
component_vertex_queue_t	queue.h	/^} component_vertex_queue_t;$/;"	t	typeref:struct:_component_vertex_queue_t
compute_arrival_time_mean_and_standard_deviation_for_path_node	util.c	/^boolean compute_arrival_time_mean_and_standard_deviation_for_path_node(double arrival_time,$/;"	f
compute_arrival_time_mean_and_standard_deviation_for_path_node_by_vehicle_actual_speed	util.c	/^boolean compute_arrival_time_mean_and_standard_deviation_for_path_node_by_vehicle_actual_speed(double arrival_time,$/;"	f
compute_delivery_probability_along_with_delivery_delay_for_target_point	util.c	/^double compute_delivery_probability_along_with_delivery_delay_for_target_point(int target_point_id, parameter_t *param, double current_time, char *AP_vertex, struct_vehicle_t *destination_vehicle, forwarding_table_queue_t *FTQ, double *delivery_delay)$/;"	f
compute_localization_error_ratio	analysis.c	/^double compute_localization_error_ratio(node_id roadnet_list[], int roadnet_list_size, node_id perm_list[], int perm_list_size)$/;"	f
conditional_forwarding_probability	queue.h	/^        double conditional_forwarding_probability; \/\/conditional forwarding probability$/;"	m	struct:_conditional_forwarding_probability_queue_node_t
conditional_forwarding_probability_queue	graph-data-struct.h	/^        struct _conditional_forwarding_probability_queue_t *conditional_forwarding_probability_queue; \/\/conditional forwarding probability queue that contains conditional forwarding probability queue nodes for the neighboring edges of the edge where this vertex is the head node$/;"	m	struct:_struct_graph_node	typeref:struct:_struct_graph_node::_conditional_forwarding_probability_queue_t
conditional_forwarding_probability_queue	queue.h	/^        conditional_forwarding_probability_queue_t conditional_forwarding_probability_queue;$/;"	m	struct:_probability_and_statistics_queue_node_t
conditional_forwarding_probability_queue_node_t	queue.h	/^} conditional_forwarding_probability_queue_node_t;$/;"	t	typeref:struct:_conditional_forwarding_probability_queue_node_t
conditional_forwarding_probability_queue_t	queue.h	/^} conditional_forwarding_probability_queue_t;$/;"	t	typeref:struct:_conditional_forwarding_probability_queue_t
contact_probability	queue.h	/^        double contact_probability;$/;"	m	struct:_probability_and_statistics_queue_node_t
convertDigraphToCoordinate	main.c	/^void convertDigraphToCoordinate(int head,int tail,double offset,double length)$/;"	f
convert_feet_to_meter	util.c	/^double convert_feet_to_meter(double feet)$/;"	f
convert_km_per_hour_to_meter_per_sec	util.c	/^double convert_km_per_hour_to_meter_per_sec(double speed_in_km_per_hour)$/;"	f
convert_km_per_hour_to_mile_per_hour	util.c	/^double convert_km_per_hour_to_mile_per_hour(double speed_in_km_per_hour)$/;"	f
convert_km_to_mile	util.c	/^double convert_km_to_mile(double km)$/;"	f
convert_meter_per_sec_to_km_per_hour	util.c	/^double convert_meter_per_sec_to_km_per_hour(double speed_in_meter_per_sec)$/;"	f
convert_meter_per_sec_to_mile_per_hour	util.c	/^double convert_meter_per_sec_to_mile_per_hour(double speed_in_meter_per_sec)$/;"	f
convert_meter_to_feet	util.c	/^double convert_meter_to_feet(double meter)$/;"	f
convert_meter_to_mile	util.c	/^double convert_meter_to_mile(double meter)$/;"	f
convert_mile_per_hour_to_km_per_hour	util.c	/^double convert_mile_per_hour_to_km_per_hour(double speed_in_mile_per_hour)$/;"	f
convert_mile_per_hour_to_meter_per_sec	util.c	/^double convert_mile_per_hour_to_meter_per_sec(double speed_in_mile_per_hour)$/;"	f
convert_mile_to_km	util.c	/^double convert_mile_to_km(double mile)$/;"	f
convert_mile_to_meter	util.c	/^double convert_mile_to_meter(double mile)$/;"	f
convoy_add_vehicle	util.c	/^convoy_queue_node_t* convoy_add_vehicle(parameter_t *param, convoy_queue_node_t *pConvoyNode, struct_vehicle_t *vehicle, double join_time, packet_delivery_statistics_t *packet_delivery_stat)$/;"	f
convoy_all_vehicle_join	util.c	/^void convoy_all_vehicle_join(parameter_t *param, double join_time, struct_graph_node *G, int G_size, packet_delivery_statistics_t *packet_delivery_stat)$/;"	f
convoy_construct	util.c	/^convoy_queue_node_t* convoy_construct(struct_vehicle_t *vehicle, double join_time)$/;"	f
convoy_construct_convoys_in_directional_edge	util.c	/^void convoy_construct_convoys_in_directional_edge(parameter_t *param, double join_time, vehicle_movement_queue_t *VQ, convoy_queue_t *CQ, packet_delivery_statistics_t *packet_delivery_stat)$/;"	f
convoy_construct_convoys_in_graph	util.c	/^void convoy_construct_convoys_in_graph(parameter_t *param, double join_time, struct_graph_node *G, int G_size, packet_delivery_statistics_t *packet_delivery_stat)$/;"	f
convoy_fast_join	util.c	/^boolean convoy_fast_join(parameter_t *param, double join_time, struct_vehicle_t *vehicle, convoy_queue_node_t *dst_convoy)$/;"	f
convoy_join	util.c	/^boolean convoy_join(parameter_t *param, struct_vehicle_t *vehicle, double join_time, packet_delivery_statistics_t *packet_delivery_stat)$/;"	f
convoy_join_time	vehicle-model.h	/^    double convoy_join_time; \/\/convoy join time$/;"	m	struct:struct_vehicle
convoy_leave	util.c	/^boolean convoy_leave(parameter_t *param, struct_vehicle_t *vehicle, double leave_time)$/;"	f
convoy_list	queue.h	/^        struct _convoy_queue_t convoy_list; \/\/convoy queue$/;"	m	struct:_directional_edge_queue_node_t	typeref:struct:_directional_edge_queue_node_t::_convoy_queue_t
convoy_merge	util.c	/^boolean convoy_merge(parameter_t *param, double merge_time, convoy_queue_node_t *src_convoy, convoy_queue_node_t *dst_convoy)$/;"	f
convoy_queue_node_t	queue.h	/^} convoy_queue_node_t;$/;"	t	typeref:struct:_convoy_queue_node_t
convoy_queue_t	queue.h	/^} convoy_queue_t;$/;"	t	typeref:struct:_convoy_queue_t
convoy_split	util.c	/^boolean convoy_split(parameter_t *param, double split_time, convoy_queue_node_t *src_convoy, struct_vehicle_t *vehicle)$/;"	f
convoy_update	util.c	/^boolean convoy_update(parameter_t *param, struct_vehicle_t *vehicle, double update_time)$/;"	f
coordinate	graph-data-struct.h	/^        struct_coordinate1_t coordinate; \/\/geographic coordinate in roadmap in the 2-D Cartesian coordinate system$/;"	m	struct:_struct_graph_node
coordinate	queue.h	/^    struct_coordinate1_t coordinate; \/* geographic coordinate in roadmap in the 2-D Cartesian coordinate system *\/$/;"	m	struct:_access_point_queue_node_t
coordinate_directional_edge_type_t	graph-data-struct.h	/^} coordinate_directional_edge_type_t;$/;"	t	typeref:enum:_coordinate_directional_edge_type_t
count	queue.h	/^	int count; \/\/usage count as intermediate node from src_vehicle to dst_vehicle$/;"	m	struct:_adjacency_list_queue_node_t
count_neighbor_sensors	util.c	/^int count_neighbor_sensors(double x, double y, struct struct_sensor* sensor_list, int sensor_number, double range)$/;"	f
create_vanet_information_table_in_parameter	param.c	/^void create_vanet_information_table_in_parameter(parameter_t *param, struct_graph_node *Gr, int Gr_size, double **Dr_move, int **Mr_move, int matrix_size_for_movement_in_Gr, int **Ar_edd, double **Dr_edd, int **Mr_edd, double **Sr_edd, int matrix_size_for_edd_in_Gr, double **Wr_edc, double **Dr_edc, int **Mr_edc, double **Sr_edc, int matrix_size_for_edc_in_Gr, struct _forwarding_table_queue_t *FTQ)$/;"	f
current_order	queue.h	/^        int current_order; \/\/the trajectory queue node in the current order to consider this time$/;"	m	struct:_vehicle_trajectory_queue_t
current_order_qnode	queue.h	/^        vehicle_trajectory_queue_node_t *current_order_qnode; \/\/pointer to the trajectory queue node in the current order$/;"	m	struct:_vehicle_trajectory_queue_t
current_packet_intersection_id	queue.h	/^        int current_packet_intersection_id; \/\/the packet's current intersection id$/;"	m	struct:_packet_trajectory_queue_t
current_packet_position	queue.h	/^        packet_trajectory_queue_node_t *current_packet_position; \/\/pointer to the packet trajectory queue node of the intersection corresponding to the tail node of the edge where packet is placed$/;"	m	struct:_packet_trajectory_queue_t
current_pos	vehicle-model.h	/^    struct_coordinate1_t current_pos; \/* current position in the Cartesian coordinate system (i.e., Euclidean space) *\/$/;"	m	struct:struct_vehicle
current_pos_in_Gr	vehicle-model.h	/^    struct_coordinate2_t current_pos_in_Gr; \/* current position in the graph coordinate system (i.e., edge id and relative location) in real graph Gr *\/$/;"	m	struct:struct_vehicle
current_pos_in_digraph	vehicle-model.h	/^    struct_coordinate3_t current_pos_in_digraph; \/* current position in the digraph for the road network *\/$/;"	m	struct:struct_vehicle
data_aggregation_type	param.h	/^	aggregation_type_t data_aggregation_type; \/\/data aggregation type$/;"	m	struct:parameter
data_aggregation_window_size	param.h	/^	int data_aggregation_window_size; \/\/data aggregation window$/;"	m	struct:parameter
data_aggregation_window_size_end	param.h	/^	int data_aggregation_window_size_end; \/\/end-value of data aggregation window$/;"	m	struct:parameter
data_aggregation_window_size_start	param.h	/^	int data_aggregation_window_size_start; \/\/start-value of data aggregation window$/;"	m	struct:parameter
data_aggregation_window_size_step	param.h	/^	int data_aggregation_window_size_step; \/\/stop-value of data aggregation window$/;"	m	struct:parameter
data_forwarding_link_selection	param.h	/^        data_forwarding_link_selection_t data_forwarding_link_selection; \/\/data forwarding link selection = {FORWARDING_LINK_SELECTION_ANGLE, FORWARDING_LINK_SELECTION_DISTANCE, FORWARDING_LINK_SELECTION_DELAY}$/;"	m	struct:parameter
data_forwarding_link_selection_t	param.h	/^} data_forwarding_link_selection_t;$/;"	t	typeref:enum:_data_forwarding_link_selection_t
data_forwarding_maximum_target_point_number	param.h	/^		int data_forwarding_maximum_target_point_number; \/\/maximum number of target points allowed for multi-target-point data forwarding$/;"	m	struct:parameter
data_forwarding_mode	param.h	/^        data_forwarding_mode_t data_forwarding_mode; \/\/data forwarding mode = {DATA_FORWARDING_MODE_DOWNLOAD, DATA_FORWARDING_MODE_UPLOAD}$/;"	m	struct:parameter
data_forwarding_mode	queue.h	/^        data_forwarding_mode_t data_forwarding_mode; \/* data forwarding mode: {DATA_FORWARDING_MODE_DOWNLOAD, DATA_FORWARDING_MODE_UPLOAD} *\/$/;"	m	struct:_packet_queue_node_t
data_forwarding_mode	queue.h	/^        data_forwarding_mode_t data_forwarding_mode; \/\/data forwarding mode = {DATA_FORWARDING_MODE_DOWNLOAD, DATA_FORWARDING_MODE_UPLOAD}$/;"	m	struct:_carrier_trace_queue_node_t
data_forwarding_mode_t	param.h	/^} data_forwarding_mode_t;$/;"	t	typeref:enum:_data_forwarding_mode_t
data_forwarding_multiple_target_point_flag	param.h	/^		boolean data_forwarding_multiple_target_point_flag; \/\/flag to determine whether to perform the data forwarding with multiple target points in order to satisfy the user-required delivery probability$/;"	m	struct:parameter
data_forwarding_two_way_forwarding_flag	param.h	/^		boolean data_forwarding_two_way_forwarding_flag; \/\/flag to indicate whether the data forwarding supports two-way forwarding or not $/;"	m	struct:parameter
data_measurement_time	param.h	/^	double data_measurement_time; \/\/measurement time for vehicle detections$/;"	m	struct:parameter
data_number_of_split_measurement_times	param.h	/^	int data_number_of_split_measurement_times; \/\/number of split measurement times$/;"	m	struct:parameter
data_prefilter_type	param.h	/^	prefilter_type_t data_prefilter_type; \/\/data prefilter type$/;"	m	struct:parameter
death_time	sensor-model.h	/^	double death_time;   \/* death time is when sensor stops sensing due to complete energy consumption *\/$/;"	m	struct:struct_sensor
degree2radian	util.c	/^double degree2radian(double degree)$/;"	f
delay_component_list	queue.h	/^        struct _delay_component_queue_t delay_component_list; \/\/queue for delay components of EDD$/;"	m	struct:_delay_queue_node_t	typeref:struct:_delay_queue_node_t::_delay_component_queue_t
delay_component_queue_node_t	queue.h	/^} delay_component_queue_node_t;$/;"	t	typeref:struct:_delay_component_queue_node_t
delay_component_queue_t	queue.h	/^} delay_component_queue_t;$/;"	t	typeref:struct:_delay_component_queue_t
delay_func	util.c	/^real delay_func(struct parameter *param, int type, ...)$/;"	f
delay_queue_node_t	queue.h	/^} delay_queue_node_t;$/;"	t	typeref:struct:_delay_queue_node_t
delay_queue_t	queue.h	/^} delay_queue_t;$/;"	t	typeref:struct:_delay_queue_t
delete_vehicle_movement	util.c	/^void delete_vehicle_movement(parameter_t *param, struct_vehicle_t* vehicle, double departure_time, struct_graph_node *G)$/;"	f
delivered_packet_number	common.h	/^  int delivered_packet_number; \/\/number of delivered packets$/;"	m	struct:_packet_delivery_statistics_t
delivery_delay	queue.h	/^	double delivery_delay; \/\/delivery delay from AP to target point$/;"	m	struct:_target_point_queue_node_t
delivery_delay_difference	queue.h	/^        double delivery_delay_difference; \/* delivery delay difference *\/$/;"	m	struct:_packet_queue_node_t
delivery_delay_difference_sum	common.h	/^  double delivery_delay_difference_sum; \/\/sum of the difference from the actual delivery delay to the expected delivery delay$/;"	m	struct:_packet_delivery_statistics_t
delivery_delay_second_moment	queue.h	/^        double delivery_delay_second_moment; \/\/E2E delivery delay's second_moment$/;"	m	struct:_delay_queue_node_t
delivery_delay_variance	queue.h	/^        double delivery_delay_variance; \/\/E2E delivery delay's variance$/;"	m	struct:_delay_queue_node_t
delivery_probability	queue.h	/^	double delivery_probability; \/\/delivery probability	$/;"	m	struct:_target_point_queue_node_t
delivery_success_probability	queue.h	/^	double delivery_success_probability; \/\/delivery success probability$/;"	m	struct:_target_point_queue_t
density	graph-data-struct.h	/^	double density; \/\/density of sensors deployed for unit distance$/;"	m	struct:_struct_graph_node
density	queue.h	/^	double density;             \/\/sensor density on the edge$/;"	m	struct:_edge_queue_node_t
density	schedule.h	/^	double density; \/\/density of sensors deployed for unit distance$/;"	m	struct:_schedule_table_node_t
departure_time	queue.h	/^	double departure_time; \/\/time when the scan leaves head node$/;"	m	struct:_schedule_queue_node_t
departure_time	queue.h	/^        double departure_time; \/\/vehicle departure time from this edge$/;"	m	struct:_vehicle_movement_queue_node_t
departure_time1	schedule.h	/^	double departure_time1; \/\/time when the first leaves head node$/;"	m	struct:_schedule_table_node_t
departure_time2	schedule.h	/^	double departure_time2; \/\/time when the second scan leaves tail node$/;"	m	struct:_schedule_table_node_t
destination_arrival_time	queue.h	/^		double destination_arrival_time; \/* time when this packet has arrived at the destination, such as access point or destination vehicle *\/$/;"	m	struct:_packet_queue_node_t
destination_vehicle_arrival_delay_sum	common.h	/^  double destination_vehicle_arrival_delay_sum; \/\/sum of actual packet delivery delay on vehicle arrival$/;"	m	struct:_packet_delivery_statistics_t
destination_vehicle_latest_passing_time	queue.h	/^    double destination_vehicle_latest_passing_time; \/\/the latest passing time of the destination vehicle through the intersection having this stationary node$/;"	m	struct:_stationary_node_queue_node_t
destination_vehicle_queue_node_t	queue.h	/^} destination_vehicle_queue_node_t;$/;"	t	typeref:struct:_destination_vehicle_queue_node_t
destination_vehicle_queue_t	queue.h	/^} destination_vehicle_queue_t;$/;"	t	typeref:struct:_destination_vehicle_queue_t
destroy	apl-graph-matching.cc	/^void WeightDestroyer::destroy(void *p)$/;"	f	class:WeightDestroyer
destroy_vanet_information_table_in_parameter	param.c	/^void destroy_vanet_information_table_in_parameter(parameter_t *param)$/;"	f
detecting_sensor	vehicle-model.h	/^    int detecting_sensor; \/* first detecting sensor's id*\/$/;"	m	struct:struct_vehicle
detection_missing_probability	sensor-model.h	/^        double detection_missing_probability; \/* sensor detection missing probability *\/$/;"	m	struct:struct_sensor
detection_time	vehicle-model.h	/^    double detection_time; \/* time detected by a sensor *\/$/;"	m	struct:struct_vehicle
direction	packet-model.h	/^	double direction; \/* movement direction: {DIRECTION_FORWARD, DIRECTION_BACKWARD} *\/$/;"	m	struct:struct_packet
direction	schedule.h	/^        enum_edge_direction_t direction; \/\/direction for the physical edge = {EDGE_DIRECTION_FORWARD, EDGE_DIRECTION_BACKWARD}$/;"	m	struct:_schedule_table_node_t
direction	vehicle-model.h	/^    double direction; \/* movement direction: unit is [radian] *\/$/;"	m	struct:struct_vehicle
directional_edge_queue_node_t	queue.h	/^} directional_edge_queue_node_t;$/;"	t	typeref:struct:_directional_edge_queue_node_t
directional_edge_queue_t	queue.h	/^} directional_edge_queue_t;$/;"	t	typeref:struct:_directional_edge_queue_t
directional_edge_type_t	graph-data-struct.h	/^} directional_edge_type_t;$/;"	t	typeref:enum:_directional_edge_type_t
discarded_packet_number	common.h	/^  int discarded_packet_number; \/\/number of discarded packets due to TTL expiration$/;"	m	struct:_packet_delivery_statistics_t
display	smpl.c	/^static FILE  *display,   \/* screen display file                 *\/$/;"	v	file:
dist	graph-data-struct.h	/^	double dist;$/;"	m	struct:_struct_shortest_path_node
dist	util.c	/^double dist(double x1, double x2)$/;"	f
dist_func	util.c	/^real dist_func(int type, ...)$/;"	f
distance	queue.h	/^        double distance; \/\/distance from packet source to this vertex$/;"	m	struct:_packet_trajectory_queue_node_t
distribution_type_t	param.h	/^} distribution_type_t;$/;"	t	typeref:enum:_distribution_type_t
divide_localization_data	analysis.c	/^void divide_localization_data(parameter_t *param, char *localization_file, char *output_file, int nodenum, char **TF, int *TF_number)$/;"	f
does_vehicle_convoy_have_packet	util.c	/^boolean does_vehicle_convoy_have_packet(struct_vehicle_t *vehicle, parameter_t *param)$/;"	f
does_vehicle_have_packet	util.c	/^boolean does_vehicle_have_packet(struct_vehicle_t *vehicle)$/;"	f
drand48	rand.h	19;"	d
dst_euclidean_pos	queue.h	/^        struct_coordinate1_t dst_euclidean_pos; \/\/destination vehicle's position in Euclidean space in the format of (x-coordinate, y-coordinate)  $/;"	m	struct:_carrier_trace_queue_node_t
dst_graph_pos	queue.h	/^        struct_coordinate3_t dst_graph_pos; \/\/destination vehicle's position in road network graph in the format of (eid, offset, enode)$/;"	m	struct:_carrier_trace_queue_node_t
dst_id	queue.h	/^        int dst_id; \/* packet destination id *\/$/;"	m	struct:_packet_queue_node_t
dst_node_type	queue.h	/^        vanet_node_type_t dst_node_type; \/* packet destination node type = {VANET_NODE_AP, VANET_NODE_VEHICLE} *\/$/;"	m	struct:_packet_queue_node_t
dst_vehicle_gnode	queue.h	/^	adjacency_list_queue_node_t *dst_vehicle_gnode; \/\/graph node for dst_vehicle$/;"	m	struct:_adjacency_list_queue_t
dst_vid	queue.h	/^        int dst_vid; \/\/destination vehicle id$/;"	m	struct:_carrier_trace_queue_node_t
dst_vnode	param.h	/^    struct struct_vehicle *dst_vnode; \/\/pointer to the destination vehicle under Download mode$/;"	m	struct:_vanet_information_table_t	typeref:struct:_vanet_information_table_t::struct_vehicle
dst_vnode	queue.h	/^        struct_vehicle_t *dst_vnode; \/* pointer to destination vehicle under download mode *\/$/;"	m	struct:_packet_queue_node_t
duplicate_detection_probability	sensor-model.h	/^	double duplicate_detection_probability; \/* sensor duplicate detection probability *\/$/;"	m	struct:struct_sensor
duty_cycle_number	sensor-model.h	/^	int duty_cycle_number; \/* the number of duty cycles (i.e. sleeping and sensing) that the sensor performed  *\/$/;"	m	struct:struct_sensor
edge_arrival_time	vehicle-model.h	/^    double edge_arrival_time;    \/* time when it arrives at an edge *\/$/;"	m	struct:struct_vehicle
edge_cost	graph-data-struct.h	/^        double edge_cost; \/\/edge cost on this edge$/;"	m	struct:_struct_graph_node
edge_cost	queue.h	/^		double edge_cost; \/\/link cost of the edge from the previous intersection node to this intersection node$/;"	m	struct:_packet_trajectory_queue_node_t
edge_cost_standard_deviation	graph-data-struct.h	/^        double edge_cost_standard_deviation; \/\/edge cost standard deviation$/;"	m	struct:_struct_graph_node
edge_cost_variance	graph-data-struct.h	/^        double edge_cost_variance; \/\/edge cost variance$/;"	m	struct:_struct_graph_node
edge_cost_variance	queue.h	/^		double edge_cost_variance; \/\/link cost variance of the edge$/;"	m	struct:_packet_trajectory_queue_node_t
edge_delay	graph-data-struct.h	/^        double edge_delay; \/\/edge delay consisting of forwarding delay and carry delay on this edge$/;"	m	struct:_struct_graph_node
edge_delay	queue.h	/^		double edge_delay; \/\/link delay of the edge from the previous intersection node to this intersection node$/;"	m	struct:_packet_trajectory_queue_node_t
edge_delay	queue.h	/^        double edge_delay; \/\/edge delay that a packet needs to be forwarded over this edge through both packet forwarding and vehicle carry$/;"	m	struct:_delay_queue_node_t
edge_delay_standard_deviation	graph-data-struct.h	/^        double edge_delay_standard_deviation; \/\/edge delay standard deviation$/;"	m	struct:_struct_graph_node
edge_delay_standard_deviation	queue.h	/^        double edge_delay_standard_deviation; \/\/edge delay standard deviation$/;"	m	struct:_delay_queue_node_t
edge_delay_variance	graph-data-struct.h	/^        double edge_delay_variance; \/\/edge delay variance$/;"	m	struct:_struct_graph_node
edge_delay_variance	queue.h	/^		double edge_delay_variance; \/\/link delay variance of the edge$/;"	m	struct:_packet_trajectory_queue_node_t
edge_delay_variance	queue.h	/^        double edge_delay_variance; \/\/edge delay variance$/;"	m	struct:_delay_queue_node_t
edge_departure_time	vehicle-model.h	/^    double edge_departure_time;    \/* time when it departs from an edge *\/$/;"	m	struct:struct_vehicle
edge_length	queue.h	/^		double edge_length; \/\/the length of the edge between the previous intersection node and this intersection node$/;"	m	struct:_packet_trajectory_queue_node_t
edge_length	queue.h	/^	double edge_length; \/\/length of encounter edge$/;"	m	struct:_neighbor_list_queue_node_t
edge_length	queue.h	/^	double edge_length; \/\/length of encounter edge$/;"	m	struct:_parent_list_queue_node_t
edge_length	vehicle-model.h	/^    double edge_length; \/* length of the edge where the vehicle is moving *\/$/;"	m	struct:struct_vehicle
edge_offset	queue.h	/^	double edge_offset; \/\/offset for encounter edge$/;"	m	struct:_neighbor_list_queue_node_t
edge_offset	queue.h	/^	double edge_offset; \/\/offset for encounter edge$/;"	m	struct:_parent_list_queue_node_t
edge_queue_entry	queue.h	/^	struct _edge_queue_node_t *edge_queue_entry; \/\/pointer to the edge queue entry containing the hole endpoint list for this hole endpoint queue node$/;"	m	struct:_hole_endpoint_queue_node_t	typeref:struct:_hole_endpoint_queue_node_t::_edge_queue_node_t
edge_queue_entry	queue.h	/^	struct _edge_queue_node_t *edge_queue_entry; \/\/pointer to the edge queue entry containing the subedge list for this subedge queue node$/;"	m	struct:_subedge_queue_node_t	typeref:struct:_subedge_queue_node_t::_edge_queue_node_t
edge_queue_node_t	queue.h	/^} edge_queue_node_t;$/;"	t	typeref:struct:_edge_queue_node_t
edge_queue_t	queue.h	/^} edge_queue_t;$/;"	t	typeref:struct:_edge_queue_t
edge_set_queue_node_t	queue.h	/^} edge_set_queue_node_t;$/;"	t	typeref:struct:_edge_set_queue_node_t
edge_set_queue_t	queue.h	/^} edge_set_queue_t;$/;"	t	typeref:struct:_edge_set_queue_t
edge_travel_delay	graph-data-struct.h	/^	double edge_travel_delay; \/\/the mean travel delay for the edge$/;"	m	struct:_struct_path_node
edge_travel_delay_standard_deviation	graph-data-struct.h	/^	double edge_travel_delay_standard_deviation; \/\/the travel delay standard deviation for the edge$/;"	m	struct:_struct_path_node
edge_value	queue.h	/^        double edge_value; \/\/edge value that is the constant term in the 2nd moment computation of the delivery delay for an edge$/;"	m	struct:_delay_queue_node_t
eid	graph-data-struct.h	/^	int eid;    \/* edge id of current position *\/$/;"	m	struct:_struct_coordinate2_t
eid	graph-data-struct.h	/^        int eid; \/\/edge id of current position$/;"	m	struct:_struct_coordinate3_t
eid	queue.h	/^	int eid;                    \/\/ID of edge (tail_node, head_node); this indicates the undirectional edge including two directional edges with the same end points of the edge$/;"	m	struct:_edge_queue_node_t
eid	queue.h	/^	int eid;                    \/\/ID of edge (tail_node, head_node); this indicates the undirectional edge including two directional edges with the same end points of the edge$/;"	m	struct:_subedge_queue_node_t
eid	queue.h	/^        int eid; \/\/directed edge id$/;"	m	struct:_probability_and_statistics_queue_node_t
eid	queue.h	/^        int eid; \/\/directed edge id$/;"	m	struct:_probability_and_statistics_queue_t
eid	queue.h	/^        int eid; \/\/directional edge id$/;"	m	struct:_convoy_queue_t
eid	queue.h	/^        int eid; \/\/directional edge's id$/;"	m	struct:_vehicle_movement_queue_t
eid	queue.h	/^        int eid; \/\/edge id of the virtual edge containing the hole segment having this hole endpoint$/;"	m	struct:_hole_endpoint_queue_node_t
eid	queue.h	/^        int eid; \/\/edge id$/;"	m	struct:_delay_component_queue_node_t
eid	queue.h	/^        int eid; \/\/edge id$/;"	m	struct:_delay_queue_node_t
eid	queue.h	/^        int eid; \/\/edge id$/;"	m	struct:_directional_edge_queue_node_t
eid	schedule.h	/^	int eid; \/\/edge id; this indicates the undirectional edge including two directional edges with the same end points of the edge$/;"	m	struct:_schedule_table_node_t
end_line	smpl.c	/^static void end_line()$/;"	f	file:
endpage	smpl.c	/^void endpage()$/;"	f
energy	sensor-model.h	/^	double energy; \/* remaining energy *\/$/;"	m	struct:struct_sensor
energy_consumption_rate	sensor-model.h	/^	double energy_consumption_rate; \/* energy_consumption_rate *\/$/;"	m	struct:struct_sensor
energy_directional_antenna	matlab-operation.h	/^	double energy_directional_antenna; \/\/energy cost by directional antenna for full Tx power$/;"	m	struct:_struct_matlab_tracking_result
energy_full_tx_power	matlab-operation.h	/^	double energy_full_tx_power; \/\/energy cost by full Tx power$/;"	m	struct:_struct_matlab_tracking_result
energy_tx_and_directional	matlab-operation.h	/^	double energy_tx_and_directional; \/\/energy cost by both tx power control and directional antenna for full Tx power$/;"	m	struct:_struct_matlab_tracking_result
energy_tx_power_control	matlab-operation.h	/^	double energy_tx_power_control; \/\/energy cost by tx power control for full Tx power$/;"	m	struct:_struct_matlab_tracking_result
enlist	smpl.c	/^static void enlist(int *head, int elm)$/;"	f	file:
enode	graph-data-struct.h	/^        struct _directional_edge_queue_node_t *enode; \/\/pointer to the directional edge queue node corresponding to eid$/;"	m	struct:_struct_coordinate3_t	typeref:struct:_struct_coordinate3_t::_directional_edge_queue_node_t
enode	queue.h	/^        struct _directional_edge_queue_node_t *enode; \/\/pointer to an edge node in directional edge queue corresponding to eid$/;"	m	struct:_delay_queue_node_t	typeref:struct:_delay_queue_node_t::_directional_edge_queue_node_t
enode	queue.h	/^        struct _directional_edge_queue_node_t *enode; \/\/pointer to the directional edge node corresponding to eid$/;"	m	struct:_delay_component_queue_node_t	typeref:struct:_delay_component_queue_node_t::_directional_edge_queue_node_t
enode	queue.h	/^        struct _directional_edge_queue_node_t *enode; \/\/pointer to the directional edge node$/;"	m	struct:_convoy_queue_t	typeref:struct:_convoy_queue_t::_directional_edge_queue_node_t
enode	queue.h	/^        struct _directional_edge_queue_node_t *enode; \/\/pointer to the directional edge node$/;"	m	struct:_probability_and_statistics_queue_node_t	typeref:struct:_probability_and_statistics_queue_node_t::_directional_edge_queue_node_t
enode	queue.h	/^        struct _directional_edge_queue_node_t *enode; \/\/pointer to the directional edge node$/;"	m	struct:_probability_and_statistics_queue_t	typeref:struct:_probability_and_statistics_queue_t::_directional_edge_queue_node_t
enode	queue.h	/^        struct _directional_edge_queue_node_t *enode; \/\/pointer to the directional edge node$/;"	m	struct:_vehicle_movement_queue_t	typeref:struct:_vehicle_movement_queue_t::_directional_edge_queue_node_t
enqueue	smpl.c	/^static void enqueue(int f,int j, int pri, int ev, real te)$/;"	f	file:
entry	graph-data-struct.h	/^	struct _struct_schedule_entry *entry;$/;"	m	struct:_struct_schedule_table	typeref:struct:_struct_schedule_table::_struct_schedule_entry
enum_edge_direction_t	schedule.h	/^} enum_edge_direction_t;$/;"	t	typeref:enum:_enum_edge_direction_t
enum_endpoint_t	schedule.h	/^} enum_endpoint_t;$/;"	t	typeref:enum:_enum_endpoint_t
enum_segment_type_t	schedule.h	/^} enum_segment_type_t;$/;"	t	typeref:enum:_enum_segment_type_t
enum_status_t	schedule.h	/^} enum_status_t;$/;"	t	typeref:enum:_enum_status_t
erlang	rand.c	/^real erlang(real x, real s)$/;"	f
error	smpl.c	/^void error(int n, char *s)$/;"	f
error_ratio	matlab-operation.h	/^	float error_ratio; \/\/error ratio of localization$/;"	m	struct:_struct_matlab_localization_result
estimate_energy_consumption	util.c	/^double estimate_energy_consumption(double time, double sensing_range, double energy_consumption_rate)$/;"	f
estimate_working_time	util.c	/^double estimate_working_time(double energy, double sensing_range, double energy_consumption_rate)$/;"	f
euclidean_distance1	util.c	/^double euclidean_distance1(double x1, double x2)$/;"	f
euclidean_distance2	util.c	/^double euclidean_distance2(struct_coordinate1_t *p1, struct_coordinate1_t *p2)$/;"	f
euclidean_pos	queue.h	/^        struct_coordinate1_t euclidean_pos; \/\/position in Euclidean space in the format of (x-coordinate, y-coordinate)       $/;"	m	struct:_packet_trajectory_queue_node_t
euclidean_pos	queue.h	/^        struct_coordinate1_t euclidean_pos; \/\/position in Euclidean space in the format of (x-coordinate, y-coordinate)       $/;"	m	struct:_vehicle_trajectory_queue_node_t
euclidean_pos	queue.h	/^        struct_coordinate1_t euclidean_pos; \/\/position in Euclidean space in the format of (x-coordinate, y-coordinate)  $/;"	m	struct:_carrier_trace_queue_node_t
evaluation_type	param.h	/^        evaluation_type_t evaluation_type;$/;"	m	struct:parameter
evaluation_type_t	param.h	/^} evaluation_type_t;$/;"	t	typeref:enum:_evaluation_type_t
event	smpl.c	/^  event,             \/* current simulation event            *\/$/;"	v	file:
evl	smpl.c	/^  evl,               \/* event list header                   *\/$/;"	v	file:
expected_arrival_time	graph-data-struct.h	/^	double expected_arrival_time; \/\/vehicle's expected arrival time to this path node$/;"	m	struct:_struct_path_node
expected_average_convoy_length	graph-data-struct.h	/^        double expected_average_convoy_length; \/\/expected average convoy length (ACL)$/;"	m	struct:_struct_graph_node
expected_delivery_delay	queue.h	/^        double expected_delivery_delay; \/* expected delivery delay (EDD) corresponding to the vehicle's EDD *\/$/;"	m	struct:_packet_queue_node_t
expected_delivery_delay_standard_deviation	queue.h	/^        double expected_delivery_delay_standard_deviation; \/* expected delivery delay's standard deviation *\/$/;"	m	struct:_packet_queue_node_t
expected_delivery_delay_standard_deviation_sum	common.h	/^  double expected_delivery_delay_standard_deviation_sum; \/\/sum of expected packet delivery delay standard deviations$/;"	m	struct:_packet_delivery_statistics_t
expected_delivery_delay_sum	common.h	/^  double expected_delivery_delay_sum; \/\/sum of expected packet delivery delays$/;"	m	struct:_packet_delivery_statistics_t
expected_delivery_time	packet-model.h	/^        double expected_delivery_time; \/* expected delivery time corresponding to the vehicle's EDD *\/$/;"	m	struct:struct_packet
expected_packet_transmission_number	queue.h	/^		int expected_packet_transmission_number; \/\/expected packet transmission number$/;"	m	struct:_packet_queue_node_t
expected_packet_transmission_number_sum	common.h	/^  int expected_packet_transmission_number_sum; \/\/sum of expected packet transmission numbers$/;"	m	struct:_packet_delivery_statistics_t
expntl	rand.c	/^real expntl(real x)$/;"	f
facility	smpl.c	/^int facility(char *s,int n)$/;"	f
factorial	util.c	/^int factorial(int n)$/;"	f
fchn	smpl.c	/^  fchn,              \/* facility descriptor chain header    *\/$/;"	v	file:
flag1	schedule.h	/^	boolean flag1;          \/\/flag to indicate whether arrival_time1 & departure_time1 are vaild$/;"	m	struct:_schedule_table_node_t
flag2	schedule.h	/^	boolean flag2;          \/\/flag to indicate whether arrival_time2 & departure_time2 are vaild$/;"	m	struct:_schedule_table_node_t
flag_convoy_registration	vehicle-model.h	/^    boolean flag_convoy_registration; \/\/flag to indicate whether the vehicle is registered in a convoy $/;"	m	struct:struct_vehicle
flag_for_state_sensor_die	sensor-model.h	/^	boolean flag_for_state_sensor_die;      \/* flag used to indicate that the sensor has performed SENSOR_DIE after reschedule.$/;"	m	struct:struct_sensor
flag_for_state_sensor_estimate	sensor-model.h	/^	boolean flag_for_state_sensor_estimate; \/* flag used to indicate that the sensor has performed SENSOR_ESTIMATE after reschedule.$/;"	m	struct:struct_sensor
flag_for_state_sensor_sense	sensor-model.h	/^	boolean flag_for_state_sensor_sense;    \/* flag used to indicate that the sensor has performed SENSOR_SENSE after reschedule. $/;"	m	struct:struct_sensor
flag_for_state_sensor_sleep	sensor-model.h	/^	boolean flag_for_state_sensor_sleep;    \/* flag used to indicate that the sensor has performed SENSOR_SLEEP after reschedule.$/;"	m	struct:struct_sensor
flag_vehicle_movement_queue_registration	vehicle-model.h	/^    boolean flag_vehicle_movement_queue_registration; \/\/flag to indicate whether the vehicle is registered in a vehicle movement queue$/;"	m	struct:struct_vehicle
fname	smpl.c	/^char *fname(int f)$/;"	f
forwarding_probability	queue.h	/^        double forwarding_probability;$/;"	m	struct:_probability_and_statistics_queue_node_t
forwarding_probability_and_statistics_flag	param.h	/^        boolean forwarding_probability_and_statistics_flag; \/\/flag to indicate whether the forwarding probability_and_statistics information is logged every EDD update or not$/;"	m	struct:parameter
forwarding_table_queue_node_t	queue.h	/^} forwarding_table_queue_node_t;$/;"	t	typeref:struct:_forwarding_table_queue_node_t
forwarding_table_queue_t	queue.h	/^} forwarding_table_queue_t;$/;"	t	typeref:struct:_forwarding_table_queue_t
fp_localization	util.c	/^static FILE* fp_localization = NULL; \/* file for logging the localization simulation *\/$/;"	v	file:
fp_path_list	util.c	/^static FILE* fp_path_list = NULL; \/* file for logging the path lists *\/$/;"	v	file:
fp_surveillance	util.c	/^static FILE* fp_surveillance = NULL; \/* file for logging the road surveillance simulation *\/$/;"	v	file:
fp_track_circle	util.c	/^static FILE* fp_track_circle = NULL; \/* file for logging target tracking based on circle *\/$/;"	v	file:
fp_track_contour	util.c	/^static FILE* fp_track_contour = NULL; \/* file for logging target tracking based on contour *\/$/;"	v	file:
fp_vanet	util.c	/^static FILE* fp_vanet = NULL; \/* file for logging the VANET simulation *\/$/;"	v	file:
fp_vanet_packet_carrier_trace	util.c	/^static FILE* fp_vanet_packet_carrier_trace = NULL; \/* file for logging the VANET packet carrier trace *\/$/;"	v	file:
free_vehicle_list	util.c	/^void free_vehicle_list()$/;"	f
g_current_time	main.c	/^double g_current_time;$/;"	v
g_direction	main.c	/^int g_direction;$/;"	v
g_expired_meeting_count	vadd.c	/^int g_expired_meeting_count = 0;$/;"	v
g_gnuplot_init	main.c	/^boolean g_gnuplot_init = FALSE;$/;"	v
g_gnuplot_option	main.c	/^int g_gnuplot_option=0;$/;"	v
g_gnuplot_packet_forwarding_delay	main.c	/^int g_gnuplot_packet_forwarding_delay = 100;$/;"	v
g_gnuplotpipe	main.c	/^FILE* g_gnuplotpipe = NULL;$/;"	v
g_intersection_visit_count	main.c	/^int g_intersection_visit_count[INTERSECTION_COUNT]={0,};$/;"	v
g_is_packet_forwarding	main.c	/^boolean g_is_packet_forwarding = FALSE;$/;"	v
g_margin_time	tpd.c	/^int g_margin_time = 0;$/;"	v
g_matlab_T	matlab-operation.c	/^static mxArray *g_matlab_T = NULL, *g_matlab_result = NULL; \/\/pointer to matlab array structure$/;"	v	file:
g_matlab_buffer	matlab-operation.c	/^static char g_matlab_buffer[MATLAB_BUF_SIZE]; \/\/buffer for matlab command$/;"	v	file:
g_matlab_ep	matlab-operation.c	/^static Engine *g_matlab_ep = NULL; \/\/pointer to the matlab engine instance$/;"	v	file:
g_matlab_fp	matlab-operation.c	/^static FILE *g_matlab_fp = NULL; \/\/pointer to mobility scenario file$/;"	v	file:
g_matlab_result	matlab-operation.c	/^static mxArray *g_matlab_T = NULL, *g_matlab_result = NULL; \/\/pointer to matlab array structure$/;"	v	file:
g_next_carrier	main.c	/^int g_next_carrier = 0;$/;"	v
g_predicted_encounter_time	tpd.c	/^double g_predicted_encounter_time[5000]={0,};$/;"	v
g_segment_visit_count	main.c	/^int g_segment_visit_count[INTERSECTION_COUNT][4];$/;"	v
g_vehicle_color	main.c	/^int g_vehicle_color[VEHICLE_COUNT_MAX];$/;"	v
g_vehicle_current_segment_location	main.c	/^int g_vehicle_current_segment_location[VEHICLE_COUNT_MAX]; \/\/ [vehicle_id]{intersection_head}$/;"	v
g_vehicle_have_packet	main.c	/^int g_vehicle_have_packet[VEHICLE_COUNT_MAX]={0,};$/;"	v
g_vehicle_point	main.c	/^double g_vehicle_point[VEHICLE_COUNT_MAX][3]={0,};$/;"	v
g_write_count	main.c	/^int g_write_count = 0;$/;"	v
g_write_interval	main.c	/^int g_write_interval = 500;$/;"	v
g_x	main.c	/^double g_x;$/;"	v
g_y	main.c	/^double g_y;$/;"	v
generated_packet_copy_number	common.h	/^  int generated_packet_copy_number; \/\/number of generated packet copies in Epidemic Routing$/;"	m	struct:_packet_delivery_statistics_t
generated_packet_number	common.h	/^  int generated_packet_number; \/\/number of generated packets$/;"	m	struct:_packet_delivery_statistics_t
generation_time	packet-model.h	/^	double generation_time;    \/* time when this packet was generated *\/$/;"	m	struct:struct_packet
generation_time	queue.h	/^		double generation_time;    \/* time when this packet was generated *\/$/;"	m	struct:_packet_queue_node_t
get_average_length_of_shortest_paths	util.c	/^double get_average_length_of_shortest_paths(double** D, int n, struct_traffic_table *src_table, struct_traffic_table *dst_table)$/;"	f
get_blk	smpl.c	/^static int get_blk(int n)$/;"	f	file:
get_data_forwarding_mode_name	util.c	/^char* get_data_forwarding_mode_name(data_forwarding_mode_t type)$/;"	f
get_distribution_type_name	util.c	/^char* get_distribution_type_name(distribution_type_t type)$/;"	f
get_elm	smpl.c	/^static int get_elm()$/;"	f	file:
get_intersection_visit_count	main.c	/^int* get_intersection_visit_count()$/;"	f
get_max_road_segment_length	analysis.c	/^int get_max_road_segment_length(char *output_file)$/;"	f
get_number_of_timestamps	analysis.c	/^int get_number_of_timestamps(char *output_file)$/;"	f
get_position_on_linear_curve	util.c	/^void get_position_on_linear_curve(double v, double t, struct_coordinate1_t *p1, struct_coordinate1_t *p2, struct_coordinate1_t *p)$/;"	f
get_position_on_linear_curve_for_offset	util.c	/^void get_position_on_linear_curve_for_offset(double offset, struct_coordinate1_t *p1, struct_coordinate1_t *p2, struct_coordinate1_t *p)$/;"	f
get_position_update_vector	util.c	/^void get_position_update_vector(struct_vehicle_t *vehicle, struct_graph_node *G, int G_size)$/;"	f
get_scan_type_name	util.c	/^char* get_scan_type_name(sensor_scan_type_t scan_type)$/;"	f
get_sensing_circle_meeting_time	util.c	/^double get_sensing_circle_meeting_time(double t_arrive, double t_depart, struct_sensor_t *sensor_info, STATE *state)$/;"	f
get_sensing_hole_handling_algorithm_name	util.c	/^char* get_sensing_hole_handling_algorithm_name(hole_handling_algorithm_t sensing_hole_handling_algorithm)$/;"	f
get_sensor_lifetime	util.c	/^double get_sensor_lifetime(struct_sensor_t *sensor_info, parameter_t *param)$/;"	f
get_sensor_state	util.c	/^STATE get_sensor_state(double current_time, struct_sensor_t *sensor_info)$/;"	f
get_sum_of	vanet_compute_trace_of_adt.pl	/^sub get_sum_of/;"	s
get_sum_of_array_items	vanet_produce_statistics.pm	/^sub get_sum_of_array_items$/;"	s
get_sum_of_mean_error_square	vanet_produce_statistics.pm	/^sub get_sum_of_mean_error_square$/;"	s
get_vanet_forwarding_scheme_name	util.c	/^char* get_vanet_forwarding_scheme_name(vanet_forwarding_scheme_t scheme)$/;"	f
get_vehicle_list	util.c	/^struct struct_vehicle* get_vehicle_list()$/;"	f
get_virtual_topology_based_on_aggregation_method	analysis.c	/^char* get_virtual_topology_based_on_aggregation_method(parameter_t *param, char *output_file, char *localization_file, int number)$/;"	f
get_virtual_topology_based_on_nonaggregation_method	analysis.c	/^char* get_virtual_topology_based_on_nonaggregation_method(parameter_t *param, char *output_file, char *localization_file, int number)$/;"	f
global_packet	queue.h	/^		struct _global_packet_queue_node_t *global_packet; \/\/pointer to the global packet$/;"	m	struct:_packet_pointer_queue_node_t	typeref:struct:_packet_pointer_queue_node_t::_global_packet_queue_node_t
global_packet	queue.h	/^        struct _global_packet_queue_node_t *global_packet; \/* pointer to the global packet queue node corresponding to this packet *\/$/;"	m	struct:_packet_queue_node_t	typeref:struct:_packet_queue_node_t::_global_packet_queue_node_t
global_packet_queue_node_t	queue.h	/^} global_packet_queue_node_t;$/;"	t	typeref:struct:_global_packet_queue_node_t
global_packet_queue_t	queue.h	/^} global_packet_queue_t;$/;"	t	typeref:struct:_global_packet_queue_t
gnode	graph-data-struct.h	/^	struct_graph_node *gnode; \/\/indicate the pointer to the graph node in adjacent list$/;"	m	struct:_struct_shortest_path_node
gnode	graph-data-struct.h	/^        struct _struct_graph_node *gnode; \/\/pointer to the graph node in graph G array corresponding to this node's vertex in order to access the information (such as coordinate) of the graph node corresponding to this node$/;"	m	struct:_struct_graph_node	typeref:struct:_struct_graph_node::_struct_graph_node
gnode	queue.h	/^        struct_graph_node *gnode; \/\/pointer to the Gr vertex corresponding to intersection_id$/;"	m	struct:_packet_trajectory_queue_node_t
gnode	queue.h	/^    struct_graph_node *gnode; \/\/pointer to the Gr vertex corresponding to stationary_node_id$/;"	m	struct:_stationary_node_queue_node_t
gnode	queue.h	/^    struct_graph_node* gnode; \/* pointer to the graph node in the road network graph for the intersection where the AP is placed *\/$/;"	m	struct:_access_point_queue_node_t
gnuplot_intersection_visit_count	main.c	/^void gnuplot_intersection_visit_count()$/;"	f
gnuplot_vehicle_point	main.c	/^void gnuplot_vehicle_point(double currenttime)$/;"	f
graph_file_name	param.h	/^        char graph_file_name[BUF_SIZE]; \/\/graph file name$/;"	m	struct:parameter
graph_node_number	param.h	/^        int graph_node_number;       \/\/number of nodes in the graph corresponding to the road network$/;"	m	struct:parameter
graph_pos	queue.h	/^        struct_coordinate3_t graph_pos; \/\/position in road network graph in the format of (eid, offset, enode)$/;"	m	struct:_carrier_trace_queue_node_t
graph_pos	queue.h	/^        struct_coordinate3_t graph_pos; \/\/position in road network graph in the format of (eid, offset, enode)$/;"	m	struct:_vehicle_trajectory_queue_node_t
graph_qnode	queue.h	/^	adjacency_list_queue_node_t *graph_qnode; \/\/pointer to graph queue node in adjacency_list$/;"	m	struct:_adjacency_list_pointer_queue_node_t
graph_qnode	queue.h	/^	struct _adjacency_list_queue_node_t *graph_qnode; \/\/pointer to the graph node in the adjacency list of predicted encounter graph$/;"	m	struct:_neighbor_list_queue_node_t	typeref:struct:_neighbor_list_queue_node_t::_adjacency_list_queue_node_t
graph_qnode	queue.h	/^	struct _adjacency_list_queue_node_t *graph_qnode; \/\/pointer to the graph node in the adjacency list of predicted encounter graph$/;"	m	struct:_parent_list_queue_node_t	typeref:struct:_parent_list_queue_node_t::_adjacency_list_queue_node_t
head	queue.h	/^		packet_pointer_queue_node_t head;$/;"	m	struct:_packet_pointer_queue_t
head	queue.h	/^	adjacency_list_pointer_queue_node_t head;$/;"	m	struct:_adjacency_list_pointer_queue_t
head	queue.h	/^	adjacency_list_queue_node_t head;$/;"	m	struct:_adjacency_list_queue_t
head	queue.h	/^	angle_queue_node_t head;$/;"	m	struct:_angle_queue_t
head	queue.h	/^	carrier_trace_queue_node_t head;$/;"	m	struct:_carrier_trace_queue_t
head	queue.h	/^	component_vertex_queue_node_t head;$/;"	m	struct:_component_vertex_queue_t
head	queue.h	/^	conditional_forwarding_probability_queue_node_t head;$/;"	m	struct:_conditional_forwarding_probability_queue_t
head	queue.h	/^	delay_component_queue_node_t head;$/;"	m	struct:_delay_component_queue_t
head	queue.h	/^	delay_queue_node_t head;$/;"	m	struct:_delay_queue_t
head	queue.h	/^	destination_vehicle_queue_node_t head;        $/;"	m	struct:_destination_vehicle_queue_t
head	queue.h	/^	directional_edge_queue_node_t head;$/;"	m	struct:_directional_edge_queue_t
head	queue.h	/^	edge_queue_node_t head;$/;"	m	struct:_edge_queue_t
head	queue.h	/^	edge_set_queue_node_t head;$/;"	m	struct:_edge_set_queue_t
head	queue.h	/^	global_packet_queue_node_t head;$/;"	m	struct:_global_packet_queue_t
head	queue.h	/^	hole_endpoint_queue_node_t head;$/;"	m	struct:_hole_endpoint_queue_t
head	queue.h	/^	hole_segment_queue_node_t head;$/;"	m	struct:_hole_segment_queue_t
head	queue.h	/^	intersection_edd_queue_node_t head;$/;"	m	struct:_intersection_edd_queue_t
head	queue.h	/^	location_queue_node_t head;$/;"	m	struct:_location_queue_t
head	queue.h	/^	minimum_priority_queue_node_t head;$/;"	m	struct:_minimum_priority_queue_t
head	queue.h	/^	mobility_queue_node_t head;$/;"	m	struct:_mobility_queue_t
head	queue.h	/^	neighbor_list_queue_node_t head;$/;"	m	struct:_neighbor_list_queue_t
head	queue.h	/^	packet_forwarding_tree_path_queue_node_t head;$/;"	m	struct:_packet_forwarding_tree_path_queue_t
head	queue.h	/^	packet_queue_node_t head;$/;"	m	struct:_packet_queue_t
head	queue.h	/^	packet_schedule_queue_node_t head;$/;"	m	struct:_packet_schedule_queue_t
head	queue.h	/^	packet_trajectory_queue_node_t head;$/;"	m	struct:_packet_trajectory_queue_t
head	queue.h	/^	parent_list_queue_node_t head;$/;"	m	struct:_parent_list_queue_t
head	queue.h	/^	path_queue_node_t head;$/;"	m	struct:_path_queue_t
head	queue.h	/^	probability_and_statistics_queue_node_t head;$/;"	m	struct:_probability_and_statistics_queue_t
head	queue.h	/^	queue_node_t head; \/\/head node for queue$/;"	m	struct:_queue_t
head	queue.h	/^	schedule_queue_node_t head;$/;"	m	struct:_schedule_queue_t
head	queue.h	/^	sensor_queue_node_t head;$/;"	m	struct:_sensor_queue_t
head	queue.h	/^	stationary_node_queue_node_t head;$/;"	m	struct:_stationary_node_queue_t
head	queue.h	/^	subedge_queue_node_t head;$/;"	m	struct:_subedge_queue_t
head	queue.h	/^	target_point_queue_node_t head;$/;"	m	struct:_target_point_queue_t
head	queue.h	/^	vehicle_movement_queue_node_t head;$/;"	m	struct:_vehicle_movement_queue_t
head	queue.h	/^	vehicle_trajectory_queue_node_t head;$/;"	m	struct:_vehicle_trajectory_queue_t
head	queue.h	/^	vertex_set_queue_node_t head;$/;"	m	struct:_vertex_set_queue_t
head	queue.h	/^        convoy_queue_node_t head;$/;"	m	struct:_convoy_queue_t
head	queue.h	/^        vehicle_queue_node_t head;$/;"	m	struct:_vehicle_queue_t
head	queue.h	/^    access_point_queue_node_t head;$/;"	m	struct:_access_point_queue_t
head	queue.h	/^    forwarding_table_queue_node_t head;$/;"	m	struct:_forwarding_table_queue_t
head	schedule.h	/^	schedule_table_node_t head;$/;"	m	struct:_schedule_table_t
head_gnode	queue.h	/^	struct _struct_graph_node *head_gnode; \/\/pointer to head graph node for the directional edge$/;"	m	struct:_intersection_edd_queue_node_t	typeref:struct:_intersection_edd_queue_node_t::_struct_graph_node
head_gnode	queue.h	/^        struct_graph_node *head_gnode; \/\/pointer to the graph node corresponding to the head node in <tail_node, head_node>$/;"	m	struct:_angle_queue_node_t
head_gnode	queue.h	/^        struct_graph_node *head_gnode; \/\/pointer to the graph node corresponding to the head node in <tail_node, head_node>$/;"	m	struct:_directional_edge_queue_node_t
head_node	graph-data-struct.h	/^        char head_node[NAME_SIZE]; \/\/head node of a directional edg$/;"	m	struct:_struct_coordinate3_t
head_node	queue.h	/^	char head_node[NAME_SIZE];         \/\/head node of a directional edge$/;"	m	struct:_schedule_queue_node_t
head_node	queue.h	/^	char head_node[NAME_SIZE];  \/\/head node of a directional edge$/;"	m	struct:_angle_queue_node_t
head_node	queue.h	/^	char head_node[NAME_SIZE];  \/\/head node of a directional edge$/;"	m	struct:_edge_queue_node_t
head_node	queue.h	/^	char head_node[NAME_SIZE];  \/\/head node of a directional edge$/;"	m	struct:_edge_set_queue_node_t
head_node	queue.h	/^	char head_node[NAME_SIZE];  \/\/head node of a directional edge$/;"	m	struct:_subedge_queue_node_t
head_node	queue.h	/^        char head_node[NAME_SIZE];  \/\/head node of a directional edge$/;"	m	struct:_directional_edge_queue_node_t
head_node	queue.h	/^        char head_node[NAME_SIZE]; \/\/head vertex$/;"	m	struct:_probability_and_statistics_queue_node_t
head_node	queue.h	/^        char head_node[NAME_SIZE]; \/\/head vertex$/;"	m	struct:_probability_and_statistics_queue_t
head_node	schedule.h	/^	char head_node[NAME_SIZE]; \/\/head node of a directional edge$/;"	m	struct:_schedule_table_node_t
head_node_of_current_carrier_edge	queue.h	/^        char head_node_of_current_carrier_edge[NAME_SIZE]; \/\/head node of current carrier's edge$/;"	m	struct:_conditional_forwarding_probability_queue_node_t
head_node_of_next_carrier_edge	queue.h	/^        char head_node_of_next_carrier_edge[NAME_SIZE]; \/\/head node of next carrier's edg$/;"	m	struct:_conditional_forwarding_probability_queue_node_t
head_vehicle	queue.h	/^        struct struct_vehicle *head_vehicle; \/\/convoy head vehicle; the vehicle that created the convoy$/;"	m	struct:_convoy_queue_node_t	typeref:struct:_convoy_queue_node_t::struct_vehicle
head_vertex	queue.h	/^	int head_vertex; \/\/head vertex for encounter edge$/;"	m	struct:_neighbor_list_queue_node_t
head_vertex	queue.h	/^	int head_vertex; \/\/head vertex for encounter edge$/;"	m	struct:_parent_list_queue_node_t
hid	queue.h	/^	int hid; \/\/sensing hole id based on sequence number of hole endpoint queue, starting from 1$/;"	m	struct:_hole_endpoint_queue_node_t
hole_endpoint_queue_node_t	queue.h	/^} hole_endpoint_queue_node_t;$/;"	t	typeref:struct:_hole_endpoint_queue_node_t
hole_endpoint_queue_t	queue.h	/^} hole_endpoint_queue_t;$/;"	t	typeref:struct:_hole_endpoint_queue_t
hole_handling_algorithm_t	param.h	/^} hole_handling_algorithm_t;$/;"	t	typeref:enum:_hole_handling_algorithm_t
hole_handling_mode_t	param.h	/^} hole_handling_mode_t;$/;"	t	typeref:enum:_hole_handling_mode_t
hole_segment_queue_node_t	queue.h	/^} hole_segment_queue_node_t;$/;"	t	typeref:struct:_hole_segment_queue_node_t
hole_segment_queue_t	queue.h	/^} hole_segment_queue_t;$/;"	t	typeref:struct:_hole_segment_queue_t
hyperx	rand.c	/^real hyperx(real x, real s)$/;"	f
id	packet-model.h	/^	int id;    \/* packet id *\/$/;"	m	struct:struct_packet
id	queue.h	/^		int id; \/\/packet id$/;"	m	struct:_packet_pointer_queue_node_t
id	queue.h	/^	int id;    \/\/sensor ID$/;"	m	struct:_location_queue_node_t
id	queue.h	/^	int id; \/\/id (e.g., vehicle id)$/;"	m	struct:_minimum_priority_queue_node_t
id	queue.h	/^        int id; \/* packet id used by SMPL scheduler *\/$/;"	m	struct:_global_packet_queue_node_t
id	queue.h	/^        int id; \/* packet id used by SMPL scheduler *\/$/;"	m	struct:_packet_queue_node_t
id	queue.h	/^    int id;   \/* AP id *\/$/;"	m	struct:_access_point_queue_node_t
id	queue.h	/^    int id; \/\/id (e.g., vertex id)$/;"	m	struct:_adjacency_list_queue_node_t
id	queue.h	/^    int id; \/\/id$/;"	m	struct:_neighbor_list_queue_node_t
id	queue.h	/^    int id; \/\/id$/;"	m	struct:_parent_list_queue_node_t
id	sensor-model.h	/^	int id;   \/* sensor id *\/$/;"	m	struct:struct_sensor
id	vehicle-model.h	/^    int id;   \/* vehicle id *\/$/;"	m	struct:struct_vehicle
index_table	queue.h	/^    forwarding_table_queue_node_t **index_table; \/\/index table to access a table for intersection id; index_table[0] points to the table corresponding to intersection id == 1$/;"	m	struct:_forwarding_table_queue_t
info	queue.h	/^	struct_sensor_t info; \/\/sensor's information$/;"	m	struct:_sensor_queue_node_t
init_mobility	mobility.c	/^void init_mobility(char* mobility_file_name, boolean vehicle_id_override_flag, int new_simulation_node_id, destination_vehicle_queue_t* DVQ)$/;"	f
init_parameter	param.c	/^void init_parameter(struct parameter *param, char* conf_file)$/;"	f
init_pos	vehicle-model.h	/^    struct_coordinate1_t init_pos; \/* initial position in the Cartesian coordinate system *\/$/;"	m	struct:struct_vehicle
init_pos_in_Gr	vehicle-model.h	/^    struct_coordinate2_t init_pos_in_Gr; \/* initial position in the graph coordinate system (i.e., edge id and relative location) in real graph Gr *\/$/;"	m	struct:struct_vehicle
init_vehicle_list	util.c	/^void init_vehicle_list()$/;"	f
initial_energy	sensor-model.h	/^	double initial_energy; \/* initial energy *\/$/;"	m	struct:struct_sensor
initial_sleeping_interval	sensor-model.h	/^        double initial_sleeping_interval; \/* initial sleeping interval corresponding to the vehicle movement after the surveillance start\/restart time *\/$/;"	m	struct:struct_sensor
initialize_density	util.c	/^void initialize_density(struct struct_sensor* sensor_list, int sensor_number, struct parameter* param)$/;"	f
inq	smpl.c	/^int inq(int f)$/;"	f
intersection_area_type_t	common.h	/^} intersection_area_type_t;$/;"	t	typeref:enum:_intersection_area_type_t
intersection_edd_queue	graph-data-struct.h	/^        struct _intersection_edd_queue_t *intersection_edd_queue; \/\/intersection EDD queue to select an edge with the smallest EDD with a vehicle within the communication range of the intersection corresponding to this graph node$/;"	m	struct:_struct_graph_node	typeref:struct:_struct_graph_node::_intersection_edd_queue_t
intersection_edd_queue_node_t	queue.h	/^} intersection_edd_queue_node_t;$/;"	t	typeref:struct:_intersection_edd_queue_node_t
intersection_edd_queue_t	queue.h	/^} intersection_edd_queue_t;$/;"	t	typeref:struct:_intersection_edd_queue_t
intersection_id	queue.h	/^        int intersection_id; $/;"	m	struct:_packet_trajectory_queue_node_t
intersection_id	queue.h	/^        int intersection_id; \/\/intersection id$/;"	m	struct:_carrier_trace_queue_node_t
intersection_id	queue.h	/^        int intersection_id; \/\/intersection id$/;"	m	struct:_mobility_queue_node_t
intersection_id	queue.h	/^    int intersection_id; \/\/intersection id as stationary node id$/;"	m	struct:_stationary_node_queue_node_t
intersection_id	queue.h	/^    int intersection_id; \/\/intersection id$/;"	m	struct:_forwarding_table_queue_node_t
intersection_pair_matrix_filename	matlab-operation.h	/^        char intersection_pair_matrix_filename[BUF_SIZE]; \/\/the file name of the intersection pair matrix whose entry consists of (intersection sensor id, the corresponding intersection id)$/;"	m	struct:_struct_matlab_prefiltering_result
intersection_sensor_id_vector_filename	matlab-operation.h	/^        char intersection_sensor_id_vector_filename[BUF_SIZE]; \/\/the file name of the intersection sensor id vector$/;"	m	struct:_struct_matlab_prefiltering_result
intersection_sensor_network_graph_filename	matlab-operation.h	/^	char intersection_sensor_network_graph_filename[BUF_SIZE]; \/\/the file name of the intersection sensor network graph that is the permuted one for the road-sensor network graph and whose nodes are intersection sensor nodes$/;"	m	struct:_struct_matlab_prefiltering_result
intersection_vector_filename	matlab-operation.h	/^        char intersection_vector_filename[BUF_SIZE]; \/\/the file name of the intersection vector $/;"	m	struct:_struct_matlab_prefiltering_result
isLogOn	vadd.c	/^boolean isLogOn()$/;"	f
is_destination_vehicle	util.c	/^boolean is_destination_vehicle(parameter_t *param, struct_vehicle_t *vehicle)$/;"	f
is_initial_sensing_hole	util.c	/^boolean is_initial_sensing_hole(int order, sensor_queue_node_t *pSensorNode, schedule_table_node_t *pTableNode, double *left_hole_offset, double *right_hole_offset)$/;"	f
is_sensing_hole	util.c	/^boolean is_sensing_hole(sensor_queue_node_t *pSensorNode, schedule_table_node_t *pTableNode, double *left_hole_offset, double *right_hole_offset)$/;"	f
is_there_breach_path_based_on_breach_path_matrix	util.c	/^boolean is_there_breach_path_based_on_breach_path_matrix(struct_graph_node *Gv, int Gv_size, int ***Dv_breach, int ***Mv_breach, int *matrix_size_for_breach_in_Gv, struct_traffic_table *src_table_for_Gv, struct_traffic_table *dst_table_for_Gv, char *breach_path_src, char *breach_path_dst)$/;"	f
is_there_breach_path_based_on_shortest_path_checking	util.c	/^boolean is_there_breach_path_based_on_shortest_path_checking(struct_path_table *path_table, struct_traffic_table *src_table_for_Gr, struct_traffic_table *dst_table_for_Gr, edge_queue_t *Er, char *breach_path_src, char *breach_path_dst)$/;"	f
is_vehicle_detected_for_eager_update	util.c	/^boolean is_vehicle_detected_for_eager_update(double current_time, struct_vehicle_t *vehicle, edge_queue_t *E, parameter_t *param, struct_sensor_table *S)$/;"	f
is_vehicle_detected_for_eager_update_and_step_path	util.c	/^boolean is_vehicle_detected_for_eager_update_and_step_path(double current_time, struct_vehicle_t *vehicle, edge_queue_t *E, parameter_t *param, struct_sensor_table *S, struct_traffic_table *protection_set)$/;"	f
is_vehicle_detected_for_lazy_update	util.c	/^boolean is_vehicle_detected_for_lazy_update(double current_time, struct_vehicle_t *vehicle, edge_queue_t *E, parameter_t *param, struct_sensor_table *S)$/;"	f
is_vehicle_detected_for_lazy_update_and_step_path	util.c	/^boolean is_vehicle_detected_for_lazy_update_and_step_path(double current_time, struct_vehicle_t *vehicle, edge_queue_t *E, parameter_t *param, struct_sensor_table *S, struct_traffic_table *protection_set)$/;"	f
is_vehicle_within_communication_range_of_point	util.c	/^boolean is_vehicle_within_communication_range_of_point(parameter_t *param, struct_vehicle_t *vehicle, struct_coordinate1_t *point)$/;"	f
isdetected	util.c	/^boolean isdetected(struct struct_sensor* sensor_list, int sensor_number, double x, double y)$/;"	f
itoa	util.c	/^char *itoa(int i, char* a)$/;"	f
key	queue.h	/^	double key; \/\/key (e.g., encounter time)$/;"	m	struct:_minimum_priority_queue_node_t
key	queue.h	/^	double key; \/\/key (e.g., id)$/;"	m	struct:_adjacency_list_queue_node_t
km_hour2m_sec	util.c	/^double km_hour2m_sec(double speed)$/;"	f
l1	smpl.c	/^  l1[nl],$/;"	v	file:
l2	smpl.c	/^  l2[nl],            \/*       facility descriptor,          *\/$/;"	v	file:
l3	smpl.c	/^  l3[nl];            \/*            queue, &                 *\/$/;"	v	file:
l4	smpl.c	/^  l4[nl],            \/*          element pool               *\/$/;"	v	file:
l5	smpl.c	/^  l5[nl];$/;"	v	file:
lambda	graph-data-struct.h	/^        double lambda; \/\/arrival rate per unit time (1 sec) = 1\/mean_interarrival_time$/;"	m	struct:_struct_graph_node
lambda	queue.h	/^        double lambda; \/\/arrival rate per unit time (1 sec) = 1\/mean_interarrival_time$/;"	m	struct:_probability_and_statistics_queue_node_t
last_arrival_time	graph-data-struct.h	/^        double last_arrival_time; \/\/last arrival time$/;"	m	struct:_struct_graph_node
last_receive_time	queue.h	/^        double last_receive_time; \/* last receive time by carry vehicle *\/$/;"	m	struct:_packet_queue_node_t
latest_packet_ptr	queue.h	/^    struct _packet_queue_node_t *latest_packet_ptr; \/\/pointer to the latest packet from AP among the packets in the stationary node's packet_queue$/;"	m	struct:_stationary_node_queue_node_t	typeref:struct:_stationary_node_queue_node_t::_packet_queue_node_t
latest_packet_ptr	vehicle-model.h	/^    struct _packet_queue_node_t *latest_packet_ptr; \/\/pointer to the latest packet from AP$/;"	m	struct:struct_vehicle	typeref:struct:struct_vehicle::_packet_queue_node_t
latest_packet_receive_time	queue.h	/^    double latest_packet_receive_time; \/\/receive time of the packet latest generated by AP$/;"	m	struct:_stationary_node_queue_node_t
latest_packet_receive_time	vehicle-model.h	/^    double latest_packet_receive_time; \/\/receive time of the packet latest generated by AP$/;"	m	struct:struct_vehicle
latest_packet_seq	queue.h	/^    unsigned int latest_packet_seq; \/\/sequence number of the packet latest generated by AP$/;"	m	struct:_stationary_node_queue_node_t
latest_packet_seq	vehicle-model.h	/^    unsigned int latest_packet_seq; \/\/sequence number of the packet latest generated by AP$/;"	m	struct:struct_vehicle
leader_vehicle	queue.h	/^        struct struct_vehicle *leader_vehicle; \/\/convoy leader vehicle with the minimum vehicle EDD within the convoy; note that leader's vehicle EDD becomes the convoy EDD$/;"	m	struct:_convoy_queue_node_t	typeref:struct:_convoy_queue_node_t::struct_vehicle
left_hole_offset	queue.h	/^	double left_hole_offset; \/\/offset of left hole in sensing hole area from the tail of the edge$/;"	m	struct:_hole_segment_queue_node_t
length	gsl-util.h	/^    double length; \/\/length of road segment$/;"	m	struct:H_params
length_unit	param.h	/^        length_unit_type_t length_unit; \/\/length unit type$/;"	m	struct:parameter
length_unit_type_t	param.h	/^} length_unit_type_t; \/\/length unit type$/;"	t	typeref:enum:_length_unit_type_t
lft	smpl.c	/^  lft=sl;            \/* lines left on current page\/screen   *\/$/;"	v	file:
link_delay_a	gsl-util.h	/^	double link_delay_a; \/\/link delay of Vehicle_a on the edge (n_i, n_j)$/;"	m	struct:_tpd_opt_params_t
link_delay_b	gsl-util.h	/^	double link_delay_b; \/\/link delay of Vehicle_b on the edge (n_j, n_i)$/;"	m	struct:_tpd_opt_params_t
list	graph-data-struct.h	/^	struct_set_node **list; \/\/list of shortest path sets$/;"	m	struct:_struct_path_table
list	graph-data-struct.h	/^	struct_traffic_node *list; \/\/list of sources or destinations$/;"	m	struct:_struct_traffic_table
list	schedule.h	/^	sensor_queue_node_t **list; \/\/list of sensor node pointers that are maintained in sensor queue lists in schedule table entries$/;"	m	struct:_struct_sensor_table
live_sensor_number	queue.h	/^	int live_sensor_number; \/\/number of live sensors on an edge in real graph Gr $/;"	m	struct:_edge_queue_node_t
live_sensor_number	queue.h	/^	int live_sensor_number; \/\/number of live sensors on an edge$/;"	m	struct:_sensor_queue_t
lns	smpl.c	/^int lns(int i)$/;"	f
location_queue_node_t	queue.h	/^} location_queue_node_t;$/;"	t	typeref:struct:_location_queue_node_t
location_queue_t	queue.h	/^} location_queue_t;$/;"	t	typeref:struct:_location_queue_t
log_localization	util.c	/^int log_localization(char *sensor_id, double current_time, int vehicle_id, int event, struct struct_sensor *sensor_list)$/;"	f
log_path_list	util.c	/^int log_path_list(char* src, char* dst, double current_time, int vehicle_id, struct_path_node* path_list)$/;"	f
log_sensornet	util.c	/^void log_sensornet(struct struct_sensor* sensor_list, int sensor_number, double time, struct parameter* param)$/;"	f
log_surveillance_for_detection	util.c	/^int log_surveillance_for_detection(int sensor_id, double current_time, int vehicle_id, double movement_time, STATE event, struct_sensor_table *S)$/;"	f
log_surveillance_for_sensor	util.c	/^int log_surveillance_for_sensor(int sensor_id, double current_time, STATE event, struct_sensor_table *S)$/;"	f
log_surveillance_for_vehicle	util.c	/^int log_surveillance_for_vehicle(int vehicle_id, double current_time, STATE event, struct_coordinate2_t *pos, MOVE_TYPE move_type, edge_queue_t *E)$/;"	f
log_trace_file	util.c	/^void log_trace_file(FILE *fp, TRACE_TYPE type, ...)$/;"	f
log_vanet	util.c	/^int log_vanet(VANET_LOG_TYPE type, double current_time, packet_queue_node_t *p, packet_delivery_statistics_t *packet_delivery_stat)$/;"	f
log_vanet_packet_carrier_trace	util.c	/^int log_vanet_packet_carrier_trace(VANET_LOG_TYPE log_type, double current_time, packet_queue_node_t *packet)$/;"	f
log_vanet_packet_carrier_trace_for_download	util.c	/^int log_vanet_packet_carrier_trace_for_download(VANET_LOG_TYPE log_type, double current_time, packet_queue_node_t *packet)$/;"	f
log_vanet_packet_carrier_trace_for_upload	util.c	/^int log_vanet_packet_carrier_trace_for_upload(VANET_LOG_TYPE log_type, double current_time, packet_queue_node_t *packet)$/;"	f
log_vanet_packet_carrier_trace_for_v2v	util.c	/^int log_vanet_packet_carrier_trace_for_v2v(VANET_LOG_TYPE log_type, double current_time, packet_queue_node_t *packet)$/;"	f
m_isLogOn	vadd.c	/^boolean m_isLogOn = FALSE;$/;"	v
main	IVANET.cpp	/^int main(int argc, void** argv)$/;"	f
main	main.c	/^int main(int argc, char** argv)$/;"	f
matlab_count_neighbor_sensors_based_on_circle	matlab-operation.c	/^int matlab_count_neighbor_sensors_based_on_circle(double refresh_time, struct_vehicle_t *vehicle, $/;"	f
matlab_count_neighbor_sensors_based_on_contour	matlab-operation.c	/^int matlab_count_neighbor_sensors_based_on_contour(double refresh_time, struct_vehicle_t *vehicle, $/;"	f
matlab_get_optimal_refresh_time	matlab-operation.c	/^double matlab_get_optimal_refresh_time(parameter_t *param)$/;"	f
matlab_open_file	matlab-operation.c	/^int matlab_open_file(char *directory, char *filename)$/;"	f
matlab_perform_graph_matching	matlab-operation.c	/^struct_matlab_localization_result* matlab_perform_graph_matching(Engine *matlab_ep, char *current_directory, double speed, char *adjacency_matrix_filename, char *intersection_vector_filename, int data_aggregation_type, int data_prefilter_type, struct_matlab_prefiltering_result* prefiltering_result, boolean nonintersection_sensor_localization_flag)$/;"	f
matlab_perform_localization	matlab-operation.c	/^struct_matlab_localization_result* matlab_perform_localization(Engine *matlab_ep, char *current_directory, int nodenum, int measurement_number, double speed, double speed_deviation, char *adjacency_matrix_filename, char *virtual_topology_filename_prefix, int data_aggregation_type, int data_prefilter_type)$/;"	f
matlab_perform_prefiltering	matlab-operation.c	/^struct_matlab_prefiltering_result* matlab_perform_prefiltering(Engine *matlab_ep, char *current_directory, int nodenum, int measurement_number, double speed, double speed_deviation, char *adjacency_matrix_filename, char *intersection_vector_filename, char *virtual_topology_filename_prefix, int data_aggregation_type, int data_prefilter_type)$/;"	f
matlab_read_initial_mobility_vector	matlab-operation.c	/^int matlab_read_initial_mobility_vector(double *x, double *y, double *direction, double *speed)$/;"	f
matlab_read_mobility_vector	matlab-operation.c	/^int matlab_read_mobility_vector(double *steering_angle, double *acceleration, double *duration)$/;"	f
matlab_start	matlab-operation.c	/^int matlab_start(char *scenario_file)$/;"	f
matlab_start_for_localization	matlab-operation.c	/^Engine* matlab_start_for_localization()$/;"	f
matlab_stop	matlab-operation.c	/^void matlab_stop()$/;"	f
matlab_stop_localization	matlab-operation.c	/^void matlab_stop_localization(Engine *matlab_ep)$/;"	f
matrix_size_for_edc_in_Gr	param.h	/^    int matrix_size_for_edc_in_Gr; \/\/matrix size of matrices Dr_edc, Mr_edc, and Sr_edc for E2E delivery cost or cost variance in Gr    $/;"	m	struct:_vanet_information_table_t
matrix_size_for_edc_in_Gr	queue.h	/^	int matrix_size_for_edc_in_Gr; \/\/matrix size of matrices Dr_edc, Mr_edc, and Sr_edc	$/;"	m	struct:_forwarding_table_queue_node_t
matrix_size_for_edd_in_Gr	param.h	/^    int matrix_size_for_edd_in_Gr; \/\/matrix size of matrices Dr_edd, Mr_edd, and Sr_edd for E2E delivery delay or delay variance in Gr    $/;"	m	struct:_vanet_information_table_t
matrix_size_for_edd_in_Gr	queue.h	/^	int matrix_size_for_edd_in_Gr; \/\/matrix size of matrices Dr_edd, Mr_edd, and Sr_edd$/;"	m	struct:_forwarding_table_queue_node_t
matrix_size_for_movement_in_Gr	param.h	/^    int matrix_size_for_movement_in_Gr; \/\/matrix size of matrices Dr_move and Mr_move for movement in Gr$/;"	m	struct:_vanet_information_table_t
max_turning_angle	vehicle-model.h	/^    double max_turning_angle; \/* maximum turning angle *\/$/;"	m	struct:struct_vehicle
mean_actual_delivery_delay	common.h	/^  double mean_actual_delivery_delay; \/\/mean actual delivery delay$/;"	m	struct:_packet_delivery_statistics_t
mean_actual_packet_transmission_number	common.h	/^  int mean_actual_packet_transmission_number; \/\/mean actual packet transmission number$/;"	m	struct:_packet_delivery_statistics_t
mean_delivery_delay_difference	common.h	/^  double mean_delivery_delay_difference; \/\/mean delivery delay difference$/;"	m	struct:_packet_delivery_statistics_t
mean_expected_delivery_delay	common.h	/^  double mean_expected_delivery_delay; \/\/mean expected delivery delay$/;"	m	struct:_packet_delivery_statistics_t
mean_expected_delivery_delay_standard_deviation	common.h	/^  double mean_expected_delivery_delay_standard_deviation; \/\/mean expected delivery delay standard deviation$/;"	m	struct:_packet_delivery_statistics_t
mean_expected_packet_transmission_number	common.h	/^  int mean_expected_packet_transmission_number; \/\/mean expected packet transmission number$/;"	m	struct:_packet_delivery_statistics_t
mean_integer	util.c	/^float mean_integer(int i, int j)$/;"	f
mean_interarrival_time	graph-data-struct.h	/^        double mean_interarrival_time; \/\/average interarrival time$/;"	m	struct:_struct_graph_node
mean_interarrival_time	queue.h	/^        double mean_interarrival_time; \/\/average interarrival time$/;"	m	struct:_probability_and_statistics_queue_node_t
min_delivery_delay_difference	common.h	/^  int min_delivery_delay_difference; \/\/ min delivery delay difference$/;"	m	struct:_packet_delivery_statistics_t
minimum_average_delivery_delay	queue.h	/^	double minimum_average_delivery_delay; \/\/minimum average delivery delay$/;"	m	struct:_target_point_queue_t
minimum_priority_queue_node_t	queue.h	/^} minimum_priority_queue_node_t;$/;"	t	typeref:struct:_minimum_priority_queue_node_t
minimum_priority_queue_t	queue.h	/^} minimum_priority_queue_t;$/;"	t	typeref:struct:_minimum_priority_queue_t
mname	smpl.c	/^char *mname()$/;"	f
mobility_file_name	param.h	/^        char mobility_file_name[BUF_SIZE]; \/\/mobility file name$/;"	m	struct:parameter
mobility_list	queue.h	/^        struct _mobility_queue_t mobility_list; \/\/mobility queue of the destination vehicle$/;"	m	struct:_destination_vehicle_queue_node_t	typeref:struct:_destination_vehicle_queue_node_t::_mobility_queue_t
mobility_queue_node_t	queue.h	/^} mobility_queue_node_t;$/;"	t	typeref:struct:_mobility_queue_node_t
mobility_queue_t	queue.h	/^} mobility_queue_t;$/;"	t	typeref:struct:_mobility_queue_t
mobility_type	queue.h	/^        mobility_type_t mobility_type; \/\/mobility type$/;"	m	struct:_destination_vehicle_queue_node_t
mobility_type	vehicle-model.h	/^    mobility_type_t mobility_type; \/\/mobility type for path_list: type = {MOBILITY_FREE, MOBILITY_OPEN, MOBILITY_CLOSED}$/;"	m	struct:struct_vehicle
mobility_type_t	common.h	/^} mobility_type_t;$/;"	t	typeref:enum:_mobility_type_t
mode	queue.h	/^		vanet_packet_forwarding_mode_t mode; \/* packet forwarding mode = {FORWARDING_MODE_SOURCE_ROUTING=0, FORWARDING_MODE_RANDOM_WALK=1} *\/$/;"	m	struct:_packet_queue_node_t
move_end_time	vehicle-model.h	/^    double move_end_time;   \/* time is when vehicle ends to move in each movement step *\/$/;"	m	struct:struct_vehicle
move_interval	vehicle-model.h	/^    double move_interval;   \/* movement interval in each movement step *\/$/;"	m	struct:struct_vehicle
move_start_time	vehicle-model.h	/^    double move_start_time; \/* time is when vehicle starts to move in each movement step *\/$/;"	m	struct:struct_vehicle
move_type	queue.h	/^		MOVE_TYPE move_type; \/* movement type: {MOVE_FORWARD, MOVE_BACKWARD} *\/$/;"	m	struct:_packet_queue_node_t
move_type	queue.h	/^        MOVE_TYPE move_type; \/\/movement type = {MOVE_FORWARD, MOVE_BACKWARD} $/;"	m	struct:_vehicle_movement_queue_node_t
move_type	vehicle-model.h	/^    MOVE_TYPE move_type; \/* movement type for directional edge = {MOVE_FORWARD, MOVE_BACKWARD} *\/$/;"	m	struct:struct_vehicle
mr	smpl.c	/^  mr,                \/* monitor activation flag             *\/$/;"	v	file:
msg	smpl.c	/^static void msg(int n, int i, char *s, int q1,int q2)$/;"	f	file:
mu	gsl-util.h	/^    double mu; \/\/mean$/;"	m	struct:H_params
mu_p	gsl-util.h	/^    double mu_p; \/\/packet delay average$/;"	m	struct:_vanet_opt_params_t
mu_v	gsl-util.h	/^    double mu_v; \/\/vehicle delay average$/;"	m	struct:_vanet_opt_params_t
mu_x	gsl-util.h	/^    double mu_x; \/\/Vehicle_a's travel delay average on the edge (n_i, n_j)$/;"	m	struct:_tpd_opt_params_t
mu_y	gsl-util.h	/^    double mu_y; \/\/Vehicle_b's travel delay average on the edge (n_j, n_i)$/;"	m	struct:_tpd_opt_params_t
my_visitor	analysis.c	/^bool my_visitor(int n, node_id ni1[], node_id ni2[], void *user_data)$/;"	f
name	smpl.c	/^  name[ns];          \/* model and facility name space       *\/$/;"	v	file:
neighbor_list	queue.h	/^	neighbor_list_queue_t neighbor_list; \/\/neighbor list queue$/;"	m	struct:_adjacency_list_queue_node_t
neighbor_list_queue_node_t	queue.h	/^} neighbor_list_queue_node_t;$/;"	t	typeref:struct:_neighbor_list_queue_node_t
neighbor_list_queue_t	queue.h	/^} neighbor_list_queue_t;$/;"	t	typeref:struct:_neighbor_list_queue_t
network_gap	param.h	/^        double network_gap; \/\/distance between two sensors$/;"	m	struct:parameter
network_height	param.h	/^        double network_height;$/;"	m	struct:parameter
network_sensor_distribution	param.h	/^        distribution_type_t network_sensor_distribution;$/;"	m	struct:parameter
network_sensor_standard_deviation	param.h	/^        double network_sensor_standard_deviation;$/;"	m	struct:parameter
network_width	param.h	/^        double network_width;$/;"	m	struct:parameter
newpage	smpl.c	/^void newpage()$/;"	f
next	graph-data-struct.h	/^		struct _struct_graph_node *next; \/\/neighbor node for vertex$/;"	m	struct:_struct_graph_node	typeref:struct:_struct_graph_node::_struct_graph_node
next	graph-data-struct.h	/^	struct _struct_path_node *next; \/\/next node on the path towards the destination$/;"	m	struct:_struct_path_node	typeref:struct:_struct_path_node::_struct_path_node
next	graph-data-struct.h	/^	struct _struct_set_node *next;$/;"	m	struct:_struct_set_node	typeref:struct:_struct_set_node::_struct_set_node
next	packet-model.h	/^	struct struct_packet* next; \/* next packet *\/$/;"	m	struct:struct_packet	typeref:struct:struct_packet::struct_packet
next	queue.h	/^		struct _packet_pointer_queue_node_t *next;$/;"	m	struct:_packet_pointer_queue_node_t	typeref:struct:_packet_pointer_queue_node_t::_packet_pointer_queue_node_t
next	queue.h	/^		struct _packet_queue_node_t *next; $/;"	m	struct:_packet_queue_node_t	typeref:struct:_packet_queue_node_t::_packet_queue_node_t
next	queue.h	/^	struct _adjacency_list_pointer_queue_node_t *next;$/;"	m	struct:_adjacency_list_pointer_queue_node_t	typeref:struct:_adjacency_list_pointer_queue_node_t::_adjacency_list_pointer_queue_node_t
next	queue.h	/^	struct _adjacency_list_queue_node_t *next;$/;"	m	struct:_adjacency_list_queue_node_t	typeref:struct:_adjacency_list_queue_node_t::_adjacency_list_queue_node_t
next	queue.h	/^	struct _minimum_priority_queue_node_t *next;$/;"	m	struct:_minimum_priority_queue_node_t	typeref:struct:_minimum_priority_queue_node_t::_minimum_priority_queue_node_t
next	queue.h	/^	struct _neighbor_list_queue_node_t *next;$/;"	m	struct:_neighbor_list_queue_node_t	typeref:struct:_neighbor_list_queue_node_t::_neighbor_list_queue_node_t
next	queue.h	/^	struct _packet_forwarding_tree_path_queue_node_t *next;$/;"	m	struct:_packet_forwarding_tree_path_queue_node_t	typeref:struct:_packet_forwarding_tree_path_queue_node_t::_packet_forwarding_tree_path_queue_node_t
next	queue.h	/^	struct _parent_list_queue_node_t *next;$/;"	m	struct:_parent_list_queue_node_t	typeref:struct:_parent_list_queue_node_t::_parent_list_queue_node_t
next	queue.h	/^	struct _path_queue_node_t *next;$/;"	m	struct:_path_queue_node_t	typeref:struct:_path_queue_node_t::_path_queue_node_t
next	queue.h	/^	struct _sensor_queue_node_t *next;$/;"	m	struct:_sensor_queue_node_t	typeref:struct:_sensor_queue_node_t::_sensor_queue_node_t
next	queue.h	/^	struct _target_point_queue_node_t *next;$/;"	m	struct:_target_point_queue_node_t	typeref:struct:_target_point_queue_node_t::_target_point_queue_node_t
next	queue.h	/^        struct _angle_queue_node_t *next; $/;"	m	struct:_angle_queue_node_t	typeref:struct:_angle_queue_node_t::_angle_queue_node_t
next	queue.h	/^        struct _carrier_trace_queue_node_t *next;$/;"	m	struct:_carrier_trace_queue_node_t	typeref:struct:_carrier_trace_queue_node_t::_carrier_trace_queue_node_t
next	queue.h	/^        struct _conditional_forwarding_probability_queue_node_t *next;$/;"	m	struct:_conditional_forwarding_probability_queue_node_t	typeref:struct:_conditional_forwarding_probability_queue_node_t::_conditional_forwarding_probability_queue_node_t
next	queue.h	/^        struct _convoy_queue_node_t *next;$/;"	m	struct:_convoy_queue_node_t	typeref:struct:_convoy_queue_node_t::_convoy_queue_node_t
next	queue.h	/^        struct _delay_component_queue_node_t *next; $/;"	m	struct:_delay_component_queue_node_t	typeref:struct:_delay_component_queue_node_t::_delay_component_queue_node_t
next	queue.h	/^        struct _delay_queue_node_t *next; $/;"	m	struct:_delay_queue_node_t	typeref:struct:_delay_queue_node_t::_delay_queue_node_t
next	queue.h	/^        struct _destination_vehicle_queue_node_t *next;$/;"	m	struct:_destination_vehicle_queue_node_t	typeref:struct:_destination_vehicle_queue_node_t::_destination_vehicle_queue_node_t
next	queue.h	/^        struct _directional_edge_queue_node_t *next; $/;"	m	struct:_directional_edge_queue_node_t	typeref:struct:_directional_edge_queue_node_t::_directional_edge_queue_node_t
next	queue.h	/^        struct _edge_queue_node_t *next; $/;"	m	struct:_edge_queue_node_t	typeref:struct:_edge_queue_node_t::_edge_queue_node_t
next	queue.h	/^        struct _global_packet_queue_node_t *next; $/;"	m	struct:_global_packet_queue_node_t	typeref:struct:_global_packet_queue_node_t::_global_packet_queue_node_t
next	queue.h	/^        struct _intersection_edd_queue_node_t *next; $/;"	m	struct:_intersection_edd_queue_node_t	typeref:struct:_intersection_edd_queue_node_t::_intersection_edd_queue_node_t
next	queue.h	/^        struct _location_queue_node_t *next; $/;"	m	struct:_location_queue_node_t	typeref:struct:_location_queue_node_t::_location_queue_node_t
next	queue.h	/^        struct _mobility_queue_node_t *next;$/;"	m	struct:_mobility_queue_node_t	typeref:struct:_mobility_queue_node_t::_mobility_queue_node_t
next	queue.h	/^        struct _packet_schedule_queue_node_t *next;$/;"	m	struct:_packet_schedule_queue_node_t	typeref:struct:_packet_schedule_queue_node_t::_packet_schedule_queue_node_t
next	queue.h	/^        struct _packet_trajectory_queue_node_t *next;$/;"	m	struct:_packet_trajectory_queue_node_t	typeref:struct:_packet_trajectory_queue_node_t::_packet_trajectory_queue_node_t
next	queue.h	/^        struct _probability_and_statistics_queue_node_t *next;$/;"	m	struct:_probability_and_statistics_queue_node_t	typeref:struct:_probability_and_statistics_queue_node_t::_probability_and_statistics_queue_node_t
next	queue.h	/^        struct _vehicle_movement_queue_node_t *next;$/;"	m	struct:_vehicle_movement_queue_node_t	typeref:struct:_vehicle_movement_queue_node_t::_vehicle_movement_queue_node_t
next	queue.h	/^        struct _vehicle_queue_node_t *next;$/;"	m	struct:_vehicle_queue_node_t	typeref:struct:_vehicle_queue_node_t::_vehicle_queue_node_t
next	queue.h	/^        struct _vehicle_trajectory_queue_node_t *next;$/;"	m	struct:_vehicle_trajectory_queue_node_t	typeref:struct:_vehicle_trajectory_queue_node_t::_vehicle_trajectory_queue_node_t
next	queue.h	/^    struct _access_point_queue_node_t* next; \/* next AP *\/$/;"	m	struct:_access_point_queue_node_t	typeref:struct:_access_point_queue_node_t::_access_point_queue_node_t
next	queue.h	/^    struct _component_vertex_queue_node_t *next; $/;"	m	struct:_component_vertex_queue_node_t	typeref:struct:_component_vertex_queue_node_t::_component_vertex_queue_node_t
next	queue.h	/^    struct _edge_set_queue_node_t *next; $/;"	m	struct:_edge_set_queue_node_t	typeref:struct:_edge_set_queue_node_t::_edge_set_queue_node_t
next	queue.h	/^    struct _forwarding_table_queue_node_t *next;$/;"	m	struct:_forwarding_table_queue_node_t	typeref:struct:_forwarding_table_queue_node_t::_forwarding_table_queue_node_t
next	queue.h	/^    struct _hole_endpoint_queue_node_t *next; $/;"	m	struct:_hole_endpoint_queue_node_t	typeref:struct:_hole_endpoint_queue_node_t::_hole_endpoint_queue_node_t
next	queue.h	/^    struct _hole_segment_queue_node_t *next; $/;"	m	struct:_hole_segment_queue_node_t	typeref:struct:_hole_segment_queue_node_t::_hole_segment_queue_node_t
next	queue.h	/^    struct _queue_node_t *next; $/;"	m	struct:_queue_node_t	typeref:struct:_queue_node_t::_queue_node_t
next	queue.h	/^    struct _schedule_queue_node_t *next; $/;"	m	struct:_schedule_queue_node_t	typeref:struct:_schedule_queue_node_t::_schedule_queue_node_t
next	queue.h	/^    struct _stationary_node_queue_node_t *next;$/;"	m	struct:_stationary_node_queue_node_t	typeref:struct:_stationary_node_queue_node_t::_stationary_node_queue_node_t
next	queue.h	/^    struct _subedge_queue_node_t *next; $/;"	m	struct:_subedge_queue_node_t	typeref:struct:_subedge_queue_node_t::_subedge_queue_node_t
next	queue.h	/^    struct _vertex_set_queue_node_t *next; $/;"	m	struct:_vertex_set_queue_node_t	typeref:struct:_vertex_set_queue_node_t::_vertex_set_queue_node_t
next	schedule.h	/^        struct _schedule_table_node_t *next;$/;"	m	struct:_schedule_table_node_t	typeref:struct:_schedule_table_node_t::_schedule_table_node_t
next	vehicle-model.h	/^    struct struct_vehicle* next; \/* next vehicle *\/$/;"	m	struct:struct_vehicle	typeref:struct:struct_vehicle::struct_vehicle
nl	smpl.h	25;"	d
node	graph-data-struct.h	/^	struct_shortest_path_node node;$/;"	m	struct:_struct_set_node
node	queue.h	/^	char node[NAME_SIZE]; \/\/path node$/;"	m	struct:_path_queue_node_t
node_type	queue.h	/^        vanet_node_type_t node_type; \/\/vanet node type = {VANET_NODE_AP, VANET_NODE_VEHICLE, VANET_NODE_SNODE}$/;"	m	struct:_carrier_trace_queue_node_t
non_superedge_flag	queue.h	/^	boolean non_superedge_flag; \/\/flag to indicate that the packet trajectory in PTQ is not a superedge.$/;"	m	struct:_packet_forwarding_tree_path_queue_node_t
nonintersection_sensor_id_vector_filename	matlab-operation.h	/^        char nonintersection_sensor_id_vector_filename[BUF_SIZE]; \/\/the file name of the nonintersection sensor id vector$/;"	m	struct:_struct_matlab_prefiltering_result
normal	rand.c	/^real normal(real x, real s)$/;"	f
ns	smpl.h	30;"	d
number	graph-data-struct.h	/^	int number; \/\/number of entries$/;"	m	struct:_struct_schedule_table
number	graph-data-struct.h	/^	int number; \/\/number of shortest path sets$/;"	m	struct:_struct_path_table
number	graph-data-struct.h	/^	int number; \/\/number of sources or destinations$/;"	m	struct:_struct_traffic_table
number	schedule.h	/^	int number; \/\/number of table entries$/;"	m	struct:_struct_sensor_table
number_directional_antenna	matlab-operation.h	/^	int number_directional_antenna; \/\/number of RF receiving sensors by directional antenna for full Tx power$/;"	m	struct:_struct_matlab_tracking_result
number_full_tx_power	matlab-operation.h	/^	int number_full_tx_power; \/\/number of RF receiving sensors by full Tx power$/;"	m	struct:_struct_matlab_tracking_result
number_of_arrivals	graph-data-struct.h	/^        int number_of_arrivals; \/\/number of arrivals that is used for the denominator of the branch probability$/;"	m	struct:_struct_graph_node
number_of_branching	graph-data-struct.h	/^        int number_of_branching; \/\/number of branching from the tail node to this node that is a head node where the edge is <tail_node, head_node>; this is equal to number_of_interarrivals+1.$/;"	m	struct:_struct_graph_node
number_of_interarrivals	graph-data-struct.h	/^        int number_of_interarrivals; \/\/number of interarrivals    $/;"	m	struct:_struct_graph_node
number_of_working_sensors	matlab-operation.h	/^	int number_of_working_sensors; \/\/number of working sensors$/;"	m	struct:_struct_matlab_tracking_result
number_tx_and_directional	matlab-operation.h	/^	int number_tx_and_directional; \/\/number of RF receiving sensors by both tx power control and directional antenna for full Tx power$/;"	m	struct:_struct_matlab_tracking_result
number_tx_power_control	matlab-operation.h	/^	int number_tx_power_control; \/\/number of RF receiving sensors by tx power control for full Tx power$/;"	m	struct:_struct_matlab_tracking_result
object	queue.h	/^	void *object; \/\/pointer to the object for the queue node, such as vehicle model$/;"	m	struct:_adjacency_list_queue_node_t
object	queue.h	/^	void *object; \/\/pointer to the object for the queue node, such as vehicle model$/;"	m	struct:_minimum_priority_queue_node_t
object	queue.h	/^	void *object; \/\/pointer to the object for the queue node, such as vehicle model$/;"	m	struct:_neighbor_list_queue_node_t
object	queue.h	/^	void *object; \/\/pointer to the object for the queue node, such as vehicle model$/;"	m	struct:_parent_list_queue_node_t
object_type	queue.h	/^	queue_node_object_type_t object_type; \/\/object type$/;"	m	struct:_adjacency_list_queue_node_t
object_type	queue.h	/^	queue_node_object_type_t object_type; \/\/object type$/;"	m	struct:_minimum_priority_queue_node_t
object_type	queue.h	/^	queue_node_object_type_t object_type; \/\/object type$/;"	m	struct:_neighbor_list_queue_node_t
object_type	queue.h	/^	queue_node_object_type_t object_type; \/\/object type$/;"	m	struct:_parent_list_queue_node_t
offset	graph-data-struct.h	/^	double offset; \/* location from the tail of the edge eid; unit [m] *\/$/;"	m	struct:_struct_coordinate2_t
offset	graph-data-struct.h	/^        double offset; \/\/location from the tail of the edge eid; unit [m]$/;"	m	struct:_struct_coordinate3_t
offset	queue.h	/^	double offset; \/\/offset in the edge in the real graph Gr$/;"	m	struct:_hole_endpoint_queue_node_t
offset	queue.h	/^        double offset; \/\/offset from the tail_node of the edge$/;"	m	struct:_vehicle_movement_queue_node_t
offset	queue.h	/^        double offset; \/\/vehicle's offset in the directional edge$/;"	m	struct:_vehicle_queue_node_t
offset_in_Gr	graph-data-struct.h	/^        double offset_in_Gr; \/\/only for hole graph node, this is the offset at an physical edge in real graph Gr; for other kinds of graph nodes, the offset in this field are set to zero.$/;"	m	struct:_struct_graph_node
open_localization_file	util.c	/^void open_localization_file(char *filename)$/;"	f
open_path_list_file	util.c	/^void open_path_list_file(char *filename)$/;"	f
open_surveillance_file	util.c	/^void open_surveillance_file(char *filename)$/;"	f
open_trace_file	util.c	/^FILE* open_trace_file(char *filename)$/;"	f
open_vanet_file	util.c	/^void open_vanet_file(char *filename)$/;"	f
open_vanet_packet_carrier_trace_file	util.c	/^void open_vanet_packet_carrier_trace_file(char *filename)$/;"	f
operator <<	apl-graph-matching.cc	/^ostream& operator<<(ostream& out, Empty &)$/;"	f
operator <<	apl-graph-matching.cc	/^ostream& operator<<(ostream& out, Weight &w)$/;"	f
operator >>	apl-graph-matching.cc	/^istream& operator>>(istream& in, Empty &)$/;"	f
operator >>	apl-graph-matching.cc	/^istream& operator>>(istream& in, Weight &w)$/;"	f
opf	smpl.c	/^  *opf;              \/* current output destination          *\/$/;"	v	file:
optimal_subsequence_flag	queue.h	/^	boolean optimal_subsequence_flag; \/\/flag to indicate whether this neighbor vehicle belongs to an optimal subsequence.$/;"	m	struct:_neighbor_list_queue_node_t
optimize_refresh_time_golden_search	matlab-operation.c	/^static double optimize_refresh_time_golden_search(double v, double d, double density)$/;"	f	file:
order	queue.h	/^		int order; \/\/order in the queue$/;"	m	struct:_packet_pointer_queue_node_t
order	queue.h	/^	int order;                  \/\/order of the subedge in the subdivision of the edge in Er for the real graph Gr$/;"	m	struct:_subedge_queue_node_t
order	queue.h	/^	int order; \/\/ascending order for EDD or EDD_VAR$/;"	m	struct:_intersection_edd_queue_node_t
order	queue.h	/^	int order; \/\/location order in the edge from the tail node of the edge$/;"	m	struct:_hole_endpoint_queue_node_t
order	queue.h	/^	int order; \/\/location order in the edge from the tail node of the edge$/;"	m	struct:_hole_segment_queue_node_t
order	queue.h	/^	int order; \/\/location order in the edge from the tail node of the edge$/;"	m	struct:_location_queue_node_t
order	queue.h	/^	int order; \/\/order in the queue$/;"	m	struct:_adjacency_list_pointer_queue_node_t
order	queue.h	/^	int order; \/\/order in the queue$/;"	m	struct:_component_vertex_queue_node_t
order	queue.h	/^	int order; \/\/order in the queue$/;"	m	struct:_minimum_priority_queue_node_t
order	queue.h	/^	int order; \/\/order of target intersections; note that the first's order is zero$/;"	m	struct:_target_point_queue_node_t
order	queue.h	/^	int order; \/\/order of visited intersections; note that the first's order is zero$/;"	m	struct:_packet_forwarding_tree_path_queue_node_t
order	queue.h	/^        int order; \/* order in the global packet queue *\/$/;"	m	struct:_global_packet_queue_node_t
order	queue.h	/^        int order; \/\/order according to eid in the increasing order of eid$/;"	m	struct:_delay_component_queue_node_t
order	queue.h	/^        int order; \/\/order according to eid in the increasing order of eid$/;"	m	struct:_delay_queue_node_t
order	queue.h	/^        int order; \/\/order according to eid in the increasing order of eid$/;"	m	struct:_directional_edge_queue_node_t
order	queue.h	/^        int order; \/\/order in terms of offset on the edge; note that the first vehice's order is zero$/;"	m	struct:_vehicle_movement_queue_node_t
order	queue.h	/^        int order; \/\/order of carriers; note that the first's order is zero$/;"	m	struct:_carrier_trace_queue_node_t
order	queue.h	/^        int order; \/\/order of edges; note that the first's order is zero$/;"	m	struct:_conditional_forwarding_probability_queue_node_t
order	queue.h	/^        int order; \/\/order of edges; note that the first's order is zero$/;"	m	struct:_probability_and_statistics_queue_node_t
order	queue.h	/^        int order; \/\/order of the destination vehicle in the destination vehicle queue$/;"	m	struct:_destination_vehicle_queue_node_t
order	queue.h	/^        int order; \/\/order of vehicle within the convoy from the least offset; note that the first's order is zero$/;"	m	struct:_vehicle_queue_node_t
order	queue.h	/^        int order; \/\/order of visited intersections; note that the first's order is zero$/;"	m	struct:_mobility_queue_node_t
order	queue.h	/^        int order; \/\/order of visited intersections; note that the first's order is zero$/;"	m	struct:_packet_trajectory_queue_node_t
order	queue.h	/^        int order; \/\/order of visited landmarks; note that the first's order is zero$/;"	m	struct:_vehicle_trajectory_queue_node_t
order	queue.h	/^        int order; \/\/the order of the packet trajectory queue node corresponding to packet_current_position$/;"	m	struct:_packet_trajectory_queue_t
order	queue.h	/^    int order; \/\/order in the queue$/;"	m	struct:_adjacency_list_queue_node_t
order	queue.h	/^    int order; \/\/order in the queue$/;"	m	struct:_neighbor_list_queue_node_t
order	queue.h	/^    int order; \/\/order in the queue$/;"	m	struct:_parent_list_queue_node_t
order	queue.h	/^    int order; \/\/order of stationary nodes; note that the first's order is zero$/;"	m	struct:_stationary_node_queue_node_t
order_for_live_sensors	queue.h	/^	int order_for_live_sensors; \/\/order of live sensor in the virtual graph Gv, starting from 0; that is, the number of previous live sensors before this sensor from the tail of the edge $/;"	m	struct:_sensor_queue_node_t
order_in_Gr	queue.h	/^	int order_in_Gr; \/\/order of sensor in the real graph Gr, starting from 0; that is, the number of previous sensors before this sensor from the tail of the edge$/;"	m	struct:_sensor_queue_node_t
order_in_Gv	queue.h	/^	int order_in_Gv; \/\/order of sensor in the virtual graph Gv, starting from 0; that is, the number of previous sensors before this sensor from the tail of the edge$/;"	m	struct:_sensor_queue_node_t
original_gnode	graph-data-struct.h	/^        struct _struct_graph_node *original_gnode;$/;"	m	struct:_struct_graph_node	typeref:struct:_struct_graph_node::_struct_graph_node
original_latest_packet_receive_time	vehicle-model.h	/^    double original_latest_packet_receive_time; \/\/original receive time of the packet latest generated by AP in order to check whether either latest_packet_seq or latest_packet_receive_time is updated$/;"	m	struct:struct_vehicle
original_latest_packet_seq	vehicle-model.h	/^    unsigned int original_latest_packet_seq; \/\/original sequence number of the packet latest generated by AP in order to check whether either latest_packet_seq or latest_packet_receive_time is updated$/;"	m	struct:struct_vehicle
original_role	graph-data-struct.h	/^        GRAPH_NODE_ROLE original_role;$/;"	m	struct:_struct_graph_node
original_type	graph-data-struct.h	/^	GRAPH_NODE_TYPE original_type; $/;"	m	struct:_struct_graph_node
original_vertex	graph-data-struct.h	/^        char original_vertex[NAME_SIZE]; \/\/original vertex name for the head node that is a virtual node in the augmented graph Ga$/;"	m	struct:_struct_graph_node
original_weight	graph-data-struct.h	/^        double original_weight; \/\/original weight of the edge before a virtual node subdivides this edge$/;"	m	struct:_struct_graph_node
pEdgeQueueNode	queue.h	/^	struct _edge_queue_node_t *pEdgeQueueNode; \/\/pointer to the edge queue node corresponding to the edge where the sensor is located$/;"	m	struct:_sensor_queue_node_t	typeref:struct:_sensor_queue_node_t::_edge_queue_node_t
pSensorListEntry	queue.h	/^	struct _sensor_queue_node_t **pSensorListEntry; \/\/pointer to the memory of the sensor table entry (pointed by S->list[]) of sensor table S containing all of the sensors; pQueueNode->pSensorListEntry points to the memory cell to point to pQueueNode in order to access to the sensor queue node.$/;"	m	struct:_sensor_queue_node_t	typeref:struct:_sensor_queue_node_t::_sensor_queue_node_t
packet	queue.h	/^		packet_queue_node_t *packet; \/\/pointer to the packet$/;"	m	struct:_packet_pointer_queue_node_t
packet	queue.h	/^        packet_queue_node_t *packet; \/* pointer to packet queue node *\/$/;"	m	struct:_global_packet_queue_node_t
packet_copy_count	queue.h	/^		int packet_copy_count; \/* count for packet copies to delete the global packet queue node; NOTE: packet_copy_count increases (or decreases) as one packet copy is generated (or deleted). *\/$/;"	m	struct:_global_packet_queue_node_t
packet_copy_id	queue.h	/^		int packet_copy_id; \/\/packet copy id$/;"	m	struct:_packet_pointer_queue_node_t
packet_copy_number	queue.h	/^	int packet_copy_number; \/\/number of packet copies under multi-target-point data forwarding$/;"	m	struct:_global_packet_queue_t
packet_delay_measurement_flag	param.h	/^		boolean packet_delay_measurement_flag; \/\/flag to indicate whether the End-to-End Packet Delay Measurement should be performed or not$/;"	m	struct:parameter
packet_delay_measurement_target_point	param.h	/^		int packet_delay_measurement_target_point; \/\/target point for the End-to-End Packet Delay Measurement$/;"	m	struct:parameter
packet_delay_measurement_time	param.h	/^		double packet_delay_measurement_time; \/\/time for the End-to-End Packet Delay Measurement$/;"	m	struct:parameter
packet_deletion_count_vector	queue.h	/^	int *packet_deletion_count_vector; \/\/packet deletion count vector where each entry counts the number of deleted packets due to TTL expiration; this vector will be used to compute discarded_packet_number later$/;"	m	struct:_global_packet_queue_t
packet_delivery_delay_vector	queue.h	/^	double *packet_delivery_delay_vector; \/\/packet delivery delay vector$/;"	m	struct:_global_packet_queue_t
packet_delivery_ratio	common.h	/^  double packet_delivery_ratio; \/\/packet_delivery_ratio = delivered_packet_number\/generated_packet_number$/;"	m	struct:_packet_delivery_statistics_t
packet_delivery_statistics_t	common.h	/^} packet_delivery_statistics_t;$/;"	t	typeref:struct:_packet_delivery_statistics_t
packet_discard_count	queue.h	/^		int packet_discard_count; \/\/count to determine when to delete the corresponding global packet in the global packet queue$/;"	m	struct:_packet_pointer_queue_t
packet_discard_flag	queue.h	/^		boolean packet_discard_flag; \/\/flag to indicate that a packet copy was discarded$/;"	m	struct:_packet_pointer_queue_node_t
packet_discard_time	queue.h	/^		double packet_discard_time; \/\/time when this packet was discarded$/;"	m	struct:_packet_pointer_queue_node_t
packet_duplication_count	queue.h	/^		int packet_duplication_count; \/\/the number of packet duplications to limit the packet copies in Epidemic Routing$/;"	m	struct:_packet_queue_node_t
packet_forwarding_tree_path_queue_node_t	queue.h	/^} packet_forwarding_tree_path_queue_node_t;$/;"	t	typeref:struct:_packet_forwarding_tree_path_queue_node_t
packet_forwarding_tree_path_queue_t	queue.h	/^} packet_forwarding_tree_path_queue_t;$/;"	t	typeref:struct:_packet_forwarding_tree_path_queue_t
packet_generation_time	queue.h	/^    double packet_generation_time;    \/* time when the latest packet is generated by AP *\/$/;"	m	struct:_access_point_queue_node_t
packet_id_bitmap_vector	queue.h	/^	boolean *packet_id_bitmap_vector; \/\/packet id bitmap vector where the entry value of 1 indicates that the packet corresponding to index has been received by the destination vehicle $/;"	m	struct:_global_packet_queue_t
packet_pointer_list	queue.h	/^		packet_pointer_queue_t packet_pointer_list; \/* the list of the pointers of packet copies held by the packet queues carried by vehicles in Epidemic routing or flooding *\/$/;"	m	struct:_global_packet_queue_node_t
packet_pointer_queue_node_t	queue.h	/^} packet_pointer_queue_node_t;$/;"	t	typeref:struct:_packet_pointer_queue_node_t
packet_pointer_queue_t	queue.h	/^} packet_pointer_queue_t;$/;"	t	typeref:struct:_packet_pointer_queue_t
packet_queue	queue.h	/^    struct _packet_queue_t *packet_queue; \/* pointer to packet queue; the memory allocated to packet queue should be released later *\/$/;"	m	struct:_access_point_queue_node_t	typeref:struct:_access_point_queue_node_t::_packet_queue_t
packet_queue	queue.h	/^    struct _packet_queue_t packet_queue; \/* pointer to packet queue; the memory allocated to packet queue should be released later *\/$/;"	m	struct:_stationary_node_queue_node_t	typeref:struct:_stationary_node_queue_node_t::_packet_queue_t
packet_queue	vehicle-model.h	/^    struct _packet_queue_t *packet_queue; \/* pointer to packet queue; the memory allocated to packet queue should be released later *\/$/;"	m	struct:struct_vehicle	typeref:struct:struct_vehicle::_packet_queue_t
packet_queue_node_t	queue.h	/^} packet_queue_node_t;$/;"	t	typeref:struct:_packet_queue_node_t
packet_queue_t	queue.h	/^} packet_queue_t;$/;"	t	typeref:struct:_packet_queue_t
packet_schedule_queue_node_t	queue.h	/^} packet_schedule_queue_node_t;$/;"	t	typeref:struct:_packet_schedule_queue_node_t
packet_schedule_queue_t	queue.h	/^} packet_schedule_queue_t;$/;"	t	typeref:struct:_packet_schedule_queue_t
packet_send_time	queue.h	/^    double packet_send_time;    \/* time when the latest packet is sent to a neighboring vehicle *\/$/;"	m	struct:_access_point_queue_node_t
packet_trajectory	queue.h	/^        packet_trajectory_queue_t packet_trajectory; \/* packet trajectory under download mode *\/$/;"	m	struct:_packet_queue_node_t
packet_trajectory_queue_node_t	queue.h	/^} packet_trajectory_queue_node_t;$/;"	t	typeref:struct:_packet_trajectory_queue_node_t
packet_trajectory_queue_t	queue.h	/^} packet_trajectory_queue_t;$/;"	t	typeref:struct:_packet_trajectory_queue_t
packet_transmission_count	queue.h	/^		int packet_transmission_count; \/\/packet transmission count to count the number of transmissions to next carriers, that is, how many carriers have carried this packet$/;"	m	struct:_packet_queue_node_t
packet_transmission_count_flag	queue.h	/^		boolean packet_transmission_count_flag; \/\/flag to indicate that a packet copy was counted for its transmission number for the global packet$/;"	m	struct:_packet_pointer_queue_node_t
packet_transmission_count_time	queue.h	/^		double packet_transmission_count_time; \/\/time when this packet was counted$/;"	m	struct:_packet_pointer_queue_node_t
parameter	param.h	/^typedef struct parameter$/;"	s
parameter_t	param.h	/^} parameter_t;$/;"	t	typeref:struct:parameter
parent	graph-data-struct.h	/^	char parent[NAME_SIZE];$/;"	m	struct:_struct_shortest_path_node
parent_list	queue.h	/^	parent_list_queue_t parent_list; \/\/parent list queue$/;"	m	struct:_adjacency_list_queue_node_t
parent_list	queue.h	/^	parent_list_queue_t parent_list; \/\/parent list queue$/;"	m	struct:_minimum_priority_queue_node_t
parent_list_queue_node_t	queue.h	/^} parent_list_queue_node_t;$/;"	t	typeref:struct:_parent_list_queue_node_t
parent_list_queue_t	queue.h	/^} parent_list_queue_t;$/;"	t	typeref:struct:_parent_list_queue_t
path_current_edge_offset	vehicle-model.h	/^	double path_current_edge_offset; \/* offset in the current edge along the path that starts from 0 and ends upto the length of the edge *\/$/;"	m	struct:struct_vehicle
path_current_hop	vehicle-model.h	/^    int path_current_hop; \/* this indicates what hop the vehicle is moving; 0 means the first edge on the path and path_hop_count-1 means the last edge on the path *\/$/;"	m	struct:struct_vehicle
path_direction	vehicle-model.h	/^    vehicle_path_direction_t path_direction; \/* path moving direction on its vehicle trajectory *\/$/;"	m	struct:struct_vehicle
path_hop_count	vehicle-model.h	/^    int path_hop_count; \/* hop count for the path, i.e., the number of edges *\/$/;"	m	struct:struct_vehicle
path_length	vehicle-model.h	/^    double path_length; \/* length of the path where the vehicle is moving *\/$/;"	m	struct:struct_vehicle
path_list	packet-model.h	/^	struct_path_node *path_list; \/\/list of vertices (i.e., intersections) on the path from source vehicle to destination access point$/;"	m	struct:struct_packet
path_list	vehicle-model.h	/^    struct_path_node *path_list; \/* list of vertices on the path from source to destination *\/$/;"	m	struct:struct_vehicle
path_ptr	vehicle-model.h	/^    struct_path_node *path_ptr; \/* pointer to the current position vertex (i.e., the tail vertex of the current edge) on the path *\/$/;"	m	struct:struct_vehicle
path_queue_node_t	queue.h	/^} path_queue_node_t;$/;"	t	typeref:struct:_path_queue_node_t
path_queue_t	queue.h	/^} path_queue_t;$/;"	t	typeref:struct:_path_queue_t
path_traverse_count	vehicle-model.h	/^    int path_traverse_count; \/\/count for how many times vehicle passed its vehicle trajectory$/;"	m	struct:struct_vehicle
perform_data_analysis_v1	analysis.c	/^struct_matlab_localization_result* perform_data_analysis_v1(Engine *matlab_ep, parameter_t *param, char *output_file, char *localization_file)$/;"	f
perform_data_analysis_v2	analysis.c	/^struct_matlab_localization_result* perform_data_analysis_v2(Engine *matlab_ep, parameter_t *param, char *output_file, char *localization_file, char *adjacency_matrix_file, char *intersection_vector_file)$/;"	f
perform_enhanced_localization	analysis.c	/^struct_matlab_localization_result* perform_enhanced_localization(Engine *matlab_ep, char *current_directory, int nodenum, int measurement_number, double speed, double speed_deviation, char *adjacency_matrix_filename, char *intersection_vector_filename, char *virtual_topology_filename_prefix, int data_aggregation_type, int data_prefilter_type)$/;"	f
perform_subgraph_matching	analysis.c	/^struct_matlab_localization_result* perform_subgraph_matching(char *current_directory, int nodenum, int measurement_number, double speed, char *adjacency_matrix_filename, char *intersection_vector_filename, char *virtual_topology_filename_prefix, int data_aggregation_type, int data_prefilter_type, struct_matlab_prefiltering_result* prefiltering_result, boolean nonintersection_sensor_localization_flag)$/;"	f
performance_metric_type_t	param.h	/^} performance_metric_type_t;$/;"	t	typeref:enum:_performance_metric_type_t
permutation	util.c	/^int permutation(int n, int r)$/;"	f
permutation_vector_filename	matlab-operation.h	/^        char permutation_vector_filename[BUF_SIZE]; \/\/the file name of the permutation vector$/;"	m	struct:_struct_matlab_prefiltering_result
physical_vector_size	queue.h	/^	int physical_vector_size;$/;"	m	struct:_global_packet_queue_t
pl	smpl.h	31;"	d
pnode	graph-data-struct.h	/^	struct _struct_set_node *pnode; \/\/parent node in set S towards the source whose type is struct_set_node*$/;"	m	struct:_struct_shortest_path_node	typeref:struct:_struct_shortest_path_node::_struct_set_node
pos	sensor-model.h	/^	struct_coordinate1_t pos; \/* current position in the Catesian coordinate system *\/$/;"	m	struct:struct_sensor
pos_in_Gr	sensor-model.h	/^	struct_coordinate2_t pos_in_Gr; \/* current position in the graph coordinate system (i.e., edge id and relative location) in real graph Gr *\/$/;"	m	struct:struct_sensor
pos_in_Gv	sensor-model.h	/^	struct_coordinate2_t pos_in_Gv; \/* current position in the graph coordinate system (i.e., edge id and relative location) in virtual graph Gv *\/$/;"	m	struct:struct_sensor
pos_update_vector	vehicle-model.h	/^    struct_coordinate1_t pos_update_vector; \/* position update vector *\/$/;"	m	struct:struct_vehicle
predicted_encounter_graph	queue.h	/^		struct _predicted_encounter_graph_t *predicted_encounter_graph; \/* predicted encounter graph used in TPD data forwarding *\/$/;"	m	struct:_packet_queue_node_t	typeref:struct:_packet_queue_node_t::_predicted_encounter_graph_t
predicted_encounter_graph	vehicle-model.h	/^	struct _predicted_encounter_graph_t *predicted_encounter_graph; \/\/predicted encounter graph$/;"	m	struct:struct_vehicle	typeref:struct:struct_vehicle::_predicted_encounter_graph_t
predicted_encounter_graph_t	queue.h	/^} predicted_encounter_graph_t;$/;"	t	typeref:struct:_predicted_encounter_graph_t
preempt	smpl.c	/^int preempt(int f, int tkn, int pri)$/;"	f
prefilter_type_t	param.h	/^} prefilter_type_t;$/;"	t	typeref:enum:_prefilter_type_t
prev	graph-data-struct.h	/^	struct _struct_path_node *prev; \/\/previous node on the path towards the destination$/;"	m	struct:_struct_path_node	typeref:struct:_struct_path_node::_struct_path_node
prev	graph-data-struct.h	/^	struct _struct_set_node *prev;$/;"	m	struct:_struct_set_node	typeref:struct:_struct_set_node::_struct_set_node
prev	packet-model.h	/^	struct struct_packet* prev; \/* previous packet *\/$/;"	m	struct:struct_packet	typeref:struct:struct_packet::struct_packet
prev	queue.h	/^		struct _global_packet_queue_node_t *prev;$/;"	m	struct:_global_packet_queue_node_t	typeref:struct:_global_packet_queue_node_t::_global_packet_queue_node_t
prev	queue.h	/^		struct _packet_pointer_queue_node_t *prev;$/;"	m	struct:_packet_pointer_queue_node_t	typeref:struct:_packet_pointer_queue_node_t::_packet_pointer_queue_node_t
prev	queue.h	/^		struct _packet_queue_node_t *prev;$/;"	m	struct:_packet_queue_node_t	typeref:struct:_packet_queue_node_t::_packet_queue_node_t
prev	queue.h	/^	struct _adjacency_list_pointer_queue_node_t *prev;$/;"	m	struct:_adjacency_list_pointer_queue_node_t	typeref:struct:_adjacency_list_pointer_queue_node_t::_adjacency_list_pointer_queue_node_t
prev	queue.h	/^	struct _adjacency_list_queue_node_t *prev;$/;"	m	struct:_adjacency_list_queue_node_t	typeref:struct:_adjacency_list_queue_node_t::_adjacency_list_queue_node_t
prev	queue.h	/^	struct _angle_queue_node_t *prev;$/;"	m	struct:_angle_queue_node_t	typeref:struct:_angle_queue_node_t::_angle_queue_node_t
prev	queue.h	/^	struct _component_vertex_queue_node_t *prev;$/;"	m	struct:_component_vertex_queue_node_t	typeref:struct:_component_vertex_queue_node_t::_component_vertex_queue_node_t
prev	queue.h	/^	struct _delay_component_queue_node_t *prev;$/;"	m	struct:_delay_component_queue_node_t	typeref:struct:_delay_component_queue_node_t::_delay_component_queue_node_t
prev	queue.h	/^	struct _delay_queue_node_t *prev;$/;"	m	struct:_delay_queue_node_t	typeref:struct:_delay_queue_node_t::_delay_queue_node_t
prev	queue.h	/^	struct _edge_queue_node_t *prev;$/;"	m	struct:_edge_queue_node_t	typeref:struct:_edge_queue_node_t::_edge_queue_node_t
prev	queue.h	/^	struct _edge_set_queue_node_t *prev;$/;"	m	struct:_edge_set_queue_node_t	typeref:struct:_edge_set_queue_node_t::_edge_set_queue_node_t
prev	queue.h	/^	struct _hole_endpoint_queue_node_t *prev;$/;"	m	struct:_hole_endpoint_queue_node_t	typeref:struct:_hole_endpoint_queue_node_t::_hole_endpoint_queue_node_t
prev	queue.h	/^	struct _hole_segment_queue_node_t *prev;$/;"	m	struct:_hole_segment_queue_node_t	typeref:struct:_hole_segment_queue_node_t::_hole_segment_queue_node_t
prev	queue.h	/^	struct _intersection_edd_queue_node_t *prev;$/;"	m	struct:_intersection_edd_queue_node_t	typeref:struct:_intersection_edd_queue_node_t::_intersection_edd_queue_node_t
prev	queue.h	/^	struct _location_queue_node_t *prev;$/;"	m	struct:_location_queue_node_t	typeref:struct:_location_queue_node_t::_location_queue_node_t
prev	queue.h	/^	struct _minimum_priority_queue_node_t *prev;$/;"	m	struct:_minimum_priority_queue_node_t	typeref:struct:_minimum_priority_queue_node_t::_minimum_priority_queue_node_t
prev	queue.h	/^	struct _neighbor_list_queue_node_t *prev;$/;"	m	struct:_neighbor_list_queue_node_t	typeref:struct:_neighbor_list_queue_node_t::_neighbor_list_queue_node_t
prev	queue.h	/^	struct _packet_forwarding_tree_path_queue_node_t *prev;$/;"	m	struct:_packet_forwarding_tree_path_queue_node_t	typeref:struct:_packet_forwarding_tree_path_queue_node_t::_packet_forwarding_tree_path_queue_node_t
prev	queue.h	/^	struct _parent_list_queue_node_t *prev;$/;"	m	struct:_parent_list_queue_node_t	typeref:struct:_parent_list_queue_node_t::_parent_list_queue_node_t
prev	queue.h	/^	struct _path_queue_node_t *prev;$/;"	m	struct:_path_queue_node_t	typeref:struct:_path_queue_node_t::_path_queue_node_t
prev	queue.h	/^	struct _queue_node_t *prev;$/;"	m	struct:_queue_node_t	typeref:struct:_queue_node_t::_queue_node_t
prev	queue.h	/^	struct _schedule_queue_node_t *prev;$/;"	m	struct:_schedule_queue_node_t	typeref:struct:_schedule_queue_node_t::_schedule_queue_node_t
prev	queue.h	/^	struct _sensor_queue_node_t *prev;$/;"	m	struct:_sensor_queue_node_t	typeref:struct:_sensor_queue_node_t::_sensor_queue_node_t
prev	queue.h	/^	struct _subedge_queue_node_t *prev;$/;"	m	struct:_subedge_queue_node_t	typeref:struct:_subedge_queue_node_t::_subedge_queue_node_t
prev	queue.h	/^	struct _target_point_queue_node_t *prev;$/;"	m	struct:_target_point_queue_node_t	typeref:struct:_target_point_queue_node_t::_target_point_queue_node_t
prev	queue.h	/^	struct _vertex_set_queue_node_t *prev;$/;"	m	struct:_vertex_set_queue_node_t	typeref:struct:_vertex_set_queue_node_t::_vertex_set_queue_node_t
prev	queue.h	/^        struct _carrier_trace_queue_node_t *prev;$/;"	m	struct:_carrier_trace_queue_node_t	typeref:struct:_carrier_trace_queue_node_t::_carrier_trace_queue_node_t
prev	queue.h	/^        struct _conditional_forwarding_probability_queue_node_t *prev;$/;"	m	struct:_conditional_forwarding_probability_queue_node_t	typeref:struct:_conditional_forwarding_probability_queue_node_t::_conditional_forwarding_probability_queue_node_t
prev	queue.h	/^        struct _convoy_queue_node_t *prev;$/;"	m	struct:_convoy_queue_node_t	typeref:struct:_convoy_queue_node_t::_convoy_queue_node_t
prev	queue.h	/^        struct _destination_vehicle_queue_node_t *prev;$/;"	m	struct:_destination_vehicle_queue_node_t	typeref:struct:_destination_vehicle_queue_node_t::_destination_vehicle_queue_node_t
prev	queue.h	/^        struct _directional_edge_queue_node_t *prev;$/;"	m	struct:_directional_edge_queue_node_t	typeref:struct:_directional_edge_queue_node_t::_directional_edge_queue_node_t
prev	queue.h	/^        struct _mobility_queue_node_t *prev;$/;"	m	struct:_mobility_queue_node_t	typeref:struct:_mobility_queue_node_t::_mobility_queue_node_t
prev	queue.h	/^        struct _packet_schedule_queue_node_t *prev;$/;"	m	struct:_packet_schedule_queue_node_t	typeref:struct:_packet_schedule_queue_node_t::_packet_schedule_queue_node_t
prev	queue.h	/^        struct _packet_trajectory_queue_node_t *prev;$/;"	m	struct:_packet_trajectory_queue_node_t	typeref:struct:_packet_trajectory_queue_node_t::_packet_trajectory_queue_node_t
prev	queue.h	/^        struct _probability_and_statistics_queue_node_t *prev;$/;"	m	struct:_probability_and_statistics_queue_node_t	typeref:struct:_probability_and_statistics_queue_node_t::_probability_and_statistics_queue_node_t
prev	queue.h	/^        struct _vehicle_movement_queue_node_t *prev;$/;"	m	struct:_vehicle_movement_queue_node_t	typeref:struct:_vehicle_movement_queue_node_t::_vehicle_movement_queue_node_t
prev	queue.h	/^        struct _vehicle_queue_node_t *prev;$/;"	m	struct:_vehicle_queue_node_t	typeref:struct:_vehicle_queue_node_t::_vehicle_queue_node_t
prev	queue.h	/^        struct _vehicle_trajectory_queue_node_t *prev;$/;"	m	struct:_vehicle_trajectory_queue_node_t	typeref:struct:_vehicle_trajectory_queue_node_t::_vehicle_trajectory_queue_node_t
prev	queue.h	/^    struct _access_point_queue_node_t* prev; \/* previous AP *\/$/;"	m	struct:_access_point_queue_node_t	typeref:struct:_access_point_queue_node_t::_access_point_queue_node_t
prev	queue.h	/^    struct _forwarding_table_queue_node_t *prev;$/;"	m	struct:_forwarding_table_queue_node_t	typeref:struct:_forwarding_table_queue_node_t::_forwarding_table_queue_node_t
prev	queue.h	/^    struct _stationary_node_queue_node_t *prev;$/;"	m	struct:_stationary_node_queue_node_t	typeref:struct:_stationary_node_queue_node_t::_stationary_node_queue_node_t
prev	schedule.h	/^	struct _schedule_table_node_t *prev;$/;"	m	struct:_schedule_table_node_t	typeref:struct:_schedule_table_node_t::_schedule_table_node_t
prev	vehicle-model.h	/^    struct struct_vehicle* prev; \/* previous vehicle *\/$/;"	m	struct:struct_vehicle	typeref:struct:struct_vehicle::struct_vehicle
print_intersection_visit_count	main.c	/^void print_intersection_visit_count()$/;"	f
probability_and_statistics_queue	queue.h	/^        struct _probability_and_statistics_queue_t probability_and_statistics_queue; \/\/probability-and-statistics queue$/;"	m	struct:_directional_edge_queue_node_t	typeref:struct:_directional_edge_queue_node_t::_probability_and_statistics_queue_t
probability_and_statistics_queue_node_t	queue.h	/^} probability_and_statistics_queue_node_t;$/;"	t	typeref:struct:_probability_and_statistics_queue_node_t
probability_and_statistics_queue_t	queue.h	/^} probability_and_statistics_queue_t;$/;"	t	typeref:struct:_probability_and_statistics_queue_t
process_acl_convoy_for_vehicle_arrival	util.c	/^void process_acl_convoy_for_vehicle_arrival(parameter_t *param, struct_vehicle_t *vehicle, double registration_time, directional_edge_queue_node_t *edge)$/;"	f
process_acl_convoy_for_vehicle_departure	util.c	/^void process_acl_convoy_for_vehicle_departure(parameter_t *param, struct_vehicle_t *vehicle, double departure_time, directional_edge_queue_node_t *edge)$/;"	f
ptr_convoy_queue_node	vehicle-model.h	/^    struct _convoy_queue_node_t *ptr_convoy_queue_node; \/\/pointer to convoy queue node$/;"	m	struct:struct_vehicle	typeref:struct:struct_vehicle::_convoy_queue_node_t
ptr_directional_edge_node	graph-data-struct.h	/^        struct _directional_edge_queue_node_t *ptr_directional_edge_node; \/\/pointer to the directional edge node in directional edge queue DEr for real graph Gr$/;"	m	struct:_struct_graph_node	typeref:struct:_struct_graph_node::_directional_edge_queue_node_t
ptr_edge_node	graph-data-struct.h	/^        struct _edge_queue_node_t *ptr_edge_node; \/\/pointer to the edge node in edge queue Er for real graph Gr$/;"	m	struct:_struct_graph_node	typeref:struct:_struct_graph_node::_edge_queue_node_t
ptr_probability_and_statistics_queue_node	queue.h	/^        struct _probability_and_statistics_queue_node_t *ptr_probability_and_statistics_queue_node; \/\/pointer to the probability and statistics queue node for the carrier moving edge$/;"	m	struct:_conditional_forwarding_probability_queue_node_t	typeref:struct:_conditional_forwarding_probability_queue_node_t::_probability_and_statistics_queue_node_t
ptr_queue	queue.h	/^	struct _adjacency_list_pointer_queue_t *ptr_queue;$/;"	m	struct:_adjacency_list_pointer_queue_node_t	typeref:struct:_adjacency_list_pointer_queue_node_t::_adjacency_list_pointer_queue_t
ptr_queue	queue.h	/^	struct _adjacency_list_queue_t *ptr_queue;$/;"	m	struct:_adjacency_list_queue_node_t	typeref:struct:_adjacency_list_queue_node_t::_adjacency_list_queue_t
ptr_queue	queue.h	/^	struct _component_vertex_queue_t *ptr_queue; \/\/pointer to the queue $/;"	m	struct:_component_vertex_queue_node_t	typeref:struct:_component_vertex_queue_node_t::_component_vertex_queue_t
ptr_queue	queue.h	/^	struct _minimum_priority_queue_t *ptr_queue;$/;"	m	struct:_minimum_priority_queue_node_t	typeref:struct:_minimum_priority_queue_node_t::_minimum_priority_queue_t
ptr_queue	queue.h	/^	struct _neighbor_list_queue_t *ptr_queue;$/;"	m	struct:_neighbor_list_queue_node_t	typeref:struct:_neighbor_list_queue_node_t::_neighbor_list_queue_t
ptr_queue	queue.h	/^	struct _packet_forwarding_tree_path_queue_t *ptr_queue; \/\/pointer to the packet forwarding tree path queue$/;"	m	struct:_packet_forwarding_tree_path_queue_node_t	typeref:struct:_packet_forwarding_tree_path_queue_node_t::_packet_forwarding_tree_path_queue_t
ptr_queue	queue.h	/^	struct _parent_list_queue_t *ptr_queue;$/;"	m	struct:_parent_list_queue_node_t	typeref:struct:_parent_list_queue_node_t::_parent_list_queue_t
ptr_queue	queue.h	/^	struct _target_point_queue_t *ptr_queue; \/\/pointer to the target point queue$/;"	m	struct:_target_point_queue_node_t	typeref:struct:_target_point_queue_node_t::_target_point_queue_t
ptr_queue	queue.h	/^        struct _carrier_trace_queue_t *ptr_queue; \/\/pointer to the carrier trace queue$/;"	m	struct:_carrier_trace_queue_node_t	typeref:struct:_carrier_trace_queue_node_t::_carrier_trace_queue_t
ptr_queue	queue.h	/^        struct _conditional_forwarding_probability_queue_t *ptr_queue; \/\/pointer to the conditional forwarding probability queue$/;"	m	struct:_conditional_forwarding_probability_queue_node_t	typeref:struct:_conditional_forwarding_probability_queue_node_t::_conditional_forwarding_probability_queue_t
ptr_queue	queue.h	/^        struct _convoy_queue_t *ptr_queue; \/\/pointer to the convoy queue$/;"	m	struct:_convoy_queue_node_t	typeref:struct:_convoy_queue_node_t::_convoy_queue_t
ptr_queue	queue.h	/^        struct _destination_vehicle_queue_t *ptr_queue; \/\/pointer to the destination vehicle queue$/;"	m	struct:_destination_vehicle_queue_node_t	typeref:struct:_destination_vehicle_queue_node_t::_destination_vehicle_queue_t
ptr_queue	queue.h	/^        struct _global_packet_queue_t *ptr_queue; \/* pointer to the global packet queue *\/$/;"	m	struct:_global_packet_queue_node_t	typeref:struct:_global_packet_queue_node_t::_global_packet_queue_t
ptr_queue	queue.h	/^        struct _mobility_queue_t *ptr_queue; \/\/pointer to the mobility queue$/;"	m	struct:_mobility_queue_node_t	typeref:struct:_mobility_queue_node_t::_mobility_queue_t
ptr_queue	queue.h	/^        struct _packet_trajectory_queue_t *ptr_queue; \/\/pointer to the packet trajectory queue$/;"	m	struct:_packet_trajectory_queue_node_t	typeref:struct:_packet_trajectory_queue_node_t::_packet_trajectory_queue_t
ptr_queue	queue.h	/^        struct _probability_and_statistics_queue_t *ptr_queue; \/\/pointer to the probability and statistics queue$/;"	m	struct:_probability_and_statistics_queue_node_t	typeref:struct:_probability_and_statistics_queue_node_t::_probability_and_statistics_queue_t
ptr_queue	queue.h	/^        struct _vehicle_movement_queue_t *ptr_queue; \/\/pointer to the vehicle movement queue$/;"	m	struct:_vehicle_movement_queue_node_t	typeref:struct:_vehicle_movement_queue_node_t::_vehicle_movement_queue_t
ptr_queue	queue.h	/^        struct _vehicle_trajectory_queue_t *ptr_queue; \/\/pointer to the trajectory queue$/;"	m	struct:_vehicle_trajectory_queue_node_t	typeref:struct:_vehicle_trajectory_queue_node_t::_vehicle_trajectory_queue_t
ptr_queue	queue.h	/^    struct _forwarding_table_queue_t *ptr_queue; \/\/pointer to the forwarding table queue$/;"	m	struct:_forwarding_table_queue_node_t	typeref:struct:_forwarding_table_queue_node_t::_forwarding_table_queue_t
ptr_queue	queue.h	/^    struct _stationary_node_queue_t *ptr_queue; \/\/pointer to the stationary node queue$/;"	m	struct:_stationary_node_queue_node_t	typeref:struct:_stationary_node_queue_node_t::_stationary_node_queue_t
ptr_queue	queue.h	/^struct _packet_pointer_queue_t *ptr_queue; \/\/pointer to the queue $/;"	m	struct:_packet_pointer_queue_node_t	typeref:struct:_packet_pointer_queue_node_t::_packet_pointer_queue_t
ptr_stationary_node	graph-data-struct.h	/^        struct _stationary_node_queue_node_t *ptr_stationary_node; \/\/pointer to the stationary node in the stationary node queue$/;"	m	struct:_struct_graph_node	typeref:struct:_struct_graph_node::_stationary_node_queue_node_t
ptr_table_node	graph-data-struct.h	/^        struct _schedule_table_node_t *ptr_table_node; \/\/pointer to the table node of an edge which has this graph node as an endpoint$/;"	m	struct:_struct_graph_node	typeref:struct:_struct_graph_node::_schedule_table_node_t
ptr_vanet_table	queue.h	/^	vanet_information_table_t *ptr_vanet_table; \/\/pointer to the vanet table that contains pointers to data structures used in the data forwarding in VANET; the variable pointed by ptr_vanet_table is one member of parameter_t param$/;"	m	struct:_global_packet_queue_t
ptr_vehicle_movement_queue_node	vehicle-model.h	/^    struct _vehicle_movement_queue_node_t *ptr_vehicle_movement_queue_node; \/\/pointer to vehicle movement queue node        $/;"	m	struct:struct_vehicle	typeref:struct:struct_vehicle::_vehicle_movement_queue_node_t
put_elm	smpl.c	/^static void put_elm(int i)$/;"	f	file:
queue_node_object_type_t	queue.h	/^} queue_node_object_type_t;$/;"	t	typeref:enum:_queue_node_object_type_t
queue_node_t	queue.h	/^} queue_node_t;$/;"	t	typeref:struct:_queue_node_t
queue_t	queue.h	/^} queue_t;$/;"	t	typeref:struct:_queue_t
queue_type_t	queue.h	/^} queue_type_t;$/;"	t	typeref:enum:_queue_type_t
queueing_flag	queue.h	/^	boolean queueing_flag; \/\/flag to show whether this node or the pointer to this node is queued in some queue, such as adjacency_list_pointer_queue_t Q$/;"	m	struct:_adjacency_list_queue_node_t
radian2degree	util.c	/^double radian2degree(double radian)$/;"	f
ratio_of_two_delivery_delays	common.h	/^  double ratio_of_two_delivery_delays; \/\/ratio of mean expected delivery delay to mean actual delivery delay$/;"	m	struct:_packet_delivery_statistics_t
read_intersection_pair_matrix_file	analysis.c	/^int read_intersection_pair_matrix_file(ifstream &in_i, node_id sensor_id_list[], int *sensor_id_list_size, node_id intersection_id_list[], int *intersection_id_list_size, node_id sensor_index_list[], int *sensor_index_list_size)$/;"	f
read_permutation_vector_file	analysis.c	/^int read_permutation_vector_file(ifstream &in_p, node_id perm_list[], int *perm_list_size)$/;"	f
real	smpl.h	/^typedef double real;$/;"	t
receive_time	queue.h	/^        double receive_time; \/\/packet receive time for this carrier$/;"	m	struct:_carrier_trace_queue_node_t
recent_detection_time	sensor-model.h	/^	double recent_detection_time; \/* recent detection time *\/$/;"	m	struct:struct_sensor
reduce_density	util.c	/^void reduce_density(struct struct_sensor* sensor, struct struct_sensor* sensor_list, int sensor_number, struct parameter* param)$/;"	f
reference_count	queue.h	/^	int reference_count; \/\/reference count to indicate how many nodes refer to this queue; when the reference count becomes, we can delete the queue pointed by head$/;"	m	struct:_vertex_set_queue_t
register_all_vehicle_movement	util.c	/^void register_all_vehicle_movement(parameter_t *param, double registration_time, struct_graph_node *G)$/;"	f
register_vehicle	util.c	/^struct_vehicle_t* register_vehicle(int vehicle_id, char *traffic_source, double arrival_time, struct_traffic_table *dst_table_for_Gr, struct_traffic_table *ap_table_for_Gr, struct parameter *param, struct_path_table *path_table, struct_graph_node *Gr, int Gr_size, edge_queue_t *Er, double **Dr_move, int **Mr_move)$/;"	f
register_vehicle_movement	util.c	/^void register_vehicle_movement(parameter_t *param, struct_vehicle_t* vehicle, double registration_time, struct_graph_node *G)$/;"	f
registration_time	queue.h	/^        double registration_time; \/\/registration time of this vehicle movemene queue node$/;"	m	struct:_vehicle_movement_queue_node_t
relative_sensing_end_time	sensor-model.h	/^        double relative_sensing_end_time;   \/* relative sensing end time in one working period starting from 0. *\/$/;"	m	struct:struct_sensor
relative_sensing_start_time	sensor-model.h	/^        double relative_sensing_start_time; \/* relative sensing start time in one working period starting from 0. *\/$/;"	m	struct:struct_sensor
release	smpl.c	/^void release(int f, int tkn)$/;"	f
replace_vehicle_trajectory_with_mobility_list	util.c	/^void replace_vehicle_trajectory_with_mobility_list(double arrival_time, parameter_t *param, struct_vehicle_t *vehicle, destination_vehicle_queue_node_t *pQueueNode, struct_graph_node *Gr, int Gr_size)$/;"	f
report	smpl.c	/^void report()$/;"	f
reportf	smpl.c	/^void reportf()$/;"	f
representative	queue.h	/^	struct _edge_set_queue_node_t *representative; \/\/pointer to the representive edge that is used to identify whether two vertices belong to the same set, that is the node just next to the head node$/;"	m	struct:_edge_set_queue_node_t	typeref:struct:_edge_set_queue_node_t::_edge_set_queue_node_t
representative	queue.h	/^	struct _vertex_set_queue_node_t *representative; \/\/pointer to the representive vertex that is used to identify whether two vertices belong to the same set, that is the node just next to the head node$/;"	m	struct:_vertex_set_queue_node_t	typeref:struct:_vertex_set_queue_node_t::_vertex_set_queue_node_t
rept_page	smpl.c	/^static int rept_page(int fnxt)$/;"	f	file:
request	smpl.c	/^int request(int f, int tkn, int pri)$/;"	f
reschedule_flag	sensor-model.h	/^	boolean reschedule_flag; \/* flag indicating that sensor is rescheduled, so it performs just the state of SENSOR_RESCHEDULE.$/;"	m	struct:struct_sensor
reschedule_time	sensor-model.h	/^	double reschedule_time; \/* reschedule time is when sensor has changed its sensing schedule due to the sensing hole handling *\/$/;"	m	struct:struct_sensor
reset	smpl.c	/^void reset()$/;"	f
resetf	smpl.c	/^static void resetf()$/;"	f	file:
restart_time	vehicle-model.h	/^    double restart_time;     \/* time when this vehicle restared its movement with a new trajectory *\/$/;"	m	struct:struct_vehicle
result	matlab-operation.h	/^	int result; \/\/result of matlab operation for localization$/;"	m	struct:_struct_matlab_localization_result
result	matlab-operation.h	/^	int result; \/\/result of matlab operation for localization$/;"	m	struct:_struct_matlab_prefiltering_result
reverse_traversal_completion_flag	queue.h	/^        boolean reverse_traversal_completion_flag; \/\/flag to undicate whether or not the packet has completed the reverse traverse by reaching the start point of the vehicle trajectory$/;"	m	struct:_packet_queue_node_t
reverse_traversal_current_hop_trajectory_qnode	queue.h	/^        vehicle_trajectory_queue_node_t *reverse_traversal_current_hop_trajectory_qnode; \/\/pointer to the vehicle trajectory queue node corresponding to the current hop that is the tail node of the edge having the packet under the reverse traversal mode$/;"	m	struct:_packet_queue_node_t
reverse_traversal_mode_flag	queue.h	/^        boolean reverse_traversal_mode_flag; \/\/flag to indicate whether or not the packet is under the reverse traversal mode where the packet is delivered along the reverse path of the destination vehicle's trajectory in the partially or fully dynamic forwarding$/;"	m	struct:_packet_queue_node_t
reverse_traversal_next_hop_flag	queue.h	/^        boolean reverse_traversal_next_hop_flag; \/\/flag to indicate whether or not the packet's reverse traversal next hop is set as the next destination in the packet trajectory$/;"	m	struct:_packet_queue_node_t
right_hole_offset	queue.h	/^	double right_hole_offset; \/\/offset of right hole in sensing hole area from the tail of the edge$/;"	m	struct:_hole_segment_queue_node_t
right_index	util.c	/^char* right_index(char *s, char c)$/;"	f
road_network_graph_filename	matlab-operation.h	/^        char road_network_graph_filename[BUF_SIZE]; \/\/the file name of the road network graph$/;"	m	struct:_struct_matlab_prefiltering_result
road_sensor_network_graph_filename	matlab-operation.h	/^        char road_sensor_network_graph_filename[BUF_SIZE]; \/\/the file name of the road-sensor network graph that contains the topology of the sensor network deployed on the road network, which is used to compute the localization error$/;"	m	struct:_struct_matlab_prefiltering_result
role	graph-data-struct.h	/^        GRAPH_NODE_ROLE role; \/\/graph node role = {ROLE_INTERSECTION_POINT, ROLE_NONINTERSECTION_POINT, ROLE_ENTRANCE_POINT, ROLE_PROTECTION_POINT, ROLE_HOLE_ENDPOINT, ROLE_ACCESS_POINT};$/;"	m	struct:_struct_graph_node
role	vehicle-model.h	/^    vehicle_role_t role; \/* vehicle role *\/$/;"	m	struct:struct_vehicle
root	queue.h	/^	struct_vehicle_t *root; \/\/root vehicle in the graph$/;"	m	struct:_predicted_encounter_graph_t
run	main.c	/^int run(unsigned int seed, struct parameter *param, char *graph_file, char *schedule_file, char *vanet_file, char *pathlist_file, char *output_file_1, char *output_file_2, char *trace_file_of_vehicle_convoy_length, int *trajectory, int trajectory_size, char *vanet_packet_carrier_trace_file)$/;"	f
save_name	smpl.c	/^int save_name(char *s, int m)$/;"	f
sched_time	graph-data-struct.h	/^	double sched_time; \/\/schedule time when a new vehicle arrives from the corresponding source$/;"	m	struct:_struct_schedule_entry
sched_time	queue.h	/^        double sched_time; \/\/absolute schedule time in simulation$/;"	m	struct:_packet_schedule_queue_node_t
schedule	smpl.c	/^void schedule(int ev, real te, int tkn)$/;"	f
schedule_queue_node_t	queue.h	/^} schedule_queue_node_t;$/;"	t	typeref:struct:_schedule_queue_node_t
schedule_queue_t	queue.h	/^} schedule_queue_t;$/;"	t	typeref:struct:_schedule_queue_t
schedule_table_entry	queue.h	/^	struct _schedule_table_node_t *schedule_table_entry; \/\/pointer to the corresponding schedule table entry that is used to locate the table entry$/;"	m	struct:_subedge_queue_node_t	typeref:struct:_subedge_queue_node_t::_schedule_table_node_t
schedule_table_node_t	schedule.h	/^} schedule_table_node_t;$/;"	t	typeref:struct:_schedule_table_node_t
schedule_table_t	schedule.h	/^} schedule_table_t;$/;"	t	typeref:struct:_schedule_table_t
seed	rand.c	/^long seed(long Ik, int n)$/;"	f
sen_density	sensor-model.h	/^	double sen_density; \/* sensing density *\/$/;"	m	struct:struct_sensor
sendto	smpl.c	/^FILE *sendto(FILE *dest)$/;"	f
sensing_end_time	sensor-model.h	/^	double sensing_end_time;   \/* time when sensor stops sensing in duty cycle *\/$/;"	m	struct:struct_sensor
sensing_hole_endpoint_list	queue.h	/^	hole_endpoint_queue_t sensing_hole_endpoint_list; \/\/sensing hole endpoint list for this edge that has a list of sensing hole nodes$/;"	m	struct:_edge_queue_node_t
sensing_hole_segment_list	queue.h	/^	hole_segment_queue_t sensing_hole_segment_list; \/\/sensing hole segment list for this edge$/;"	m	struct:_edge_queue_node_t
sensing_interval	sensor-model.h	/^	double sensing_interval;   \/* sensing interval in duty cycle *\/$/;"	m	struct:struct_sensor
sensing_range	sensor-model.h	/^	double sensing_range;   \/* sensing range *\/$/;"	m	struct:struct_sensor
sensing_start_time	sensor-model.h	/^	double sensing_start_time;   \/* time when sensor starts sensing in duty cycle *\/$/;"	m	struct:struct_sensor
sensing_start_time_for_reschedule	sensor-model.h	/^	double sensing_start_time_for_reschedule;   \/* time when sensor starts sensing in duty cycle to compute the energy consumption before reschedule *\/$/;"	m	struct:struct_sensor
sensor	queue.h	/^	struct _sensor_queue_node_t *sensor; \/\/pointer to sensor queue node$/;"	m	struct:_location_queue_node_t	typeref:struct:_location_queue_node_t::_sensor_queue_node_t
sensor_degree_vector_filename	matlab-operation.h	/^        char sensor_degree_vector_filename[BUF_SIZE]; \/\/the file name of the sensor degree vector where the degree for each sensor is the number of the sensor's neighbors$/;"	m	struct:_struct_matlab_prefiltering_result
sensor_density	param.h	/^        double sensor_density;   \/\/number of sensors per unit distance (e.g., 1m)$/;"	m	struct:parameter
sensor_density_distribution	param.h	/^        distribution_type_t sensor_density_distribution; \/\/sensor density distribution$/;"	m	struct:parameter
sensor_density_maximum_deviation	param.h	/^        double sensor_density_maximum_deviation; \/\/maximum deviation of sensor density$/;"	m	struct:parameter
sensor_density_standard_deviation	param.h	/^        double sensor_density_standard_deviation; \/\/standard deviation of sensor density$/;"	m	struct:parameter
sensor_deployment_distribtuion	param.h	/^        distribution_type_t sensor_deployment_distribtuion; \/\/sensor deployment distribution$/;"	m	struct:parameter
sensor_deployment_standard_deviation	param.h	/^        double sensor_deployment_standard_deviation; \/\/sensor deployment standard deviation$/;"	m	struct:parameter
sensor_detection_missing_probability	param.h	/^        double sensor_detection_missing_probability; \/\/sensor detection missing probability$/;"	m	struct:parameter
sensor_detection_missing_probability_end	param.h	/^        double sensor_detection_missing_probability_end; \/\/end-value of sensor detection missing probability$/;"	m	struct:parameter
sensor_detection_missing_probability_start	param.h	/^        double sensor_detection_missing_probability_start; \/\/start-value of sensor detection missing probability$/;"	m	struct:parameter
sensor_detection_missing_probability_step	param.h	/^        double sensor_detection_missing_probability_step; \/\/step-value of sensor detection missing probability$/;"	m	struct:parameter
sensor_duplicate_detection_probability	param.h	/^        double sensor_duplicate_detection_probability; \/\/sensor duplicate detection probability$/;"	m	struct:parameter
sensor_duplicate_detection_probability_end	param.h	/^        double sensor_duplicate_detection_probability_end; \/\/end-value of sensor duplicate detection probability$/;"	m	struct:parameter
sensor_duplicate_detection_probability_start	param.h	/^        double sensor_duplicate_detection_probability_start; \/\/start-value of sensor duplicate detection probability$/;"	m	struct:parameter
sensor_duplicate_detection_probability_step	param.h	/^        double sensor_duplicate_detection_probability_step; \/\/step-value of sensor duplicate detection probability$/;"	m	struct:parameter
sensor_energy	param.h	/^        double sensor_energy;$/;"	m	struct:parameter
sensor_energy_consumption_rate	param.h	/^        double sensor_energy_consumption_rate; \/\/amount of energy consumption per unit time        $/;"	m	struct:parameter
sensor_energy_distribution	param.h	/^        distribution_type_t sensor_energy_distribution;$/;"	m	struct:parameter
sensor_energy_maximum_deviation	param.h	/^        double sensor_energy_maximum_deviation;$/;"	m	struct:parameter
sensor_energy_standard_deviation	param.h	/^        double sensor_energy_standard_deviation;$/;"	m	struct:parameter
sensor_hole_handling_algorithm	param.h	/^        hole_handling_algorithm_t sensor_hole_handling_algorithm; \/\/hole handling algorithm for sensing holes due to energy depletion$/;"	m	struct:parameter
sensor_hole_handling_mode	param.h	/^        hole_handling_mode_t sensor_hole_handling_mode; \/\/hole handling mode of incremental labeling or reshuffling labeling$/;"	m	struct:parameter
sensor_initial_hole_handling_algorithm	param.h	/^        hole_handling_algorithm_t sensor_initial_hole_handling_algorithm; \/\/handling algorithm for initial sensing holes$/;"	m	struct:parameter
sensor_list	schedule.h	/^	sensor_queue_t sensor_list; \/\/list of sensor nodes located on this edge$/;"	m	struct:_schedule_table_node_t
sensor_location_list	queue.h	/^	location_queue_t sensor_location_list; \/\/sensor location list for this edge$/;"	m	struct:_edge_queue_node_t
sensor_movement_time_percentage	param.h	/^        double sensor_movement_time_percentage; \/\/percentage of movement time used for the sleeping time: e.g., sensor_movement_time_percentage=50 means that the 50% of the shortest movement time is used for the overall sleeping time along with the shortest scanning time$/;"	m	struct:parameter
sensor_network_graph_filename	matlab-operation.h	/^	char sensor_network_graph_filename[BUF_SIZE]; \/\/the file name of the sensor network graph that is the permuted one for the sensor nodes deployed in the road-sensor network graph$/;"	m	struct:_struct_matlab_prefiltering_result
sensor_number	param.h	/^        int sensor_number;       \/\/number of sensors deployed at the sensor network$/;"	m	struct:parameter
sensor_queue	vehicle-model.h	/^    struct _sensor_queue_t *sensor_queue; \/* pointer to sensor queue; the memory allocated to sensor queue should be released later *\/$/;"	m	struct:struct_vehicle	typeref:struct:struct_vehicle::_sensor_queue_t
sensor_queue_node_t	queue.h	/^} sensor_queue_node_t;$/;"	t	typeref:struct:_sensor_queue_node_t
sensor_queue_t	queue.h	/^} sensor_queue_t;$/;"	t	typeref:struct:_sensor_queue_t
sensor_scan_type	param.h	/^        sensor_scan_type_t sensor_scan_type; \/\/sensor scan type$/;"	m	struct:parameter
sensor_scan_type_t	param.h	/^} sensor_scan_type_t;$/;"	t	typeref:enum:_sensor_scan_type_t
sensor_schedule_mode	param.h	/^        sensor_schedule_mode_type_t sensor_schedule_mode; \/\/sensor schedule mode in simulation in terms of energy budget update$/;"	m	struct:parameter
sensor_schedule_mode_type_t	param.h	/^} sensor_schedule_mode_type_t;$/;"	t	typeref:enum:_sensor_schedule_mode_type_t
sensor_sensing_range	param.h	/^        double sensor_sensing_range; \/\/sensing range: unit is meter$/;"	m	struct:parameter
sensor_sensing_range_distribution	param.h	/^        distribution_type_t sensor_sensing_range_distribution; $/;"	m	struct:parameter
sensor_sensing_range_standard_deviation	param.h	/^        double sensor_sensing_range_standard_deviation;$/;"	m	struct:parameter
sensor_think_time	param.h	/^        double sensor_think_time;$/;"	m	struct:parameter
sensor_think_time_distribution	param.h	/^        distribution_type_t sensor_think_time_distribution;$/;"	m	struct:parameter
sensor_think_time_standard_deviation	param.h	/^        double sensor_think_time_standard_deviation;$/;"	m	struct:parameter
sensor_time_sync_error	param.h	/^        double sensor_time_sync_error; \/\/time synchronization error$/;"	m	struct:parameter
sensor_time_sync_error_distribution	param.h	/^        distribution_type_t sensor_time_sync_error_distribution;$/;"	m	struct:parameter
sensor_time_sync_error_end	param.h	/^        double sensor_time_sync_error_end; \/\/end-value of time synchronization error$/;"	m	struct:parameter
sensor_time_sync_error_standard_deviation	param.h	/^        double sensor_time_sync_error_standard_deviation;$/;"	m	struct:parameter
sensor_time_sync_error_standard_deviation_end	param.h	/^        double sensor_time_sync_error_standard_deviation_end;  \/\/end-value of time synchronization error STD$/;"	m	struct:parameter
sensor_time_sync_error_standard_deviation_start	param.h	/^        double sensor_time_sync_error_standard_deviation_start;\/\/start-value of time synchronization error standard deviation (STD)$/;"	m	struct:parameter
sensor_time_sync_error_standard_deviation_step	param.h	/^        double sensor_time_sync_error_standard_deviation_step; \/\/step-value of time synchronization error STD$/;"	m	struct:parameter
sensor_time_sync_error_start	param.h	/^        double sensor_time_sync_error_start; \/\/start-value of time synchronization error$/;"	m	struct:parameter
sensor_time_sync_error_step	param.h	/^        double sensor_time_sync_error_step; \/\/step-value of time synchronization error$/;"	m	struct:parameter
sensor_time_sync_max_error	param.h	/^        double sensor_time_sync_max_error; \/\/time synchronization maximum error$/;"	m	struct:parameter
sensor_turn_on_energy_consumption	param.h	/^        double sensor_turn_on_energy_consumption; \/* turn_on_energy_consumption *\/$/;"	m	struct:parameter
sensor_warm_up_time	param.h	/^        double sensor_warm_up_time; \/* warm-up time for sensing devices *\/$/;"	m	struct:parameter
sensor_work_time	param.h	/^        double sensor_work_time; \/* the type of time should be double to work well in smpl simulation *\/$/;"	m	struct:parameter
seq	packet-model.h	/^	int seq;   \/* sequence number *\/$/;"	m	struct:struct_packet
seq	queue.h	/^		unsigned int seq; \/* sequence number *\/$/;"	m	struct:_packet_queue_node_t
seq	queue.h	/^    int seq; \/* sequence number for packets *\/$/;"	m	struct:_access_point_queue_node_t
seq	sensor-model.h	/^	int seq;  \/* sequence number *\/$/;"	m	struct:struct_sensor
seq	vehicle-model.h	/^    int seq;  \/* sequence number for generated packets *\/$/;"	m	struct:struct_vehicle
sequence_number	queue.h	/^	int sequence_number; \/\/sequence number that has been allocated recently as an id for a new directional edge node$/;"	m	struct:_directional_edge_queue_t
sequence_number	queue.h	/^	int sequence_number; \/\/sequence number that has been allocated recently as an id for a new edge node$/;"	m	struct:_edge_queue_t
sequence_number	queue.h	/^	int sequence_number; \/\/sequence number that has been allocated recently as an id for a new sensing hole node$/;"	m	struct:_hole_endpoint_queue_t
sequence_number	queue.h	/^        unsigned int sequence_number; \/\/sequence number for counting the number of created convoys in the directional edge$/;"	m	struct:_convoy_queue_t
sequence_number	schedule.h	/^	int sequence_number; \/\/sequence number that has been allocated recently as an eid for a new edge$/;"	m	struct:_schedule_table_t
setLogOnOff	vadd.c	/^void setLogOnOff(boolean onoff)$/;"	f
set_vehicle_current_position	util.c	/^void set_vehicle_current_position(parameter_t *param, struct_vehicle_t *vehicle, double current_time, int *trajectory, int trajectory_size, struct_graph_node *Gr, edge_queue_t *Er)$/;"	f
set_vehicle_speed	util.c	/^void set_vehicle_speed(parameter_t *param, struct_vehicle_t *vehicle)$/;"	f
set_vehicle_trajectory	util.c	/^void set_vehicle_trajectory(struct_vehicle_t *vehicle, double arrival_time, int *trajectory, int trajectory_size, struct_graph_node *Gr, edge_queue_t *Er)$/;"	f
show_status_of_sensors_on_path	util.c	/^void show_status_of_sensors_on_path(FILE *fp, edge_queue_t *E, struct_sensor_table *S, struct_path_node *path_list)$/;"	f
show_trajectory_and_arrival_time_for_all_vehicles	util.c	/^boolean show_trajectory_and_arrival_time_for_all_vehicles()$/;"	f
show_trajectory_and_arrival_time_for_vehicle	util.c	/^boolean show_trajectory_and_arrival_time_for_vehicle(int vid, $/;"	f
sigma	gsl-util.h	/^    double sigma; \/\/standard deviation$/;"	m	struct:H_params
sigma_p	gsl-util.h	/^    double sigma_p; \/\/packet delay standard deviation$/;"	m	struct:_vanet_opt_params_t
sigma_v	gsl-util.h	/^    double sigma_v; \/\/vehicle delay standard deviation$/;"	m	struct:_vanet_opt_params_t
sigma_x	gsl-util.h	/^    double sigma_x; \/\/Vehicle_a's travel delay standard deviation on the edge (n_i, n_j)$/;"	m	struct:_tpd_opt_params_t
sigma_y	gsl-util.h	/^    double sigma_y; \/\/Vehicle_b's travel delay standard deviation on the edge (n_j, n_i)$/;"	m	struct:_tpd_opt_params_t
simulation_iteration_number	param.h	/^	int simulation_iteration_number;$/;"	m	struct:parameter
simulation_mode	param.h	/^	simulation_mode_type_t simulation_mode; \/\/ simulation_mode = time or iteration$/;"	m	struct:parameter
simulation_mode_type_t	param.h	/^} simulation_mode_type_t;$/;"	t	typeref:enum:_simulation_mode_type_t
simulation_run	param.h	/^	simulation_run_type_t simulation_run; \/\/simulation running type$/;"	m	struct:parameter
simulation_run_type_t	param.h	/^} simulation_run_type_t;$/;"	t	typeref:enum:_simulation_run_type_t
simulation_seed	param.h	/^	simulation_seed_type_t simulation_seed; \/\/simulation_seed = default or time()$/;"	m	struct:parameter
simulation_seed_type_t	param.h	/^} simulation_seed_type_t;$/;"	t	typeref:enum:_simulation_seed_type_t
simulation_time	param.h	/^	double simulation_time;$/;"	m	struct:parameter
size	packet-model.h	/^        int size; \/* data size in bytes *\/$/;"	m	struct:struct_packet
size	queue.h	/^		int size;$/;"	m	struct:_packet_pointer_queue_t
size	queue.h	/^	int	size; $/;"	m	struct:_adjacency_list_pointer_queue_t
size	queue.h	/^	int	size; $/;"	m	struct:_adjacency_list_queue_t
size	queue.h	/^	int	size; $/;"	m	struct:_neighbor_list_queue_t
size	queue.h	/^	int	size; $/;"	m	struct:_parent_list_queue_t
size	queue.h	/^	int size; $/;"	m	struct:_minimum_priority_queue_t
size	queue.h	/^	int size; \/\/number of sensors on an edge$/;"	m	struct:_sensor_queue_t
size	queue.h	/^	int size; \/\/size of queue except for head node$/;"	m	struct:_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_angle_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_carrier_trace_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_component_vertex_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_conditional_forwarding_probability_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_delay_component_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_delay_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_destination_vehicle_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_directional_edge_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_edge_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_edge_set_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_global_packet_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_hole_endpoint_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_hole_segment_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_intersection_edd_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_location_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_mobility_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_packet_forwarding_tree_path_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_packet_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_packet_schedule_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_packet_trajectory_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_path_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_probability_and_statistics_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_schedule_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_stationary_node_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_subedge_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_target_point_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_vehicle_movement_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_vehicle_trajectory_queue_t
size	queue.h	/^	int size;$/;"	m	struct:_vertex_set_queue_t
size	queue.h	/^        int size;  \/* data size in bytes *\/$/;"	m	struct:_packet_queue_node_t
size	queue.h	/^        int size;$/;"	m	struct:_convoy_queue_t
size	queue.h	/^        int size;$/;"	m	struct:_vehicle_queue_t
size	queue.h	/^    int size; \/\/size is the same as the number of nodes in the road network graph$/;"	m	struct:_forwarding_table_queue_t
size	queue.h	/^    int size;$/;"	m	struct:_access_point_queue_t
size	schedule.h	/^	int size;$/;"	m	struct:_schedule_table_t
sl	smpl.h	32;"	d
sleeping_end_time	sensor-model.h	/^	double sleeping_end_time;   \/* time is when sensor stops sleeping in duty cycle *\/$/;"	m	struct:struct_sensor
sleeping_interval	sensor-model.h	/^	double sleeping_interval; \/* sleeping interval in duty cycle = sleeping time + scanning time + alpha *\/$/;"	m	struct:struct_sensor
sleeping_start_time	sensor-model.h	/^	double sleeping_start_time; \/* time is when sensor starts sleeping in duty cycle *\/$/;"	m	struct:struct_sensor
smpl	smpl.c	/^void smpl(int m, char *s)$/;"	f
smpl_pause	smpl.c	/^void smpl_pause()$/;"	f
smpl_random	rand.c	/^int smpl_random(int i, int n)$/;"	f
smpl_random_v1	rand.c	/^int smpl_random_v1(int i, int n)$/;"	f
smpl_random_v2	rand.c	/^int smpl_random_v2(int i, int n)$/;"	f
smpl_time	smpl.c	/^real smpl_time()$/;"	f
source_intersection_id	queue.h	/^	int source_intersection_id; \/\/the packet's source intersection id$/;"	m	struct:_packet_forwarding_tree_path_queue_t
source_vid	packet-model.h	/^        int source_vid;  \/* source vehicle id *\/$/;"	m	struct:struct_packet
speed	queue.h	/^        double speed; \/\/vehicle speed$/;"	m	struct:_vehicle_movement_queue_node_t
speed	vehicle-model.h	/^    double speed; \/* movement speed in [m\/s] *\/$/;"	m	struct:struct_vehicle
speed_standard_deviation	vehicle-model.h	/^    double speed_standard_deviation; \/* speed standard deviation in [m\/s] *\/$/;"	m	struct:struct_vehicle
srand48	rand.h	20;"	d
src_id	queue.h	/^        int src_id;  \/* packet source id *\/$/;"	m	struct:_packet_queue_node_t
src_node_type	queue.h	/^        vanet_node_type_t src_node_type; \/* packet source node type = {VANET_NODE_AP, VANET_NODE_VEHICLE} *\/$/;"	m	struct:_packet_queue_node_t
src_vehicle_gnode	queue.h	/^	adjacency_list_queue_node_t *src_vehicle_gnode; \/\/graph node for src_vehicle$/;"	m	struct:_adjacency_list_queue_t
start	smpl.c	/^  start,             \/* simulation interval start time      *\/$/;"	v	file:
state	packet-model.h	/^	int state; \/* packet state *\/$/;"	m	struct:struct_packet
state	queue.h	/^		STATE state; \/* packet state *\/$/;"	m	struct:_global_packet_queue_node_t
state	queue.h	/^		STATE state; \/* packet state *\/$/;"	m	struct:_packet_queue_node_t
state	queue.h	/^    STATE state; \/* AP state *\/$/;"	m	struct:_access_point_queue_node_t
state	sensor-model.h	/^	STATE state; \/* sensor state *\/$/;"	m	struct:struct_sensor
state	vehicle-model.h	/^    STATE state; \/* vehicle state *\/$/;"	m	struct:struct_vehicle
state_before_reschedule	sensor-model.h	/^	STATE state_before_reschedule; \/* sensor state before reschedule *\/$/;"	m	struct:struct_sensor
state_time	queue.h	/^        double state_time; \/* current time for packet state *\/$/;"	m	struct:_global_packet_queue_node_t
state_time	queue.h	/^        double state_time; \/* packet state time *\/$/;"	m	struct:_packet_queue_node_t
state_time	queue.h	/^    double state_time; \/* current time for AP state *\/$/;"	m	struct:_access_point_queue_node_t
state_time	vehicle-model.h	/^    double state_time; \/* current time for vehicle state *\/$/;"	m	struct:struct_vehicle
stationary_node_flag	graph-data-struct.h	/^		boolean stationary_node_flag; \/\/flag to indicate whether this intersection has a working stationary node or not$/;"	m	struct:_struct_graph_node
stationary_node_queue_node_t	queue.h	/^} stationary_node_queue_node_t;$/;"	t	typeref:struct:_stationary_node_queue_node_t
stationary_node_queue_t	queue.h	/^} stationary_node_queue_t;$/;"	t	typeref:struct:_stationary_node_queue_t
status	graph-data-struct.h	/^        USAGE_STATUS status; \/\/status to indicate that this graph node is not used any more, so it can be used for another graph node$/;"	m	struct:_struct_graph_node
status	schedule.h	/^	enum_status_t status; \/\/status of schedule intervals for two directional scans$/;"	m	struct:_schedule_table_node_t
status	smpl.c	/^int status(int f)$/;"	f
std	analysis.c	/^using namespace std;$/;"	v
steering_angle	vehicle-model.h	/^    double steering_angle; \/* steering angle *\/$/;"	m	struct:struct_vehicle
store_evaluation_result_into_file	util.c	/^void store_evaluation_result_into_file(FILE *fp_1, FILE *fp_2, parameter_t *param, unsigned int seed, double sensor_network_lifetime, double average_detection_time, int number_of_detected_vehicles)$/;"	f
store_forwarding_probability_and_statisticis_into_file	util.c	/^void store_forwarding_probability_and_statisticis_into_file(FILE *fp, struct_graph_node *Gr, int Gr_size, directional_edge_queue_t *DEr, char *tail_node, char *head_node)$/;"	f
store_matrix_into_file	analysis.c	/^void store_matrix_into_file(float** A, int n, char* filename)$/;"	f
store_sensor_location_into_file	util.c	/^void store_sensor_location_into_file(edge_queue_t *Er, char* filename)$/;"	f
store_timestamp_info_in_file	analysis.c	/^char* store_timestamp_info_in_file(char *localization_file, int hour, int *NODE_ID, float *TIMESTAMP, int *EVENT, int *VEHICLE_ID, int start_index, int bound_index, int nodenum)$/;"	f
store_trajectory_and_arrival_time_for_all_vehicles	util.c	/^boolean store_trajectory_and_arrival_time_for_all_vehicles()$/;"	f
store_trajectory_and_arrival_time_for_vehicle	util.c	/^boolean store_trajectory_and_arrival_time_for_vehicle(FILE *fp,$/;"	f
store_vanet_evaluation_result_into_file	util.c	/^void store_vanet_evaluation_result_into_file(FILE *fp, parameter_t *param, unsigned int seed, packet_delivery_statistics_t *packet_delivery_statistics, struct_graph_node *G)$/;"	f
stream	rand.c	/^int stream(int n)$/;"	f
strm	rand.c	/^static int strm=1;         \/* index of current stream *\/$/;"	v	file:
struct_access_point_t	queue.h	/^typedef access_point_queue_node_t struct_access_point_t;$/;"	t
struct_coordinate1_t	graph-data-struct.h	/^} struct_coordinate1_t;$/;"	t	typeref:struct:_struct_coordinate1_t
struct_coordinate2_t	graph-data-struct.h	/^} struct_coordinate2_t;$/;"	t	typeref:struct:_struct_coordinate2_t
struct_coordinate3_t	graph-data-struct.h	/^} struct_coordinate3_t;$/;"	t	typeref:struct:_struct_coordinate3_t
struct_graph_node	graph-data-struct.h	/^} struct_graph_node;$/;"	t	typeref:struct:_struct_graph_node
struct_matlab_localization_result	matlab-operation.h	/^} struct_matlab_localization_result;$/;"	t	typeref:struct:_struct_matlab_localization_result
struct_matlab_prefiltering_result	matlab-operation.h	/^} struct_matlab_prefiltering_result;$/;"	t	typeref:struct:_struct_matlab_prefiltering_result
struct_matlab_tracking_result	matlab-operation.h	/^} struct_matlab_tracking_result;$/;"	t	typeref:struct:_struct_matlab_tracking_result
struct_packet	packet-model.h	/^typedef struct struct_packet$/;"	s
struct_packet_t	packet-model.h	/^} struct_packet_t;$/;"	t	typeref:struct:struct_packet
struct_path_node	graph-data-struct.h	/^} struct_path_node;$/;"	t	typeref:struct:_struct_path_node
struct_path_table	graph-data-struct.h	/^} struct_path_table;$/;"	t	typeref:struct:_struct_path_table
struct_schedule_entry	graph-data-struct.h	/^} struct_schedule_entry;$/;"	t	typeref:struct:_struct_schedule_entry
struct_schedule_table	graph-data-struct.h	/^} struct_schedule_table;$/;"	t	typeref:struct:_struct_schedule_table
struct_sensor	sensor-model.h	/^typedef struct struct_sensor $/;"	s
struct_sensor_t	sensor-model.h	/^} struct_sensor_t;$/;"	t	typeref:struct:struct_sensor
struct_sensor_table	schedule.h	/^} struct_sensor_table;$/;"	t	typeref:struct:_struct_sensor_table
struct_set_node	graph-data-struct.h	/^} struct_set_node;$/;"	t	typeref:struct:_struct_set_node
struct_shortest_path_node	graph-data-struct.h	/^} struct_shortest_path_node;$/;"	t	typeref:struct:_struct_shortest_path_node
struct_traffic_node	graph-data-struct.h	/^} struct_traffic_node;$/;"	t	typeref:struct:_struct_traffic_node
struct_traffic_table	graph-data-struct.h	/^} struct_traffic_table;$/;"	t	typeref:struct:_struct_traffic_table
struct_vehicle	vehicle-model.h	/^typedef struct struct_vehicle$/;"	s
struct_vehicle_t	vehicle-model.h	/^} struct_vehicle_t;$/;"	t	typeref:struct:struct_vehicle
subedge	schedule.h	/^	subedge_queue_node_t *subedge; \/\/pointer to the corresponding subedge in Er that is used to deal with the initial sensing hole handling$/;"	m	struct:_schedule_table_node_t
subedge_list	queue.h	/^	subedge_queue_t subedge_list; \/\/subedge list for this edge where subedges are the subdivion of the edge$/;"	m	struct:_edge_queue_node_t
subedge_queue_node_t	queue.h	/^} subedge_queue_node_t;$/;"	t	typeref:struct:_subedge_queue_node_t
subedge_queue_t	queue.h	/^} subedge_queue_t;$/;"	t	typeref:struct:_subedge_queue_t
sum_integer	util.c	/^int sum_integer(int i, int j)$/;"	f
sum_of_interarrival_time	graph-data-struct.h	/^        double sum_of_interarrival_time; \/\/sum of interarrival time$/;"	m	struct:_struct_graph_node
sum_vector	util.c	/^int sum_vector(int *V, int i, int j)$/;"	f
surveillance_restart_time	sensor-model.h	/^        double surveillance_restart_time; \/* surveillance restart time starting from the virtual scanning after rescheduling *\/$/;"	m	struct:struct_sensor
surveillance_start_time	sensor-model.h	/^        double surveillance_start_time; \/* surveillance start time starting from the sleeping corresponding to the movement time on the shortest path *\/$/;"	m	struct:struct_sensor
suspend	smpl.c	/^static int suspend(int tkn)$/;"	f	file:
tail_gnode	queue.h	/^	struct _struct_graph_node *tail_gnode; \/\/pointer to tail graph node for the directional edge$/;"	m	struct:_intersection_edd_queue_node_t	typeref:struct:_intersection_edd_queue_node_t::_struct_graph_node
tail_gnode	queue.h	/^        struct_graph_node *tail_gnode; \/\/pointer to the graph node corresponding to the tail node in <tail_node, head_node>$/;"	m	struct:_angle_queue_node_t
tail_gnode	queue.h	/^        struct_graph_node *tail_gnode; \/\/pointer to the graph node corresponding to the tail node in <tail_node, head_node>$/;"	m	struct:_directional_edge_queue_node_t
tail_node	graph-data-struct.h	/^        char tail_node[NAME_SIZE]; \/\/tail node of a directional edge$/;"	m	struct:_struct_coordinate3_t
tail_node	queue.h	/^	char tail_node[NAME_SIZE];         \/\/tail node of a directional edge$/;"	m	struct:_schedule_queue_node_t
tail_node	queue.h	/^	char tail_node[NAME_SIZE];  \/\/tail node of a directional edge$/;"	m	struct:_angle_queue_node_t
tail_node	queue.h	/^	char tail_node[NAME_SIZE];  \/\/tail node of a directional edge$/;"	m	struct:_edge_queue_node_t
tail_node	queue.h	/^	char tail_node[NAME_SIZE];  \/\/tail node of a directional edge$/;"	m	struct:_edge_set_queue_node_t
tail_node	queue.h	/^	char tail_node[NAME_SIZE];  \/\/tail node of a directional edge$/;"	m	struct:_subedge_queue_node_t
tail_node	queue.h	/^        char tail_node[NAME_SIZE];  \/\/tail node of a directional edge$/;"	m	struct:_directional_edge_queue_node_t
tail_node	queue.h	/^        char tail_node[NAME_SIZE]; \/\/tail vertex$/;"	m	struct:_probability_and_statistics_queue_node_t
tail_node	queue.h	/^        char tail_node[NAME_SIZE]; \/\/tail vertex$/;"	m	struct:_probability_and_statistics_queue_t
tail_node	schedule.h	/^	char tail_node[NAME_SIZE]; \/\/tail node of a directional edge$/;"	m	struct:_schedule_table_node_t
tail_node_of_current_carrier_edge	queue.h	/^        char tail_node_of_current_carrier_edge[NAME_SIZE]; \/\/tail node of current carrier's edge$/;"	m	struct:_conditional_forwarding_probability_queue_node_t
tail_node_of_next_carrier_edge	queue.h	/^        char tail_node_of_next_carrier_edge[NAME_SIZE]; \/\/tail node of next carrier's edge$/;"	m	struct:_conditional_forwarding_probability_queue_node_t
tail_node_offset_in_Gr	schedule.h	/^        double tail_node_offset_in_Gr; \/\/physical offset of tail_node at the physical edge in Gr including this virtual edge (tail_node,head_node)$/;"	m	struct:_schedule_table_node_t
tail_vehicle	queue.h	/^        struct struct_vehicle *tail_vehicle; \/\/convoy tail vehicle; the vehicle that last joined in the convoy$/;"	m	struct:_convoy_queue_node_t	typeref:struct:_convoy_queue_node_t::struct_vehicle
tail_vertex	queue.h	/^	int tail_vertex; \/\/tail vertex for encounter edge$/;"	m	struct:_neighbor_list_queue_node_t
tail_vertex	queue.h	/^	int tail_vertex; \/\/tail vertex for encounter edge$/;"	m	struct:_parent_list_queue_node_t
target_point	queue.h	/^    struct_coordinate3_t target_point; \/* the position of the target point for the directional edge in Ga *\/$/;"	m	struct:_access_point_queue_node_t
target_point_arrival_flag	queue.h	/^		boolean target_point_arrival_flag; \/\/flag to indicate that the packet was delivered to a target point$/;"	m	struct:_packet_pointer_queue_node_t
target_point_arrival_time	queue.h	/^		double target_point_arrival_time; \/\/time when this packet arrived at the target point$/;"	m	struct:_packet_pointer_queue_node_t
target_point_gnode	queue.h	/^        struct_graph_node *target_point_gnode; \/\/pointer to the graph node corresponding to target_point_id$/;"	m	struct:_vehicle_trajectory_queue_t
target_point_id	queue.h	/^	int target_point_id; \/\/target intersection id$/;"	m	struct:_target_point_queue_node_t
target_point_id	queue.h	/^  	int target_point_id; \/\/target point id, that is, packet destination id$/;"	m	struct:_packet_forwarding_tree_path_queue_node_t
target_point_id	queue.h	/^        int target_point_id; \/* Under download mode or V2V mode, this is target point id for the destination vehicle where target point id is the intersection id, not vehicle id *\/$/;"	m	struct:_packet_queue_node_t
target_point_id	queue.h	/^        int target_point_id; \/\/id of target point determined by AP for the packet-receiving position of the destination vehicle$/;"	m	struct:_vehicle_trajectory_queue_t
target_point_id	queue.h	/^        int target_point_id; \/\/target point id$/;"	m	struct:_carrier_trace_queue_node_t
target_point_id	queue.h	/^        int target_point_id; \/\/target point intersection id$/;"	m	struct:_global_packet_queue_node_t
target_point_id	queue.h	/^    int target_point_id; \/* AP's current target point for a destination vehicle *\/$/;"	m	struct:_access_point_queue_node_t
target_point_id	queue.h	/^    int target_point_id; \/\/target point id of the packet latest generated by AP$/;"	m	struct:_stationary_node_queue_node_t
target_point_id	vehicle-model.h	/^    int target_point_id; \/\/target point id of the packet latest generated by AP$/;"	m	struct:struct_vehicle
target_point_index	param.h	/^        int target_point_index; \/\/the index to enumerate the target points from the beginning of the vehicle trajectory to the end of the vehicle trajectory$/;"	m	struct:parameter
target_point_interdistance	param.h	/^        double target_point_interdistance; \/\/the interdistance between two consecutive target points on the target vehicle's trajectory; unit is meter.$/;"	m	struct:parameter
target_point_queue_node_t	queue.h	/^} target_point_queue_node_t;$/;"	t	typeref:struct:_target_point_queue_node_t
target_point_queue_t	queue.h	/^} target_point_queue_t;$/;"	t	typeref:struct:_target_point_queue_t
target_point_recomputation_interval	queue.h	/^        double target_point_recomputation_interval; \/* the time interval to recompute a new target point during the packet delivery *\/$/;"	m	struct:_global_packet_queue_node_t
target_point_recomputation_interval	queue.h	/^        double target_point_recomputation_interval; \/* the time interval to recompute a new target point during the packet delivery *\/$/;"	m	struct:_packet_queue_node_t
target_point_recomputation_time	queue.h	/^        double target_point_recomputation_time; \/* the time instant to recompute a new target point during the packet delivery in simulation time *\/$/;"	m	struct:_global_packet_queue_node_t
target_point_recomputation_time	queue.h	/^        double target_point_recomputation_time; \/* the time instant to recompute a new target point during the packet delivery in simulation time *\/$/;"	m	struct:_packet_queue_node_t
target_point_recomputation_time	vehicle-model.h	/^    double target_point_recomputation_time; \/\/recomputation time for a new target point for the packet in this vehicle$/;"	m	struct:struct_vehicle
test_combinations	util.c	/^int test_combinations(int n, int k) $/;"	f
test_get_position_on_linear_curve	util.c	/^void test_get_position_on_linear_curve()$/;"	f
then	rand.h	24;"	d
then	smpl.h	17;"	d
theta	graph-data-struct.h	/^        double theta; \/\/angle in degrees between the vehicle movement vector and the destination vector$/;"	m	struct:_struct_graph_node
theta	queue.h	/^        double theta; \/\/angle in degrees between the vehicle movement vector and the destination vector$/;"	m	struct:_angle_queue_node_t
threshold	apl-graph-matching.h	/^  double threshold; \/\/threshold for comparison$/;"	m	class:WeightComparator
time_for_state_sensor_die	sensor-model.h	/^	double time_for_state_sensor_die;      \/* time when the sensor will process the state of SENSOR_DIE *\/$/;"	m	struct:struct_sensor
time_for_state_sensor_estimate	sensor-model.h	/^	double time_for_state_sensor_estimate; \/* time when the sensor will process the state of SENSOR_ESTIMATE *\/$/;"	m	struct:struct_sensor
time_for_state_sensor_sense	sensor-model.h	/^	double time_for_state_sensor_sense;    \/* time when the sensor will process the state of SENSOR_SENSE *\/$/;"	m	struct:struct_sensor
time_for_state_sensor_sleep	sensor-model.h	/^	double time_for_state_sensor_sleep;    \/* time when the sensor will process the state of SENSOR_SLEEP *\/$/;"	m	struct:struct_sensor
time_sync_error	sensor-model.h	/^	double time_sync_error; \/* time synchronization error *\/$/;"	m	struct:struct_sensor
timestamp	graph-data-struct.h	/^	double timestamp; \/\/time when this entry was updated$/;"	m	struct:_struct_schedule_entry
timestamp	queue.h	/^        double timestamp; \/\/schedule assignment time$/;"	m	struct:_packet_schedule_queue_node_t
timestamp	queue.h	/^        double timestamp; \/\/timestamp to specify when this information is stored in the simulation$/;"	m	struct:_probability_and_statistics_queue_node_t
tl	smpl.c	/^  tl;                \/* last trace message issue time       *\/$/;"	v	file:
token	smpl.c	/^  token,             \/* last token dispatched               *\/$/;"	v	file:
total_sensor_number	queue.h	/^	int total_sensor_number; \/\/total number of sensors on an edge in real graph Gr $/;"	m	struct:_edge_queue_node_t
tp_table	queue.h	/^    struct_traffic_table tp_table; \/\/target point traffic table$/;"	m	struct:_stationary_node_queue_node_t
tp_table	vehicle-model.h	/^    struct_traffic_table tp_table; \/\/target point traffic table$/;"	m	struct:struct_vehicle
tpd_delivery_probability_threshold	param.h	/^	double tpd_delivery_probability_threshold; \/\/ E2E delivery probability threshold that lets RSU forward its packets to a next-carrier vehicle within the communication range$/;"	m	struct:parameter
tpd_encounter_graph_optimization_flag	param.h	/^	boolean tpd_encounter_graph_optimization_flag; \/\/flag to determine whether to perform Dynamic Programming (DP) for the optimization of the predicted encounter graph for a better EDR$/;"	m	struct:parameter
tpd_encounter_graph_source_routing_flag	param.h	/^	boolean tpd_encounter_graph_source_routing_flag; \/\/flag to determine whether to perform source routing with the predicted encounter graph$/;"	m	struct:parameter
tpd_encounter_probability_threshold	param.h	/^	double tpd_encounter_probability_threshold; \/\/encounter probability threshold that considers two vehicles to encounter in an edge in a road network graph$/;"	m	struct:parameter
tpd_opt_params_t	gsl-util.h	/^} tpd_opt_params_t;$/;"	t	typeref:struct:_tpd_opt_params_t
tr	smpl.c	/^  tr,                \/* event trace flag                    *\/$/;"	v	file:
trace	smpl.c	/^void trace(int n)$/;"	f
trajectory_type	queue.h	/^        vanet_vehicle_trajectory_type_t trajectory_type; \/\/vehicle trajectory type$/;"	m	struct:_vehicle_trajectory_queue_t
travel_time	graph-data-struct.h	/^	double travel_time; \/\/the mean of vehicle's travel time to this path node$/;"	m	struct:_struct_path_node
travel_time_standard_deviation	graph-data-struct.h	/^	double travel_time_standard_deviation; \/\/the standard deviation of vehicle's travel time to this path node$/;"	m	struct:_struct_path_node
ttl	queue.h	/^        double ttl; \/* Time To Live (TTL): We can set TTL according to vehicle's EDD, such as EDD*2 *\/$/;"	m	struct:_packet_queue_node_t
turn_on_energy_consumption	sensor-model.h	/^	double turn_on_energy_consumption; \/* turn_on_energy_consumption *\/$/;"	m	struct:struct_sensor
type	graph-data-struct.h	/^	GRAPH_NODE_TYPE type; \/\/graph node type = {INTERSECTION_GRAPH_NODE, NONINTERSECTION_GRAPH_NODE, ENTRANCE_GRAPH_NODE, PROTECTION_GRAPH_NODE, HOLE_GRAPH_NODE, ACCESS_POINT_GRAPH_NODE};$/;"	m	struct:_struct_graph_node
type	graph-data-struct.h	/^        coordinate_directional_edge_type_t type; \/\/type of directional edge for coordinate$/;"	m	struct:_struct_coordinate3_t
type	queue.h	/^		queue_type_t type; \/\/queue type$/;"	m	struct:_packet_pointer_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_adjacency_list_pointer_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_adjacency_list_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_angle_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_carrier_trace_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_component_vertex_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_conditional_forwarding_probability_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_delay_component_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_delay_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_destination_vehicle_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_directional_edge_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_edge_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_edge_set_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_global_packet_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_hole_endpoint_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_hole_segment_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_intersection_edd_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_location_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_minimum_priority_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_mobility_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_neighbor_list_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_packet_forwarding_tree_path_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_packet_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_packet_schedule_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_packet_trajectory_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_parent_list_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_path_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_probability_and_statistics_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_schedule_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_sensor_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_stationary_node_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_subedge_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_target_point_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_vehicle_movement_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_vehicle_trajectory_queue_t
type	queue.h	/^	queue_type_t type; \/\/queue type$/;"	m	struct:_vertex_set_queue_t
type	queue.h	/^        queue_type_t type; $/;"	m	struct:_vehicle_queue_t
type	queue.h	/^        queue_type_t type;$/;"	m	struct:_convoy_queue_t
type	queue.h	/^        vanet_metric_type_t type; \/\/VANET Metric Type = {EDD, EDD_VAR}$/;"	m	struct:_intersection_edd_queue_node_t
type	queue.h	/^    queue_type_t type; \/\/queue type$/;"	m	struct:_access_point_queue_t
type	queue.h	/^    queue_type_t type; \/\/queue type$/;"	m	struct:_forwarding_table_queue_t
type	schedule.h	/^        enum_segment_type_t type; \/\/type of road segment = {SEGMENT_TYPE_SENSOR_SEGMENT, SEGMENT_TYPE_HOLE_SEGMENT};$/;"	m	struct:_schedule_table_node_t
type	sensor-model.h	/^	SENSOR_TYPE type; \/* sensor type = {INTERSECTION_NODE, NONINTERSECTION_NODE} *\/$/;"	m	struct:struct_sensor
type	vehicle-model.h	/^    vehicle_type_t type; \/* vehicle type *\/$/;"	m	struct:struct_vehicle
uniform	rand.c	/^double uniform(double a, double b)$/;"	f
unit_length_mean_travel_time	vehicle-model.h	/^	double unit_length_mean_travel_time; \/* mean travel time for unit length [s\/m] *\/$/;"	m	struct:struct_vehicle
unit_length_travel_time_standard_deviation	vehicle-model.h	/^	double unit_length_travel_time_standard_deviation; \/* travel time standard deviation for unit length [s\/m] *\/$/;"	m	struct:struct_vehicle
unit_length_travel_time_variance	vehicle-model.h	/^	double unit_length_travel_time_variance; \/* travel time variance for unit length [(s\/m)^2] *\/$/;"	m	struct:struct_vehicle
update_all_sensors_state	util.c	/^void update_all_sensors_state(double current_time, struct_sensor_table *S, parameter_t *param)$/;"	f
update_all_vehicle_edd	util.c	/^void update_all_vehicle_edd(double update_time, parameter_t *param, struct_graph_node *G, int G_size, struct_traffic_table *ap_table)$/;"	f
update_all_vehicle_edd_and_edd_sd	util.c	/^void update_all_vehicle_edd_and_edd_sd(double update_time, parameter_t *param, struct_graph_node *G, int G_size, struct_traffic_table *ap_table)$/;"	f
update_live_sensor_list	util.c	/^int update_live_sensor_list(struct struct_sensor *sensor, int *S_ID, double *S_X, double *S_Y, int *p_live_sensor_number)$/;"	f
update_sensor_state_with_energy_budget_and_work_schedule	util.c	/^void update_sensor_state_with_energy_budget_and_work_schedule(double current_time, struct_sensor_t *sensor_info, parameter_t *param)$/;"	f
update_time	vehicle-model.h	/^    double update_time; \/* time to update the vehicle's mobility behavior *\/$/;"	m	struct:struct_vehicle
update_vehicle_maximum_and_minimum_speeds	param.c	/^void update_vehicle_maximum_and_minimum_speeds(parameter_t *param)$/;"	f
update_vehicle_trajectory	util.c	/^void update_vehicle_trajectory(struct_vehicle_t* vehicle, double arrival_time, struct_traffic_table *dst_table_for_Gr, struct_traffic_table *ap_table_for_Gr, struct parameter *param, struct_path_table *path_table, struct_graph_node *Gr, int Gr_size, edge_queue_t *Er, double **Dr_move, int **Mr_move)$/;"	f
update_vehicle_trajectory_with_mobility_list	util.c	/^void update_vehicle_trajectory_with_mobility_list(double arrival_time, parameter_t *param, struct_vehicle_t *vehicle, destination_vehicle_queue_node_t *pQueueNode, struct_graph_node *Gr, int Gr_size)$/;"	f
vanet_edd_and_link_model_type_t	param.h	/^} vanet_edd_and_link_model_type_t;$/;"	t	typeref:enum:_vanet_edd_and_link_model_type_t
vanet_edd_computation_model_type_t	param.h	/^} vanet_edd_computation_model_type_t;$/;"	t	typeref:enum:_vanet_edd_computation_model_type_t
vanet_edd_model_type_t	param.h	/^} vanet_edd_model_type_t;$/;"	t	typeref:enum:_vanet_edd_model_type_t
vanet_edge_delay_model_type_t	param.h	/^} vanet_edge_delay_model_type_t;$/;"	t	typeref:enum:_vanet_edge_delay_model_type_t
vanet_forwarding_scheme	param.h	/^		vanet_forwarding_scheme_t vanet_forwarding_scheme; \/\/vanet forwarding scheme$/;"	m	struct:parameter
vanet_forwarding_scheme_t	param.h	/^} vanet_forwarding_scheme_t;$/;"	t	typeref:enum:_vanet_forwarding_scheme_t
vanet_forwarding_type_t	param.h	/^} vanet_forwarding_type_t;$/;"	t	typeref:enum:_vanet_forwarding_type_t
vanet_information_table_t	param.h	/^} vanet_information_table_t;$/;"	t	typeref:struct:_vanet_information_table_t
vanet_intersection_forwarding_type_t	param.h	/^} vanet_intersection_forwarding_type_t;$/;"	t	typeref:enum:_vanet_intersection_forwarding_type_t
vanet_metric_type_t	param.h	/^} vanet_metric_type_t;$/;"	t	typeref:enum:_vanet_metric_type_t
vanet_node_type_t	common.h	/^} vanet_node_type_t;$/;"	t	typeref:enum:_vanet_node_type_t
vanet_opt_params_t	gsl-util.h	/^} vanet_opt_params_t;$/;"	t	typeref:struct:_vanet_opt_params_t
vanet_packet_forwarding_mode_t	param.h	/^} vanet_packet_forwarding_mode_t;$/;"	t	typeref:enum:_vanet_packet_forwarding_mode_t
vanet_process_data_for_statistics	vanet_produce_statistics.pm	/^sub vanet_process_data_for_statistics$/;"	s
vanet_produce_statistics	vanet_produce_statistics.pm	/^sub vanet_produce_statistics$/;"	s
vanet_store_cdf_statistics_into_file	vanet_compute_cdf_of_delivery_delay.pl	/^sub vanet_store_cdf_statistics_into_file$/;"	s
vanet_store_statistics_into_file	vanet_produce_statistics.pm	/^sub vanet_store_statistics_into_file$/;"	s
vanet_table	param.h	/^        vanet_information_table_t vanet_table; \/\/this table contains the pointers to data structures used in the data forwarding in VANET, such as road network graph Gr, the EDD shortest path matrix Dr_edd, etc.$/;"	m	struct:parameter
vanet_target_point_computation_method_t	param.h	/^} vanet_target_point_computation_method_t;$/;"	t	typeref:enum:_vanet_target_point_computation_method_t
vanet_target_point_optimization_function_type_t	param.h	/^} vanet_target_point_optimization_function_type_t;$/;"	t	typeref:enum:_vanet_target_point_optimization_function_type_t
vanet_target_point_search_space_type_t	param.h	/^} vanet_target_point_search_space_type_t;$/;"	t	typeref:enum:_vanet_target_point_search_space_type_t
vanet_target_point_selection_type_t	param.h	/^} vanet_target_point_selection_type_t;$/;"	t	typeref:enum:_vanet_target_point_selection_type_t
vanet_tbd_edd_computation_type_t	param.h	/^} vanet_tbd_edd_computation_type_t;$/;"	t	typeref:enum:_vanet_tbd_edd_computation_type_t
vanet_vehicle_trajectory_length_type_t	param.h	/^} vanet_vehicle_trajectory_length_type_t;$/;"	t	typeref:enum:_vanet_vehicle_trajectory_length_type_t
vanet_vehicle_trajectory_type_t	param.h	/^} vanet_vehicle_trajectory_type_t;$/;"	t	typeref:enum:_vanet_vehicle_trajectory_type_t
vanet_vehicular_traffic_model_type_t	param.h	/^} vanet_vehicular_traffic_model_type_t;$/;"	t	typeref:enum:_vanet_vehicular_traffic_model_type_t
vehicle_AP_passing_entity_number	param.h	/^        int vehicle_AP_passing_entity_number; \/\/number of vehicle passing AP(s)$/;"	m	struct:parameter
vehicle_AP_passing_entity_percentage	param.h	/^        double vehicle_AP_passing_entity_percentage; \/\/percentage of vehicles passing AP(s); in random-way-point model, the destination is one of APs alternately such as the first destination is an intersection with AP (called AP-intersection) and the next destination is an intersection without AP (non-AP-intersection).$/;"	m	struct:parameter
vehicle_delete	util.c	/^boolean vehicle_delete(int id)$/;"	f
vehicle_edd_update_period	param.h	/^        double vehicle_edd_update_period; \/\/period when the Expected Delivery Delay (EDD) is recalculated based on accumulated vehicular traffic statistics$/;"	m	struct:parameter
vehicle_euclidean_pos	queue.h	/^        struct_coordinate1_t vehicle_euclidean_pos; \/\/position in Euclidean space in the format of (x-coordinate, y-coordinate)       $/;"	m	struct:_vehicle_trajectory_queue_t
vehicle_graph_pos	queue.h	/^        struct_coordinate3_t vehicle_graph_pos; \/\/position in road network graph in the format of (eid, offset, enode)$/;"	m	struct:_vehicle_trajectory_queue_t
vehicle_initial_arrival_time	param.h	/^	double vehicle_initial_arrival_time; \/\/the arrival time of the first vehicle$/;"	m	struct:parameter
vehicle_insert	util.c	/^void vehicle_insert(struct struct_vehicle* vehicle)$/;"	f
vehicle_interarrival_time	param.h	/^	double vehicle_interarrival_time;$/;"	m	struct:parameter
vehicle_interarrival_time_distribution	param.h	/^	distribution_type_t vehicle_interarrival_time_distribution;$/;"	m	struct:parameter
vehicle_interarrival_time_end	param.h	/^	double vehicle_interarrival_time_end;$/;"	m	struct:parameter
vehicle_interarrival_time_standard_deviation	param.h	/^	double vehicle_interarrival_time_standard_deviation;$/;"	m	struct:parameter
vehicle_interarrival_time_start	param.h	/^	double vehicle_interarrival_time_start;$/;"	m	struct:parameter
vehicle_interarrival_time_step	param.h	/^	double vehicle_interarrival_time_step;$/;"	m	struct:parameter
vehicle_list	queue.h	/^        struct _vehicle_queue_t vehicle_list; \/\/vehicle queue containing the pointers to the vehicles$/;"	m	struct:_convoy_queue_node_t	typeref:struct:_convoy_queue_node_t::_vehicle_queue_t
vehicle_list	util.c	/^static struct struct_vehicle vehicle_list; \/* head node for vehicle list *\/$/;"	v	typeref:struct:struct_vehicle	file:
vehicle_maximum_interarrival_time	param.h	/^	double vehicle_maximum_interarrival_time; \/\/vehicle's maximum interarrival time$/;"	m	struct:parameter
vehicle_maximum_interarrival_time_factor	param.h	/^	double vehicle_maximum_interarrival_time_factor; \/\/factor to determine vehicle's maximum interarrival time $/;"	m	struct:parameter
vehicle_maximum_number	param.h	/^        int vehicle_maximum_number; \/\/maximum number of vehicles injected into road network$/;"	m	struct:parameter
vehicle_maximum_number	queue.h	/^		int vehicle_maximum_number; \/* the maximum number of vehicles in the target road network; this is used to construct a predicted encounter graph for TPD data forwarding *\/$/;"	m	struct:_packet_queue_node_t
vehicle_maximum_speed	param.h	/^	double vehicle_maximum_speed; \/\/vehicle maximum speed: unit is meter\/sec$/;"	m	struct:parameter
vehicle_maximum_speed_in_km_per_hour	param.h	/^	double vehicle_maximum_speed_in_km_per_hour; \/\/vehicle maximum speed: unit is km\/h$/;"	m	struct:parameter
vehicle_maximum_speed_in_mile_per_hour	param.h	/^	double vehicle_maximum_speed_in_mile_per_hour; \/\/vehicle maximum speed: unit is mph$/;"	m	struct:parameter
vehicle_mean_think_time	param.h	/^	double vehicle_mean_think_time; \/\/mean waiting time at intersection node due to either stop sign or traffic signal$/;"	m	struct:parameter
vehicle_minimum_speed	param.h	/^	double vehicle_minimum_speed; \/\/vehicle minimum speed: unit is meter\/sec$/;"	m	struct:parameter
vehicle_minimum_speed_in_km_per_hour	param.h	/^	double vehicle_minimum_speed_in_km_per_hour; \/\/vehicle minimum speed: unit is km\/h$/;"	m	struct:parameter
vehicle_minimum_speed_in_mile_per_hour	param.h	/^	double vehicle_minimum_speed_in_mile_per_hour; \/\/vehicle minimum speed: unit is mph$/;"	m	struct:parameter
vehicle_movement_list	queue.h	/^        struct _vehicle_movement_queue_t vehicle_movement_list; \/\/vehicle movement queue$/;"	m	struct:_directional_edge_queue_node_t	typeref:struct:_directional_edge_queue_node_t::_vehicle_movement_queue_t
vehicle_movement_queue_node_t	queue.h	/^} vehicle_movement_queue_node_t;$/;"	t	typeref:struct:_vehicle_movement_queue_node_t
vehicle_movement_queue_t	queue.h	/^} vehicle_movement_queue_t;$/;"	t	typeref:struct:_vehicle_movement_queue_t
vehicle_packet_generating_entity_number	param.h	/^        int vehicle_packet_generating_entity_number; \/\/number of packet generating vehicles$/;"	m	struct:parameter
vehicle_packet_generation_schedule_time	param.h	/^        double vehicle_packet_generation_schedule_time; \/\/schedule time when vehicles generate packets$/;"	m	struct:parameter
vehicle_path_direction_t	vehicle-model.h	/^} vehicle_path_direction_t;$/;"	t	typeref:enum:_vehicle_path_direction_t
vehicle_path_length_distribution	param.h	/^	distribution_type_t vehicle_path_length_distribution; \/\/ distribution of path length$/;"	m	struct:parameter
vehicle_path_length_standard_deviation	param.h	/^	double vehicle_path_length_standard_deviation; \/\/standard deviation of path length$/;"	m	struct:parameter
vehicle_path_length_standard_deviation_end	param.h	/^	double vehicle_path_length_standard_deviation_end; \/\/end-value of standard deviation of path length$/;"	m	struct:parameter
vehicle_path_length_standard_deviation_in_km	param.h	/^	double vehicle_path_length_standard_deviation_in_km; \/\/standard deviation of path length: unit is kilometer$/;"	m	struct:parameter
vehicle_path_length_standard_deviation_in_mile	param.h	/^	double vehicle_path_length_standard_deviation_in_mile; \/\/standard deviation of path length: unit is mile$/;"	m	struct:parameter
vehicle_path_length_standard_deviation_start	param.h	/^	double vehicle_path_length_standard_deviation_start; \/\/start-value of standard deviation of path length$/;"	m	struct:parameter
vehicle_path_length_standard_deviation_step	param.h	/^	double vehicle_path_length_standard_deviation_step; \/\/step-value of standard deviation of path length$/;"	m	struct:parameter
vehicle_path_minimum_hop_count	param.h	/^        int vehicle_path_minimum_hop_count; \/\/minimum hop count in vehicle path, used to allow the vehicle trajectory have at least minimum hop count$/;"	m	struct:parameter
vehicle_pos_register_time	queue.h	/^        double vehicle_pos_register_time; \/\/register time that vehicle's position is registered$/;"	m	struct:_vehicle_trajectory_queue_t
vehicle_queue_node_t	queue.h	/^} vehicle_queue_node_t;$/;"	t	typeref:struct:_vehicle_queue_node_t
vehicle_queue_t	queue.h	/^} vehicle_queue_t;$/;"	t	typeref:struct:_vehicle_queue_t
vehicle_role_t	vehicle-model.h	/^} vehicle_role_t;$/;"	t	typeref:enum:_vehicle_role_t
vehicle_search	util.c	/^struct struct_vehicle* vehicle_search(int id)$/;"	f
vehicle_speed	param.h	/^	double vehicle_speed; \/\/vehicle speed: unit is meter\/sec$/;"	m	struct:parameter
vehicle_speed	queue.h	/^        double vehicle_speed; \/\/vehicle speed$/;"	m	struct:_vehicle_trajectory_queue_t
vehicle_speed_bound_coefficient	param.h	/^	double vehicle_speed_bound_coefficient; \/\/coefficient to determine the minimum and maximum speeds, as the multiple of vehicle speed standard deviation$/;"	m	struct:parameter
vehicle_speed_bound_coefficient_flag	param.h	/^	boolean vehicle_speed_bound_coefficient_flag; \/\/flag to indicate whether vehicle_speed_bound_coefficient should be used to determine the vehicle maximum and minimum speed limits for the vehicle speed generation$/;"	m	struct:parameter
vehicle_speed_distribution	param.h	/^	distribution_type_t vehicle_speed_distribution;$/;"	m	struct:parameter
vehicle_speed_end	param.h	/^	double vehicle_speed_end; \/\/end-value of vehicle speed$/;"	m	struct:parameter
vehicle_speed_in_km_per_hour	param.h	/^	double vehicle_speed_in_km_per_hour; \/\/unit is km\/h$/;"	m	struct:parameter
vehicle_speed_in_mile_per_hour	param.h	/^	double vehicle_speed_in_mile_per_hour; \/\/unit is mph$/;"	m	struct:parameter
vehicle_speed_standard_deviation	param.h	/^	double vehicle_speed_standard_deviation; \/\/unit is meter\/sec$/;"	m	struct:parameter
vehicle_speed_standard_deviation	queue.h	/^        double vehicle_speed_standard_deviation; \/\/vehicle speed standard deviation$/;"	m	struct:_vehicle_trajectory_queue_t
vehicle_speed_standard_deviation_in_km_per_hour	param.h	/^	double vehicle_speed_standard_deviation_in_km_per_hour; \/\/unit is km\/h$/;"	m	struct:parameter
vehicle_speed_standard_deviation_in_mile_per_hour	param.h	/^	double vehicle_speed_standard_deviation_in_mile_per_hour; \/\/unit is mph$/;"	m	struct:parameter
vehicle_speed_start	param.h	/^	double vehicle_speed_start; \/\/start-value of vehicle speed$/;"	m	struct:parameter
vehicle_speed_step	param.h	/^	double vehicle_speed_step; \/\/step-value of vehicle speed$/;"	m	struct:parameter
vehicle_speed_variance	param.h	/^	double vehicle_speed_variance; \/\/the vehicle speed variance that is the square of the vehicle speed standard deviation$/;"	m	struct:parameter
vehicle_step_mode	param.h	/^        vehicle_step_mode_type_t vehicle_step_mode; \/\/step mode for vehicle movement$/;"	m	struct:parameter
vehicle_step_mode_type_t	param.h	/^} vehicle_step_mode_type_t;$/;"	t	typeref:enum:_vehicle_step_mode_type_t
vehicle_step_time	param.h	/^	double vehicle_step_time; \/\/step time for vehicle's movement$/;"	m	struct:parameter
vehicle_think_time	param.h	/^	double vehicle_think_time; \/\/waiting time at intersection node$/;"	m	struct:parameter
vehicle_think_time_distribution	param.h	/^	distribution_type_t vehicle_think_time_distribution;$/;"	m	struct:parameter
vehicle_think_time_end	param.h	/^	double vehicle_think_time_end; \/\/end-value of waiting time at intersection node$/;"	m	struct:parameter
vehicle_think_time_standard_deviation	param.h	/^	double vehicle_think_time_standard_deviation;$/;"	m	struct:parameter
vehicle_think_time_start	param.h	/^	double vehicle_think_time_start; \/\/start-value of waiting time at intersection node$/;"	m	struct:parameter
vehicle_think_time_step	param.h	/^	double vehicle_think_time_step; \/\/step-value of waiting time at intersection node$/;"	m	struct:parameter
vehicle_think_time_variance	param.h	/^	double vehicle_think_time_variance; \/\/the variance of waiting time at intersection node due to either stop sign or traffic signal$/;"	m	struct:parameter
vehicle_trajectory	queue.h	/^        vehicle_trajectory_queue_t vehicle_trajectory; \/* destination vehicle trajectory under download mode *\/$/;"	m	struct:_packet_queue_node_t
vehicle_trajectory_queue_node_t	queue.h	/^} vehicle_trajectory_queue_node_t;$/;"	t	typeref:struct:_vehicle_trajectory_queue_node_t
vehicle_trajectory_queue_t	queue.h	/^} vehicle_trajectory_queue_t;$/;"	t	typeref:struct:_vehicle_trajectory_queue_t
vehicle_type_t	vehicle-model.h	/^} vehicle_type_t;$/;"	t	typeref:enum:_vehicle_type_t
vehicle_unit_length	param.h	/^        double vehicle_unit_length; \/\/unit length for road segment: 1 meter$/;"	m	struct:parameter
vehicle_unit_length_mean_travel_time	param.h	/^        double vehicle_unit_length_mean_travel_time; \/\/travel time for the unit length$/;"	m	struct:parameter
vehicle_unit_length_travel_time_standard_deviation	param.h	/^        double vehicle_unit_length_travel_time_standard_deviation; \/\/travel time standard deviation for the unit length        $/;"	m	struct:parameter
vehicle_unit_length_travel_time_variance	param.h	/^        double vehicle_unit_length_travel_time_variance; \/\/travel time variance for the unit length$/;"	m	struct:parameter
vehicle_vanet_acl_measurement_flag	param.h	/^        boolean vehicle_vanet_acl_measurement_flag; \/\/flag to indicate whether the ACL measurement per each directional edge will be performed or not$/;"	m	struct:parameter
vehicle_vanet_edd_and_link_model	param.h	/^        vanet_edd_and_link_model_type_t vehicle_vanet_edd_and_link_model; \/\/vehicle's EDD and Link model$/;"	m	struct:parameter
vehicle_vanet_edd_computation_model	param.h	/^        vanet_edd_computation_model_type_t vehicle_vanet_edd_computation_model; \/\/vehicle's EDD Computation model: (a) Stochastic model and (b) Shortest Path model$/;"	m	struct:parameter
vehicle_vanet_edd_model	param.h	/^        vanet_edd_model_type_t vehicle_vanet_edd_model; \/\/vehicle's EDD model$/;"	m	struct:parameter
vehicle_vanet_edge_delay_model	param.h	/^        vanet_edge_delay_model_type_t vehicle_vanet_edge_delay_model; \/\/vehicle's Edge Delay model$/;"	m	struct:parameter
vehicle_vanet_forwarding_type	param.h	/^        vanet_forwarding_type_t vehicle_vanet_forwarding_type; \/\/vehicle's Forwarding type$/;"	m	struct:parameter
vehicle_vanet_intersection_forwarding_type	param.h	/^        vanet_intersection_forwarding_type_t vehicle_vanet_intersection_forwarding_type; \/\/vehicle's Intersection Forwarding type$/;"	m	struct:parameter
vehicle_vanet_metric_type	param.h	/^        vanet_metric_type_t vehicle_vanet_metric_type; \/\/vanet metric type = {EDD, EDD_VAR}$/;"	m	struct:parameter
vehicle_vanet_stationary_vehicle_flag	param.h	/^        boolean vehicle_vanet_stationary_vehicle_flag; \/\/flag to indicate whether a stationary vehicle will be used or not$/;"	m	struct:parameter
vehicle_vanet_stationary_vehicle_id	param.h	/^        int vehicle_vanet_stationary_vehicle_id; \/\/stationary vehicle id$/;"	m	struct:parameter
vehicle_vanet_target_point_computation_method	param.h	/^        vanet_target_point_computation_method_t vehicle_vanet_target_point_computation_method; \/\/target point computation method to select a target point for destination vehicle$/;"	m	struct:parameter
vehicle_vanet_target_point_optimization_function_type	param.h	/^        vanet_target_point_optimization_function_type_t vehicle_vanet_target_point_optimization_function_type; \/\/function type to compute a target point optimization value$/;"	m	struct:parameter
vehicle_vanet_target_point_recomputation_interval_denominator	param.h	/^        double vehicle_vanet_target_point_recomputation_interval_denominator; \/\/denominator to compute the recomputation interval of a new target point $/;"	m	struct:parameter
vehicle_vanet_target_point_search_space_type	param.h	/^        vanet_target_point_search_space_type_t vehicle_vanet_target_point_search_space_type; \/\/target point search space type for the destination vehicle's trajectory$/;"	m	struct:parameter
vehicle_vanet_target_point_selection_type	param.h	/^        vanet_target_point_selection_type_t vehicle_vanet_target_point_selection_type; \/\/target point selection type for destination vehicle in reverse forwarding from AP to destination vehicle$/;"	m	struct:parameter
vehicle_vanet_target_vehicle_flag	param.h	/^        boolean vehicle_vanet_target_vehicle_flag; \/\/flag to indicate whether a target vehicle will be used or not$/;"	m	struct:parameter
vehicle_vanet_tbd_edd_computation_type	param.h	/^        vanet_tbd_edd_computation_type_t vehicle_vanet_tbd_edd_computation_type; \/\/vehicle's EDD computation type in TBD$/;"	m	struct:parameter
vehicle_vanet_vehicle_trajectory_exposure_degree	param.h	/^        double vehicle_vanet_vehicle_trajectory_exposure_degree; \/\/degree of vehicle trajectory exposure, such as 1 (=100%) and 0.5 (=50%)$/;"	m	struct:parameter
vehicle_vanet_vehicle_trajectory_length_type	param.h	/^        vanet_vehicle_trajectory_length_type_t vehicle_vanet_vehicle_trajectory_length_type; \/\/vehicle trajectory length type for destination vehicle trajectory$/;"	m	struct:parameter
vehicle_vanet_vehicle_trajectory_type	param.h	/^        vanet_vehicle_trajectory_type_t vehicle_vanet_vehicle_trajectory_type; \/\/vehicle trajectory type for destination vehicle trajectory$/;"	m	struct:parameter
vehicle_vanet_vehicular_traffic_model	param.h	/^	vanet_vehicular_traffic_model_type_t vehicle_vanet_vehicular_traffic_model; \/\/vehicular traffic model, such as closed network and open network$/;"	m	struct:parameter
vertex	graph-data-struct.h	/^	char vertex[NAME_SIZE]; \/\/vertex name indicating intersection ID in road network$/;"	m	struct:_struct_schedule_entry
vertex	graph-data-struct.h	/^	char vertex[NAME_SIZE];$/;"	m	struct:_struct_path_node
vertex	graph-data-struct.h	/^	char vertex[NAME_SIZE];$/;"	m	struct:_struct_shortest_path_node
vertex	graph-data-struct.h	/^	char vertex[NAME_SIZE];$/;"	m	struct:_struct_traffic_node
vertex	graph-data-struct.h	/^        char vertex[NAME_SIZE]; \/\/vertex name$/;"	m	struct:_struct_graph_node
vertex	queue.h	/^	char vertex[NAME_SIZE]; \/\/vertex name for a sensing hole in a virtual graph Gv$/;"	m	struct:_hole_endpoint_queue_node_t
vertex	queue.h	/^	char vertex[NAME_SIZE]; \/\/vertex name$/;"	m	struct:_vertex_set_queue_node_t
vertex	queue.h	/^	int vertex; \/\/vertex id$/;"	m	struct:_component_vertex_queue_node_t
vertex	queue.h	/^    char vertex[NAME_SIZE]; \/* the vertex name of the intersection where AP is placed *\/$/;"	m	struct:_access_point_queue_node_t
vertex_set_queue_node_t	queue.h	/^} vertex_set_queue_node_t;$/;"	t	typeref:struct:_vertex_set_queue_node_t
vertex_set_queue_t	queue.h	/^} vertex_set_queue_t;$/;"	t	typeref:struct:_vertex_set_queue_t
vid	queue.h	/^        int vid; \/\/destination vehicle id$/;"	m	struct:_destination_vehicle_queue_node_t
vid	queue.h	/^        int vid; \/\/vehicle id$/;"	m	struct:_packet_schedule_queue_node_t
vid	queue.h	/^        int vid; \/\/vehicle id$/;"	m	struct:_vehicle_movement_queue_node_t
vid	queue.h	/^        int vid; \/\/vehicle id$/;"	m	struct:_vehicle_queue_node_t
vnode	queue.h	/^        struct struct_vehicle *vnode; \/\/pointer to the vehicle node$/;"	m	struct:_destination_vehicle_queue_node_t	typeref:struct:_destination_vehicle_queue_node_t::struct_vehicle
vnode	queue.h	/^        struct struct_vehicle *vnode; \/\/pointer to the vehicle node$/;"	m	struct:_vehicle_queue_node_t	typeref:struct:_vehicle_queue_node_t::struct_vehicle
vnode	queue.h	/^        struct_vehicle_t *vnode; \/\/pointer to the vehicle$/;"	m	struct:_carrier_trace_queue_node_t
vnode	queue.h	/^        struct_vehicle_t *vnode; \/\/pointer to the vehicle$/;"	m	struct:_vehicle_trajectory_queue_t
vnode	queue.h	/^        struct_vehicle_t *vnode; \/\/pointer to vehicle node$/;"	m	struct:_vehicle_movement_queue_node_t
vsa_process_data_for_average_detection_time	vanet_compute_trace_of_adt.pl	/^sub vsa_process_data_for_average_detection_time$/;"	s
warm_up_time	sensor-model.h	/^	double warm_up_time; \/* warm-up time for sensing devices *\/$/;"	m	struct:struct_sensor
weight	apl-graph-matching.h	/^  double weight;$/;"	m	class:Weight
weight	graph-data-struct.h	/^	double weight;$/;"	m	struct:_struct_path_node
weight	graph-data-struct.h	/^        double weight; \/\/the number of edges in the node array or the edge length in the neighbor list$/;"	m	struct:_struct_graph_node
weight	graph-data-struct.h	/^        double weight; \/\/weight for edge$/;"	m	struct:_struct_coordinate3_t
weight	queue.h	/^	double weight;              \/\/weight for edge$/;"	m	struct:_edge_queue_node_t
weight	queue.h	/^	double weight;              \/\/weight for edge$/;"	m	struct:_edge_set_queue_node_t
weight	queue.h	/^	double weight;              \/\/weight for edge$/;"	m	struct:_subedge_queue_node_t
weight	queue.h	/^	double weight; \/\/weight (i.e., encounter delay)$/;"	m	struct:_neighbor_list_queue_node_t
weight	queue.h	/^	double weight; \/\/weight (i.e., encounter delay)$/;"	m	struct:_parent_list_queue_node_t
weight	queue.h	/^        double weight;              \/\/weight for edge$/;"	m	struct:_directional_edge_queue_node_t
weight	schedule.h	/^	double weight; \/\/edge weight; that is, the length of the edge$/;"	m	struct:_schedule_table_node_t
wheelbase	vehicle-model.h	/^    double wheelbase; \/* wheelbase that is the length between the front-end axle and back-end axle *\/$/;"	m	struct:struct_vehicle
x	graph-data-struct.h	/^	double x;    \/* x-coordinate of current position *\/$/;"	m	struct:_struct_coordinate1_t
y	graph-data-struct.h	/^	double y;    \/* y-coordinate of current position *\/$/;"	m	struct:_struct_coordinate1_t
